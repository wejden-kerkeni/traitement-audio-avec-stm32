
music.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbdc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800fd64  0800fd64  0001fd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801028c  0801028c  000300cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801028c  0801028c  0002028c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010294  08010294  000300cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010294  08010294  00020294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010298  08010298  00020298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0801029c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300cc  2**0
                  CONTENTS
 10 .bss          00002b4c  200000cc  200000cc  000300cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002c18  20002c18  000300cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000339c9  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066ec  00000000  00000000  00063ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b28  00000000  00000000  0006a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018c8  00000000  00000000  0006bce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028db9  00000000  00000000  0006d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028d28  00000000  00000000  00096361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5248  00000000  00000000  000bf089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001942d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071ec  00000000  00000000  00194324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000cc 	.word	0x200000cc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fd4c 	.word	0x0800fd4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d0 	.word	0x200000d0
 80001c4:	0800fd4c 	.word	0x0800fd4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	603a      	str	r2, [r7, #0]
 80004ca:	80fb      	strh	r3, [r7, #6]
 80004cc:	460b      	mov	r3, r1
 80004ce:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004d4:	2200      	movs	r2, #0
 80004d6:	6839      	ldr	r1, [r7, #0]
 80004d8:	481c      	ldr	r0, [pc, #112]	; (800054c <AUDIO_OUT_Init+0x8c>)
 80004da:	f000 f8f9 	bl	80006d0 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004de:	4b1b      	ldr	r3, [pc, #108]	; (800054c <AUDIO_OUT_Init+0x8c>)
 80004e0:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <AUDIO_OUT_Init+0x90>)
 80004e2:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004e4:	4819      	ldr	r0, [pc, #100]	; (800054c <AUDIO_OUT_Init+0x8c>)
 80004e6:	f006 f85d 	bl	80065a4 <HAL_I2S_GetState>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d103      	bne.n	80004f8 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004f0:	2100      	movs	r1, #0
 80004f2:	4816      	ldr	r0, [pc, #88]	; (800054c <AUDIO_OUT_Init+0x8c>)
 80004f4:	f000 f946 	bl	8000784 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80004f8:	6838      	ldr	r0, [r7, #0]
 80004fa:	f000 fa0b 	bl	8000914 <I2S3_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000504:	2301      	movs	r3, #1
 8000506:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d10e      	bne.n	800052c <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <AUDIO_OUT_Init+0x94>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	2094      	movs	r0, #148	; 0x94
 8000514:	4798      	blx	r3
 8000516:	4603      	mov	r3, r0
 8000518:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 800051c:	2be0      	cmp	r3, #224	; 0xe0
 800051e:	d103      	bne.n	8000528 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <AUDIO_OUT_Init+0x98>)
 8000522:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <AUDIO_OUT_Init+0x94>)
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	e001      	b.n	800052c <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000528:	2301      	movs	r3, #1
 800052a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d107      	bne.n	8000542 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <AUDIO_OUT_Init+0x98>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681c      	ldr	r4, [r3, #0]
 8000538:	797a      	ldrb	r2, [r7, #5]
 800053a:	88f9      	ldrh	r1, [r7, #6]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	2094      	movs	r0, #148	; 0x94
 8000540:	47a0      	blx	r4
  }
  
  return ret;
 8000542:	7bfb      	ldrb	r3, [r7, #15]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	200013f8 	.word	0x200013f8
 8000550:	40003c00 	.word	0x40003c00
 8000554:	20000004 	.word	0x20000004
 8000558:	200000e8 	.word	0x200000e8

0800055c <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <AUDIO_OUT_Play+0x4c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	b292      	uxth	r2, r2
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	2094      	movs	r0, #148	; 0x94
 8000574:	4798      	blx	r3
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 800057c:	2301      	movs	r3, #1
 800057e:	e00f      	b.n	80005a0 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000586:	d203      	bcs.n	8000590 <AUDIO_OUT_Play+0x34>
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	085b      	lsrs	r3, r3, #1
 800058c:	b29b      	uxth	r3, r3
 800058e:	e001      	b.n	8000594 <AUDIO_OUT_Play+0x38>
 8000590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000594:	461a      	mov	r2, r3
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <AUDIO_OUT_Play+0x50>)
 800059a:	f005 fc81 	bl	8005ea0 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800059e:	2300      	movs	r3, #0
  }
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000e8 	.word	0x200000e8
 80005ac:	200013f8 	.word	0x200013f8

080005b0 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <AUDIO_OUT_Pause+0x24>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	2094      	movs	r0, #148	; 0x94
 80005bc:	4798      	blx	r3
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005c4:	2301      	movs	r3, #1
 80005c6:	e003      	b.n	80005d0 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <AUDIO_OUT_Pause+0x28>)
 80005ca:	f005 fd11 	bl	8005ff0 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005ce:	2300      	movs	r3, #0
  }
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000e8 	.word	0x200000e8
 80005d8:	200013f8 	.word	0x200013f8

080005dc <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <AUDIO_OUT_Resume+0x24>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	2094      	movs	r0, #148	; 0x94
 80005e8:	4798      	blx	r3
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e003      	b.n	80005fc <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <AUDIO_OUT_Resume+0x28>)
 80005f6:	f005 fd5d 	bl	80060b4 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005fa:	2300      	movs	r3, #0
  }
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000e8 	.word	0x200000e8
 8000604:	200013f8 	.word	0x200013f8

08000608 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <AUDIO_OUT_Stop+0x44>)
 8000612:	f005 fde3 	bl	80061dc <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <AUDIO_OUT_Stop+0x48>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	2094      	movs	r0, #148	; 0x94
 8000620:	4798      	blx	r3
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8000628:	2301      	movs	r3, #1
 800062a:	e00b      	b.n	8000644 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d107      	bne.n	8000642 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f001 fd78 	bl	8002128 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2110      	movs	r1, #16
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <AUDIO_OUT_Stop+0x4c>)
 800063e:	f002 fd4f 	bl	80030e0 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000642:	2300      	movs	r3, #0
  }
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200013f8 	.word	0x200013f8
 8000650:	200000e8 	.word	0x200000e8
 8000654:	40020c00 	.word	0x40020c00

08000658 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <AUDIO_OUT_SetVolume+0x2c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6a1b      	ldr	r3, [r3, #32]
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	4611      	mov	r1, r2
 800066c:	2094      	movs	r0, #148	; 0x94
 800066e:	4798      	blx	r3
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800067a:	2300      	movs	r3, #0
  }
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000e8 	.word	0x200000e8

08000688 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_I2S_TxCpltCallback+0x20>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d101      	bne.n	800069e <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800069a:	f001 fcb1 	bl	8002000 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40003c00 	.word	0x40003c00

080006ac <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d101      	bne.n	80006c2 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006be:	f001 fcb3 	bl	8002028 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40003c00 	.word	0x40003c00

080006d0 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006dc:	2300      	movs	r3, #0
 80006de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006e2:	23ff      	movs	r3, #255	; 0xff
 80006e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006ee:	e010      	b.n	8000712 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80006f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006f4:	4a20      	ldr	r2, [pc, #128]	; (8000778 <AUDIO_OUT_ClockConfig+0xa8>)
 80006f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d103      	bne.n	8000708 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8000708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800070c:	3301      	adds	r3, #1
 800070e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000716:	2b07      	cmp	r3, #7
 8000718:	d9ea      	bls.n	80006f0 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4618      	mov	r0, r3
 8000720:	f007 f8a6 	bl	8007870 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000724:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000728:	f003 0307 	and.w	r3, r3, #7
 800072c:	2b00      	cmp	r3, #0
 800072e:	d113      	bne.n	8000758 <AUDIO_OUT_ClockConfig+0x88>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000730:	2301      	movs	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
    //rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000734:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000738:	4a10      	ldr	r2, [pc, #64]	; (800077c <AUDIO_OUT_ClockConfig+0xac>)
 800073a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073e:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <AUDIO_OUT_ClockConfig+0xb0>)
 8000746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074a:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4618      	mov	r0, r3
 8000752:	f006 ffab 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
   // rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000756:	e00b      	b.n	8000770 <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000758:	2301      	movs	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800075c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000760:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000762:	2303      	movs	r3, #3
 8000764:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4618      	mov	r0, r3
 800076c:	f006 ff9e 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	; 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	0800fdb8 	.word	0x0800fdb8
 800077c:	0800fdd8 	.word	0x0800fdd8
 8000780:	0800fdf8 	.word	0x0800fdf8

08000784 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4b56      	ldr	r3, [pc, #344]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a55      	ldr	r2, [pc, #340]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 8000798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b53      	ldr	r3, [pc, #332]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b4f      	ldr	r3, [pc, #316]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a4e      	ldr	r2, [pc, #312]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b48      	ldr	r3, [pc, #288]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a47      	ldr	r2, [pc, #284]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b45      	ldr	r3, [pc, #276]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80007f0:	2302      	movs	r3, #2
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80007f4:	2306      	movs	r3, #6
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	483c      	ldr	r0, [pc, #240]	; (80008f0 <AUDIO_OUT_MspInit+0x16c>)
 8000800:	f002 f9d6 	bl	8002bb0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000804:	2310      	movs	r3, #16
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4839      	ldr	r0, [pc, #228]	; (80008f4 <AUDIO_OUT_MspInit+0x170>)
 8000810:	f002 f9ce 	bl	8002bb0 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081c:	4a33      	ldr	r2, [pc, #204]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6313      	str	r3, [r2, #48]	; 0x30
 8000824:	4b31      	ldr	r3, [pc, #196]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	482d      	ldr	r0, [pc, #180]	; (80008f0 <AUDIO_OUT_MspInit+0x16c>)
 800083c:	f002 f9b8 	bl	8002bb0 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	4a28      	ldr	r2, [pc, #160]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 800084a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800084e:	6313      	str	r3, [r2, #48]	; 0x30
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <AUDIO_OUT_MspInit+0x168>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <AUDIO_OUT_MspInit+0x174>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d136      	bne.n	80008d4 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 800086e:	2240      	movs	r2, #64	; 0x40
 8000870:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 800087a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800087e:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 8000882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000886:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 800088a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800088e:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 8000898:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800089c:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008a6:	2203      	movs	r2, #3
 80008a8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008b8:	4a11      	ldr	r2, [pc, #68]	; (8000900 <AUDIO_OUT_MspInit+0x17c>)
 80008ba:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008ca:	f001 fde1 	bl	8002490 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008d0:	f001 fd30 	bl	8002334 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	210e      	movs	r1, #14
 80008d8:	202f      	movs	r0, #47	; 0x2f
 80008da:	f001 fd01 	bl	80022e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008de:	202f      	movs	r0, #47	; 0x2f
 80008e0:	f001 fd1a 	bl	8002318 <HAL_NVIC_EnableIRQ>
}
 80008e4:	bf00      	nop
 80008e6:	3730      	adds	r7, #48	; 0x30
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40003c00 	.word	0x40003c00
 80008fc:	200000ec 	.word	0x200000ec
 8000900:	400260b8 	.word	0x400260b8

08000904 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <I2S3_Init+0x68>)
 800091e:	4a18      	ldr	r2, [pc, #96]	; (8000980 <I2S3_Init+0x6c>)
 8000920:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <I2S3_Init+0x68>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	69da      	ldr	r2, [r3, #28]
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <I2S3_Init+0x68>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000930:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <I2S3_Init+0x68>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <I2S3_Init+0x68>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <I2S3_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <I2S3_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <I2S3_Init+0x68>)
 800094c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000950:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <I2S3_Init+0x68>)
 8000954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000958:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <I2S3_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <I2S3_Init+0x68>)
 8000962:	f005 f95d 	bl	8005c20 <HAL_I2S_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e000      	b.n	8000972 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000970:	2300      	movs	r3, #0
  }
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200013f8 	.word	0x200013f8
 8000980:	40003c00 	.word	0x40003c00

08000984 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_I2S_ErrorCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000996:	f7ff ffb5 	bl	8000904 <AUDIO_OUT_Error_CallBack>
  }
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40003c00 	.word	0x40003c00

080009a8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009ac:	4814      	ldr	r0, [pc, #80]	; (8000a00 <I2Cx_Init+0x58>)
 80009ae:	f004 fdcd 	bl	800554c <HAL_I2C_GetState>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d121      	bne.n	80009fc <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <I2Cx_Init+0x58>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <I2Cx_Init+0x5c>)
 80009bc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <I2Cx_Init+0x58>)
 80009c0:	2243      	movs	r2, #67	; 0x43
 80009c2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <I2Cx_Init+0x58>)
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <I2Cx_Init+0x60>)
 80009c8:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <I2Cx_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <I2Cx_Init+0x58>)
 80009d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <I2Cx_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <I2Cx_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <I2Cx_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <I2Cx_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <I2Cx_Init+0x58>)
 80009f2:	f000 f86b 	bl	8000acc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80009f6:	4802      	ldr	r0, [pc, #8]	; (8000a00 <I2Cx_Init+0x58>)
 80009f8:	f004 f914 	bl	8004c24 <HAL_I2C_Init>
  }
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000014c 	.word	0x2000014c
 8000a04:	40005400 	.word	0x40005400
 8000a08:	000186a0 	.word	0x000186a0

08000a0c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af04      	add	r7, sp, #16
 8000a12:	4603      	mov	r3, r0
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	460b      	mov	r3, r1
 8000a18:	717b      	strb	r3, [r7, #5]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <I2Cx_WriteData+0x48>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	88f9      	ldrh	r1, [r7, #6]
 8000a2c:	9302      	str	r3, [sp, #8]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2301      	movs	r3, #1
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <I2Cx_WriteData+0x4c>)
 8000a3a:	f004 fa67 	bl	8004f0c <HAL_I2C_Mem_Write>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a48:	f000 f834 	bl	8000ab4 <I2Cx_Error>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	2000014c 	.word	0x2000014c

08000a5c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	80fb      	strh	r3, [r7, #6]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a74:	797b      	ldrb	r3, [r7, #5]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <I2Cx_ReadData+0x50>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	88f9      	ldrh	r1, [r7, #6]
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	2301      	movs	r3, #1
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	f107 030e 	add.w	r3, r7, #14
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <I2Cx_ReadData+0x54>)
 8000a8e:	f004 fb37 	bl	8005100 <HAL_I2C_Mem_Read>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a9c:	f000 f80a 	bl	8000ab4 <I2Cx_Error>
  }
  return value;
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	2000014c 	.word	0x2000014c

08000ab4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <I2Cx_Error+0x14>)
 8000aba:	f004 f9f7 	bl	8004eac <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000abe:	f7ff ff73 	bl	80009a8 <I2Cx_Init>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000014c 	.word	0x2000014c

08000acc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <I2Cx_MspInit+0xa4>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a24      	ldr	r2, [pc, #144]	; (8000b70 <I2Cx_MspInit+0xa4>)
 8000ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <I2Cx_MspInit+0xa4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <I2Cx_MspInit+0xa4>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <I2Cx_MspInit+0xa4>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	6313      	str	r3, [r2, #48]	; 0x30
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <I2Cx_MspInit+0xa4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b0c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b12:	2312      	movs	r3, #18
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4812      	ldr	r0, [pc, #72]	; (8000b74 <I2Cx_MspInit+0xa8>)
 8000b2a:	f002 f841 	bl	8002bb0 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <I2Cx_MspInit+0xa4>)
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <I2Cx_MspInit+0xa4>)
 8000b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b38:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <I2Cx_MspInit+0xa4>)
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <I2Cx_MspInit+0xa4>)
 8000b40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b44:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	201f      	movs	r0, #31
 8000b4c:	f001 fbc8 	bl	80022e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b50:	201f      	movs	r0, #31
 8000b52:	f001 fbe1 	bl	8002318 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	2020      	movs	r0, #32
 8000b5c:	f001 fbc0 	bl	80022e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b60:	2020      	movs	r0, #32
 8000b62:	f001 fbd9 	bl	8002318 <HAL_NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400

08000b78 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <AUDIO_IO_Init+0x68>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <AUDIO_IO_Init+0x68>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <AUDIO_IO_Init+0x68>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	480d      	ldr	r0, [pc, #52]	; (8000be4 <AUDIO_IO_Init+0x6c>)
 8000bb0:	f001 fffe 	bl	8002bb0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bb4:	f7ff fef8 	bl	80009a8 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <AUDIO_IO_Init+0x6c>)
 8000bbe:	f002 fa8f 	bl	80030e0 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bc2:	2005      	movs	r0, #5
 8000bc4:	f001 fab0 	bl	8002128 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <AUDIO_IO_Init+0x6c>)
 8000bce:	f002 fa87 	bl	80030e0 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bd2:	2005      	movs	r0, #5
 8000bd4:	f001 faa8 	bl	8002128 <HAL_Delay>
}
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020c00 	.word	0x40020c00

08000be8 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	460b      	mov	r3, r1
 8000c02:	71bb      	strb	r3, [r7, #6]
 8000c04:	4613      	mov	r3, r2
 8000c06:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	797a      	ldrb	r2, [r7, #5]
 8000c0e:	79b9      	ldrb	r1, [r7, #6]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fefb 	bl	8000a0c <I2Cx_WriteData>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	460a      	mov	r2, r1
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	79ba      	ldrb	r2, [r7, #6]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff10 	bl	8000a5c <I2Cx_ReadData>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0d6      	sub	sp, #344	; 0x158
 8000c4c:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4942      	ldr	r1, [pc, #264]	; (8000d60 <AUDIO_StorageParse+0x118>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f00e fa05 	bl	800f068 <f_opendir>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <AUDIO_StorageParse+0x11c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000c6c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d165      	bne.n	8000d40 <AUDIO_StorageParse+0xf8>
  {
    while(Appli_state == APPLICATION_READY)
 8000c74:	e060      	b.n	8000d38 <AUDIO_StorageParse+0xf0>
    {
      res = f_readdir(&dir, &fno);
 8000c76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00e fa8b 	bl	800f19a <f_readdir>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000c8a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d156      	bne.n	8000d40 <AUDIO_StorageParse+0xf8>
 8000c92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c96:	7d9b      	ldrb	r3, [r3, #22]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d051      	beq.n	8000d40 <AUDIO_StorageParse+0xf8>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000c9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca0:	7d9b      	ldrb	r3, [r3, #22]
 8000ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8000ca4:	d100      	bne.n	8000ca8 <AUDIO_StorageParse+0x60>
      {
        continue;
 8000ca6:	e047      	b.n	8000d38 <AUDIO_StorageParse+0xf0>
      }

      fn = fno.fname;
 8000ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cac:	3316      	adds	r3, #22
 8000cae:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <AUDIO_StorageParse+0x11c>)
 8000cb4:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000cb8:	2b17      	cmp	r3, #23
 8000cba:	d83d      	bhi.n	8000d38 <AUDIO_StorageParse+0xf0>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000cbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cc0:	7a1b      	ldrb	r3, [r3, #8]
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d136      	bne.n	8000d38 <AUDIO_StorageParse+0xf0>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000cca:	4927      	ldr	r1, [pc, #156]	; (8000d68 <AUDIO_StorageParse+0x120>)
 8000ccc:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000cd0:	f00f f817 	bl	800fd02 <strstr>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d107      	bne.n	8000cea <AUDIO_StorageParse+0xa2>
 8000cda:	4924      	ldr	r1, [pc, #144]	; (8000d6c <AUDIO_StorageParse+0x124>)
 8000cdc:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000ce0:	f00f f80f 	bl	800fd02 <strstr>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d026      	beq.n	8000d38 <AUDIO_StorageParse+0xf0>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <AUDIO_StorageParse+0x11c>)
 8000cec:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <AUDIO_StorageParse+0x11c>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	3301      	adds	r3, #1
 8000d02:	2228      	movs	r2, #40	; 0x28
 8000d04:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f00e ffe7 	bl	800fcdc <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <AUDIO_StorageParse+0x11c>)
 8000d10:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d14:	461a      	mov	r2, r3
 8000d16:	4913      	ldr	r1, [pc, #76]	; (8000d64 <AUDIO_StorageParse+0x11c>)
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	4413      	add	r3, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <AUDIO_StorageParse+0x11c>)
 8000d2a:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d2e:	3301      	adds	r3, #1
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <AUDIO_StorageParse+0x11c>)
 8000d34:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <AUDIO_StorageParse+0x128>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d09a      	beq.n	8000c76 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <AUDIO_StorageParse+0x11c>)
 8000d42:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <AUDIO_StorageParse+0x12c>)
 8000d48:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00e f9fe 	bl	800f14e <f_closedir>
  return res;
 8000d52:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200020c0 	.word	0x200020c0
 8000d64:	20001ab0 	.word	0x20001ab0
 8000d68:	0800fd64 	.word	0x0800fd64
 8000d6c:	0800fd68 	.word	0x0800fd68
 8000d70:	200013ec 	.word	0x200013ec
 8000d74:	200001a0 	.word	0x200001a0

08000d78 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000d7c:	f7ff ff64 	bl	8000c48 <AUDIO_StorageParse>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <AUDIO_GetWavObjectNumber+0x14>
 8000d86:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <AUDIO_GetWavObjectNumber+0x18>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	e7ff      	b.n	8000d8c <AUDIO_GetWavObjectNumber+0x14>
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200001a0 	.word	0x200001a0

08000d94 <Mount_USB>:

void Mount_USB (void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4905      	ldr	r1, [pc, #20]	; (8000db0 <Mount_USB+0x1c>)
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <Mount_USB+0x20>)
 8000d9e:	f00d fb6f 	bl	800e480 <f_mount>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <Mount_USB+0x24>)
 8000da8:	701a      	strb	r2, [r3, #0]
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200020c0 	.word	0x200020c0
 8000db4:	200022f4 	.word	0x200022f4
 8000db8:	20001820 	.word	0x20001820

08000dbc <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	81fb      	strh	r3, [r7, #14]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	81bb      	strh	r3, [r7, #12]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000dd4:	f7ff fed0 	bl	8000b78 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2102      	movs	r1, #2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fb01 	bl	80013e8 <CODEC_IO_Write>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	4413      	add	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000df0:	89bb      	ldrh	r3, [r7, #12]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d81b      	bhi.n	8000e30 <cs43l22_Init+0x74>
 8000df8:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <cs43l22_Init+0x44>)
 8000dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfe:	bf00      	nop
 8000e00:	08000e11 	.word	0x08000e11
 8000e04:	08000e19 	.word	0x08000e19
 8000e08:	08000e21 	.word	0x08000e21
 8000e0c:	08000e29 	.word	0x08000e29
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e10:	4b5b      	ldr	r3, [pc, #364]	; (8000f80 <cs43l22_Init+0x1c4>)
 8000e12:	22fa      	movs	r2, #250	; 0xfa
 8000e14:	701a      	strb	r2, [r3, #0]
    break;
 8000e16:	e00f      	b.n	8000e38 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e18:	4b59      	ldr	r3, [pc, #356]	; (8000f80 <cs43l22_Init+0x1c4>)
 8000e1a:	22af      	movs	r2, #175	; 0xaf
 8000e1c:	701a      	strb	r2, [r3, #0]
    break;
 8000e1e:	e00b      	b.n	8000e38 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e20:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <cs43l22_Init+0x1c4>)
 8000e22:	22aa      	movs	r2, #170	; 0xaa
 8000e24:	701a      	strb	r2, [r3, #0]
    break;
 8000e26:	e007      	b.n	8000e38 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e28:	4b55      	ldr	r3, [pc, #340]	; (8000f80 <cs43l22_Init+0x1c4>)
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e2e:	e003      	b.n	8000e38 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e30:	4b53      	ldr	r3, [pc, #332]	; (8000f80 <cs43l22_Init+0x1c4>)
 8000e32:	2205      	movs	r2, #5
 8000e34:	701a      	strb	r2, [r3, #0]
    break;    
 8000e36:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4a50      	ldr	r2, [pc, #320]	; (8000f80 <cs43l22_Init+0x1c4>)
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	2104      	movs	r1, #4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 facf 	bl	80013e8 <CODEC_IO_Write>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	4413      	add	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e54:	89fb      	ldrh	r3, [r7, #14]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2281      	movs	r2, #129	; 0x81
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fac3 	bl	80013e8 <CODEC_IO_Write>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4413      	add	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e6c:	89fb      	ldrh	r3, [r7, #14]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2204      	movs	r2, #4
 8000e72:	2106      	movs	r1, #6
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fab7 	bl	80013e8 <CODEC_IO_Write>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	4413      	add	r3, r2
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000e84:	7afa      	ldrb	r2, [r7, #11]
 8000e86:	89fb      	ldrh	r3, [r7, #14]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f964 	bl	8001158 <cs43l22_SetVolume>
 8000e90:	4602      	mov	r2, r0
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	4413      	add	r3, r2
 8000e96:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000e98:	89bb      	ldrh	r3, [r7, #12]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d023      	beq.n	8000ee6 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000e9e:	89fb      	ldrh	r3, [r7, #14]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2206      	movs	r2, #6
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fa9e 	bl	80013e8 <CODEC_IO_Write>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2124      	movs	r1, #36	; 0x24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fa92 	bl	80013e8 <CODEC_IO_Write>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	4413      	add	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000ece:	89fb      	ldrh	r3, [r7, #14]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2125      	movs	r1, #37	; 0x25
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fa86 	bl	80013e8 <CODEC_IO_Write>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2200      	movs	r2, #0
 8000eec:	210a      	movs	r1, #10
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fa7a 	bl	80013e8 <CODEC_IO_Write>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	4413      	add	r3, r2
 8000efc:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2204      	movs	r2, #4
 8000f04:	210e      	movs	r1, #14
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fa6e 	bl	80013e8 <CODEC_IO_Write>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	4413      	add	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2127      	movs	r1, #39	; 0x27
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fa62 	bl	80013e8 <CODEC_IO_Write>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	220f      	movs	r2, #15
 8000f34:	211f      	movs	r1, #31
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fa56 	bl	80013e8 <CODEC_IO_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4413      	add	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	220a      	movs	r2, #10
 8000f4c:	211a      	movs	r1, #26
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fa4a 	bl	80013e8 <CODEC_IO_Write>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	220a      	movs	r2, #10
 8000f64:	211b      	movs	r1, #27
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fa3e 	bl	80013e8 <CODEC_IO_Write>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	4413      	add	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f76:	697b      	ldr	r3, [r7, #20]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200001a2 	.word	0x200001a2

08000f84 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000f88:	f7ff fe2e 	bl	8000be8 <AUDIO_IO_DeInit>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000f9a:	f7ff fded 	bl	8000b78 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fe3a 	bl	8000c1e <AUDIO_IO_Read>
 8000faa:	4603      	mov	r3, r0
 8000fac:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	f023 0307 	bic.w	r3, r3, #7
 8000fb4:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	80fb      	strh	r3, [r7, #6]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <cs43l22_Play+0x70>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d123      	bne.n	8001024 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2206      	movs	r2, #6
 8000fe2:	210e      	movs	r1, #14
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f9ff 	bl	80013e8 <CODEC_IO_Write>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f919 	bl	8001230 <cs43l22_SetMute>
 8000ffe:	4602      	mov	r2, r0
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	229e      	movs	r2, #158	; 0x9e
 800100c:	2102      	movs	r1, #2
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f9ea 	bl	80013e8 <CODEC_IO_Write>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <cs43l22_Play+0x70>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001024:	68fb      	ldr	r3, [r7, #12]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000034 	.word	0x20000034

08001034 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	2101      	movs	r1, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f8f2 	bl	8001230 <cs43l22_SetMute>
 800104c:	4602      	mov	r2, r0
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2201      	movs	r2, #1
 800105a:	2102      	movs	r1, #2
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f9c3 	bl	80013e8 <CODEC_IO_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800106c:	68fb      	ldr	r3, [r7, #12]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f8ce 	bl	8001230 <cs43l22_SetMute>
 8001094:	4602      	mov	r2, r0
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	e002      	b.n	80010a8 <cs43l22_Resume+0x30>
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3301      	adds	r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2bfe      	cmp	r3, #254	; 0xfe
 80010ac:	d9f9      	bls.n	80010a2 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <cs43l22_Resume+0x74>)
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	2104      	movs	r1, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f994 	bl	80013e8 <CODEC_IO_Write>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	229e      	movs	r2, #158	; 0x9e
 80010d0:	2102      	movs	r1, #2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f988 	bl	80013e8 <CODEC_IO_Write>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001a2 	.word	0x200001a2

080010f0 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	2101      	movs	r1, #1
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f893 	bl	8001230 <cs43l22_SetMute>
 800110a:	4602      	mov	r2, r0
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2204      	movs	r2, #4
 8001118:	210e      	movs	r1, #14
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f964 	bl	80013e8 <CODEC_IO_Write>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	229f      	movs	r2, #159	; 0x9f
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f958 	bl	80013e8 <CODEC_IO_Write>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <cs43l22_Stop+0x64>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001148:	68fb      	ldr	r3, [r7, #12]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000034 	.word	0x20000034

08001158 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	80fb      	strh	r3, [r7, #6]
 8001164:	4613      	mov	r3, r2
 8001166:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800116c:	797b      	ldrb	r3, [r7, #5]
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d80b      	bhi.n	800118a <cs43l22_SetVolume+0x32>
 8001172:	797a      	ldrb	r2, [r7, #5]
 8001174:	4613      	mov	r3, r2
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	4a25      	ldr	r2, [pc, #148]	; (8001210 <cs43l22_SetVolume+0xb8>)
 800117c:	fb82 1203 	smull	r1, r2, r2, r3
 8001180:	1152      	asrs	r2, r2, #5
 8001182:	17db      	asrs	r3, r3, #31
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	e000      	b.n	800118c <cs43l22_SetVolume+0x34>
 800118a:	23ff      	movs	r3, #255	; 0xff
 800118c:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	2be6      	cmp	r3, #230	; 0xe6
 8001192:	d91c      	bls.n	80011ce <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	b2d8      	uxtb	r0, r3
 8001198:	7afb      	ldrb	r3, [r7, #11]
 800119a:	3319      	adds	r3, #25
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	2120      	movs	r1, #32
 80011a2:	f000 f921 	bl	80013e8 <CODEC_IO_Write>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	b2d8      	uxtb	r0, r3
 80011b4:	7afb      	ldrb	r3, [r7, #11]
 80011b6:	3319      	adds	r3, #25
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	2121      	movs	r1, #33	; 0x21
 80011be:	f000 f913 	bl	80013e8 <CODEC_IO_Write>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e01b      	b.n	8001206 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	b2d8      	uxtb	r0, r3
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	3319      	adds	r3, #25
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	2120      	movs	r1, #32
 80011dc:	f000 f904 	bl	80013e8 <CODEC_IO_Write>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	b2d8      	uxtb	r0, r3
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	3319      	adds	r3, #25
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	2121      	movs	r1, #33	; 0x21
 80011f8:	f000 f8f6 	bl	80013e8 <CODEC_IO_Write>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	51eb851f 	.word	0x51eb851f

08001214 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d124      	bne.n	8001290 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	2104      	movs	r1, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f8ca 	bl	80013e8 <CODEC_IO_Write>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2201      	movs	r2, #1
 8001264:	2122      	movs	r1, #34	; 0x22
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f8be 	bl	80013e8 <CODEC_IO_Write>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2201      	movs	r2, #1
 800127c:	2123      	movs	r1, #35	; 0x23
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f8b2 	bl	80013e8 <CODEC_IO_Write>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	e025      	b.n	80012dc <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2200      	movs	r2, #0
 8001296:	2122      	movs	r1, #34	; 0x22
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f8a5 	bl	80013e8 <CODEC_IO_Write>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	2123      	movs	r1, #35	; 0x23
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f899 	bl	80013e8 <CODEC_IO_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <cs43l22_SetMute+0xb8>)
 80012c6:	7812      	ldrb	r2, [r2, #0]
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	2104      	movs	r1, #4
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f88b 	bl	80013e8 <CODEC_IO_Write>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4413      	add	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80012dc:	68fb      	ldr	r3, [r7, #12]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200001a2 	.word	0x200001a2

080012ec <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	80fb      	strh	r3, [r7, #6]
 80012f8:	4613      	mov	r3, r2
 80012fa:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001300:	797b      	ldrb	r3, [r7, #5]
 8001302:	3b01      	subs	r3, #1
 8001304:	2b03      	cmp	r3, #3
 8001306:	d84b      	bhi.n	80013a0 <cs43l22_SetOutputMode+0xb4>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <cs43l22_SetOutputMode+0x24>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001321 	.word	0x08001321
 8001314:	08001341 	.word	0x08001341
 8001318:	08001361 	.word	0x08001361
 800131c:	08001381 	.word	0x08001381
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	22fa      	movs	r2, #250	; 0xfa
 8001326:	2104      	movs	r1, #4
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f85d 	bl	80013e8 <CODEC_IO_Write>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <cs43l22_SetOutputMode+0xe0>)
 800133a:	22fa      	movs	r2, #250	; 0xfa
 800133c:	701a      	strb	r2, [r3, #0]
      break;
 800133e:	e03f      	b.n	80013c0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	22af      	movs	r2, #175	; 0xaf
 8001346:	2104      	movs	r1, #4
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f84d 	bl	80013e8 <CODEC_IO_Write>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4413      	add	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <cs43l22_SetOutputMode+0xe0>)
 800135a:	22af      	movs	r2, #175	; 0xaf
 800135c:	701a      	strb	r2, [r3, #0]
      break;
 800135e:	e02f      	b.n	80013c0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	22aa      	movs	r2, #170	; 0xaa
 8001366:	2104      	movs	r1, #4
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f83d 	bl	80013e8 <CODEC_IO_Write>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <cs43l22_SetOutputMode+0xe0>)
 800137a:	22aa      	movs	r2, #170	; 0xaa
 800137c:	701a      	strb	r2, [r3, #0]
      break;
 800137e:	e01f      	b.n	80013c0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2205      	movs	r2, #5
 8001386:	2104      	movs	r1, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f82d 	bl	80013e8 <CODEC_IO_Write>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <cs43l22_SetOutputMode+0xe0>)
 800139a:	2205      	movs	r2, #5
 800139c:	701a      	strb	r2, [r3, #0]
      break;    
 800139e:	e00f      	b.n	80013c0 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2205      	movs	r2, #5
 80013a6:	2104      	movs	r1, #4
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f81d 	bl	80013e8 <CODEC_IO_Write>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4413      	add	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <cs43l22_SetOutputMode+0xe0>)
 80013ba:	2205      	movs	r2, #5
 80013bc:	701a      	strb	r2, [r3, #0]
      break;
 80013be:	bf00      	nop
  }  
  return counter;
 80013c0:	68fb      	ldr	r3, [r7, #12]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200001a2 	.word	0x200001a2

080013d0 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]
  return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	460b      	mov	r3, r1
 80013f4:	71bb      	strb	r3, [r7, #6]
 80013f6:	4613      	mov	r3, r2
 80013f8:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80013fe:	797a      	ldrb	r2, [r7, #5]
 8001400:	79b9      	ldrb	r1, [r7, #6]
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fbf6 	bl	8000bf6 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	b2db      	uxtb	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_EXTI_Callback>:

int IsFinished = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)

{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0)
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d10d      	bne.n	8001444 <HAL_GPIO_EXTI_Callback+0x2c>
	{




		if (AudioState == AUDIO_STATE_PLAY)
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_GPIO_EXTI_Callback+0x68>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d102      	bne.n	8001436 <HAL_GPIO_EXTI_Callback+0x1e>
		{
			AudioState = AUDIO_STATE_PAUSE;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_GPIO_EXTI_Callback+0x68>)
 8001432:	220a      	movs	r2, #10
 8001434:	701a      	strb	r2, [r3, #0]
		}

		if (AudioState == AUDIO_STATE_WAIT)
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_GPIO_EXTI_Callback+0x68>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d102      	bne.n	8001444 <HAL_GPIO_EXTI_Callback+0x2c>
		{
			AudioState = AUDIO_STATE_RESUME;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_GPIO_EXTI_Callback+0x68>)
 8001440:	220b      	movs	r2, #11
 8001442:	701a      	strb	r2, [r3, #0]
		}
	}


	if (GPIO_Pin == GPIO_PIN_1)
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d102      	bne.n	8001450 <HAL_GPIO_EXTI_Callback+0x38>
	{

		AudioState = AUDIO_STATE_VOLUME_UP;
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_GPIO_EXTI_Callback+0x68>)
 800144c:	220c      	movs	r2, #12
 800144e:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_2)
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	2b04      	cmp	r3, #4
 8001454:	d102      	bne.n	800145c <HAL_GPIO_EXTI_Callback+0x44>
		{

			AudioState = AUDIO_STATE_VOLUME_DOWN;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_GPIO_EXTI_Callback+0x68>)
 8001458:	220d      	movs	r2, #13
 800145a:	701a      	strb	r2, [r3, #0]
		}
	if (GPIO_Pin == GPIO_PIN_3)
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	2b08      	cmp	r3, #8
 8001460:	d102      	bne.n	8001468 <HAL_GPIO_EXTI_Callback+0x50>
		{

			AudioState = AUDIO_STATE_NEXT;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <HAL_GPIO_EXTI_Callback+0x68>)
 8001464:	2205      	movs	r2, #5
 8001466:	701a      	strb	r2, [r3, #0]
		}
	if (GPIO_Pin == GPIO_PIN_5)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	2b20      	cmp	r3, #32
 800146c:	d102      	bne.n	8001474 <HAL_GPIO_EXTI_Callback+0x5c>
		{

			AudioState = AUDIO_STATE_PREVIOUS;
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_GPIO_EXTI_Callback+0x68>)
 8001470:	2206      	movs	r2, #6
 8001472:	701a      	strb	r2, [r3, #0]
		}
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	20001a80 	.word	0x20001a80

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001488:	f000 fe0c 	bl	80020a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148c:	f000 f82e 	bl	80014ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001490:	f000 f912 	bl	80016b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001494:	f000 f894 	bl	80015c0 <MX_I2C1_Init>
  MX_DMA_Init();
 8001498:	f000 f8ee 	bl	8001678 <MX_DMA_Init>
  MX_I2S3_Init();
 800149c:	f000 f8be 	bl	800161c <MX_I2S3_Init>
  MX_FATFS_Init();
 80014a0:	f007 fcd6 	bl	8008e50 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80014a4:	f00d ffd8 	bl	800f458 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80014a8:	f00d fffc 	bl	800f4a4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (Appli_state == APPLICATION_READY)
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <main+0x5c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d1f9      	bne.n	80014a8 <main+0x24>
        {
        	Mount_USB();
 80014b4:	f7ff fc6e 	bl	8000d94 <Mount_USB>
        	AUDIO_PLAYER_Start(0);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 fc23 	bl	8001d04 <AUDIO_PLAYER_Start>

        	while (!IsFinished)
 80014be:	e009      	b.n	80014d4 <main+0x50>
        	{
        		AUDIO_PLAYER_Process(TRUE);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f000 fc7f 	bl	8001dc4 <AUDIO_PLAYER_Process>

        		if (AudioState == AUDIO_STATE_STOP)
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <main+0x60>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b09      	cmp	r3, #9
 80014cc:	d102      	bne.n	80014d4 <main+0x50>
        		{
        			IsFinished = 1;
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <main+0x64>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
        	while (!IsFinished)
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <main+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f1      	beq.n	80014c0 <main+0x3c>
    MX_USB_HOST_Process();
 80014dc:	e7e4      	b.n	80014a8 <main+0x24>
 80014de:	bf00      	nop
 80014e0:	200013ec 	.word	0x200013ec
 80014e4:	20001a80 	.word	0x20001a80
 80014e8:	200001a4 	.word	0x200001a4

080014ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b094      	sub	sp, #80	; 0x50
 80014f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	2230      	movs	r2, #48	; 0x30
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f00e fb2c 	bl	800fb58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <SystemClock_Config+0xcc>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <SystemClock_Config+0xcc>)
 800151a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151e:	6413      	str	r3, [r2, #64]	; 0x40
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <SystemClock_Config+0xcc>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <SystemClock_Config+0xd0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <SystemClock_Config+0xd0>)
 8001536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <SystemClock_Config+0xd0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800154c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001552:	2302      	movs	r3, #2
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800155c:	2304      	movs	r3, #4
 800155e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001560:	23c0      	movs	r3, #192	; 0xc0
 8001562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001564:	2304      	movs	r3, #4
 8001566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001568:	2308      	movs	r3, #8
 800156a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fbf5 	bl	8006d60 <HAL_RCC_OscConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800157c:	f000 f944 	bl	8001808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001580:	230f      	movs	r3, #15
 8001582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001584:	2302      	movs	r3, #2
 8001586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800158c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2103      	movs	r1, #3
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 fe56 	bl	8007250 <HAL_RCC_ClockConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015aa:	f000 f92d 	bl	8001808 <Error_Handler>
  }
}
 80015ae:	bf00      	nop
 80015b0:	3750      	adds	r7, #80	; 0x50
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40007000 	.word	0x40007000

080015c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_I2C1_Init+0x50>)
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <MX_I2C1_Init+0x54>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_I2C1_Init+0x50>)
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <MX_I2C1_Init+0x58>)
 80015ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_I2C1_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_I2C1_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_I2C1_Init+0x50>)
 80015de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <MX_I2C1_Init+0x50>)
 80015fe:	f003 fb11 	bl	8004c24 <HAL_I2C_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001608:	f000 f8fe 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000193c 	.word	0x2000193c
 8001614:	40005400 	.word	0x40005400
 8001618:	000186a0 	.word	0x000186a0

0800161c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <MX_I2S3_Init+0x54>)
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <MX_I2S3_Init+0x58>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_I2S3_Init+0x54>)
 8001628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_I2S3_Init+0x54>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_I2S3_Init+0x54>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <MX_I2S3_Init+0x54>)
 800163c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001640:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_I2S3_Init+0x54>)
 8001644:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001648:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_I2S3_Init+0x54>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_I2S3_Init+0x54>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_I2S3_Init+0x54>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_I2S3_Init+0x54>)
 800165e:	f004 fadf 	bl	8005c20 <HAL_I2S_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001668:	f000 f8ce 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200019f0 	.word	0x200019f0
 8001674:	40003c00 	.word	0x40003c00

08001678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_DMA_Init+0x3c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2010      	movs	r0, #16
 80016a0:	f000 fe1e 	bl	80022e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016a4:	2010      	movs	r0, #16
 80016a6:	f000 fe37 	bl	8002318 <HAL_NVIC_EnableIRQ>

}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a40      	ldr	r2, [pc, #256]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a39      	ldr	r2, [pc, #228]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <MX_GPIO_Init+0x120>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <MX_GPIO_Init+0x120>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <MX_GPIO_Init+0x120>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <MX_GPIO_Init+0x120>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <MX_GPIO_Init+0x120>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a2b      	ldr	r2, [pc, #172]	; (80017d8 <MX_GPIO_Init+0x120>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <MX_GPIO_Init+0x120>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2101      	movs	r1, #1
 8001742:	4826      	ldr	r0, [pc, #152]	; (80017dc <MX_GPIO_Init+0x124>)
 8001744:	f001 fccc 	bl	80030e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001748:	2301      	movs	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	481f      	ldr	r0, [pc, #124]	; (80017dc <MX_GPIO_Init+0x124>)
 8001760:	f001 fa26 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001764:	232f      	movs	r3, #47	; 0x2f
 8001766:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001768:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800176e:	2302      	movs	r3, #2
 8001770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4819      	ldr	r0, [pc, #100]	; (80017e0 <MX_GPIO_Init+0x128>)
 800177a:	f001 fa19 	bl	8002bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2006      	movs	r0, #6
 8001784:	f000 fdac 	bl	80022e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001788:	2006      	movs	r0, #6
 800178a:	f000 fdc5 	bl	8002318 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2007      	movs	r0, #7
 8001794:	f000 fda4 	bl	80022e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001798:	2007      	movs	r0, #7
 800179a:	f000 fdbd 	bl	8002318 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2008      	movs	r0, #8
 80017a4:	f000 fd9c 	bl	80022e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017a8:	2008      	movs	r0, #8
 80017aa:	f000 fdb5 	bl	8002318 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2009      	movs	r0, #9
 80017b4:	f000 fd94 	bl	80022e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017b8:	2009      	movs	r0, #9
 80017ba:	f000 fdad 	bl	8002318 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2017      	movs	r0, #23
 80017c4:	f000 fd8c 	bl	80022e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017c8:	2017      	movs	r0, #23
 80017ca:	f000 fda5 	bl	8002318 <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017f6:	f000 fc77 	bl	80020e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40010000 	.word	0x40010000

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	e7fe      	b.n	8001810 <Error_Handler+0x8>
	...

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_MspInit+0x4c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x4c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001852:	2007      	movs	r0, #7
 8001854:	f000 fd39 	bl	80022ca <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_I2C_MspInit+0x84>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d12c      	bne.n	80018e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_I2C_MspInit+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_I2C_MspInit+0x88>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_I2C_MspInit+0x88>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80018a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a8:	2312      	movs	r3, #18
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018b4:	2304      	movs	r3, #4
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	480c      	ldr	r0, [pc, #48]	; (80018f0 <HAL_I2C_MspInit+0x8c>)
 80018c0:	f001 f976 	bl	8002bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_I2C_MspInit+0x88>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_I2C_MspInit+0x88>)
 80018ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_I2C_MspInit+0x88>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40005400 	.word	0x40005400
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020400 	.word	0x40020400

080018f4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_I2C_MspDeInit+0x38>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10e      	bne.n	8001924 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_I2C_MspDeInit+0x3c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_I2C_MspDeInit+0x3c>)
 800190c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001912:	2140      	movs	r1, #64	; 0x40
 8001914:	4807      	ldr	r0, [pc, #28]	; (8001934 <HAL_I2C_MspDeInit+0x40>)
 8001916:	f001 fae7 	bl	8002ee8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800191a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <HAL_I2C_MspDeInit+0x40>)
 8001920:	f001 fae2 	bl	8002ee8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40005400 	.word	0x40005400
 8001930:	40023800 	.word	0x40023800
 8001934:	40020400 	.word	0x40020400

08001938 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08e      	sub	sp, #56	; 0x38
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a4e      	ldr	r2, [pc, #312]	; (8001a9c <HAL_I2S_MspInit+0x164>)
 8001964:	4293      	cmp	r3, r2
 8001966:	f040 8094 	bne.w	8001a92 <HAL_I2S_MspInit+0x15a>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800196a:	2301      	movs	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800196e:	23c0      	movs	r3, #192	; 0xc0
 8001970:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001972:	2302      	movs	r3, #2
 8001974:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4618      	mov	r0, r3
 800197c:	f005 fe96 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001986:	f7ff ff3f 	bl	8001808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <HAL_I2S_MspInit+0x168>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a43      	ldr	r2, [pc, #268]	; (8001aa0 <HAL_I2S_MspInit+0x168>)
 8001994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <HAL_I2S_MspInit+0x168>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b3d      	ldr	r3, [pc, #244]	; (8001aa0 <HAL_I2S_MspInit+0x168>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a3c      	ldr	r2, [pc, #240]	; (8001aa0 <HAL_I2S_MspInit+0x168>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <HAL_I2S_MspInit+0x168>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_I2S_MspInit+0x168>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a35      	ldr	r2, [pc, #212]	; (8001aa0 <HAL_I2S_MspInit+0x168>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <HAL_I2S_MspInit+0x168>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019de:	2310      	movs	r3, #16
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ee:	2306      	movs	r3, #6
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f6:	4619      	mov	r1, r3
 80019f8:	482a      	ldr	r0, [pc, #168]	; (8001aa4 <HAL_I2S_MspInit+0x16c>)
 80019fa:	f001 f8d9 	bl	8002bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80019fe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a10:	2306      	movs	r3, #6
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4823      	ldr	r0, [pc, #140]	; (8001aa8 <HAL_I2S_MspInit+0x170>)
 8001a1c:	f001 f8c8 	bl	8002bb0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a22:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_I2S_MspInit+0x178>)
 8001a24:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a2e:	2240      	movs	r2, #64	; 0x40
 8001a30:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a46:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a56:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a60:	2204      	movs	r2, #4
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a66:	2203      	movs	r2, #3
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a78:	f000 fc5c 	bl	8002334 <HAL_DMA_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8001a82:	f7ff fec1 	bl	8001808 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a8a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_I2S_MspInit+0x174>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3738      	adds	r7, #56	; 0x38
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40003c00 	.word	0x40003c00
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	20001990 	.word	0x20001990
 8001ab0:	40026088 	.word	0x40026088

08001ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	2019      	movs	r0, #25
 8001aca:	f000 fc09 	bl	80022e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ace:	2019      	movs	r0, #25
 8001ad0:	f000 fc22 	bl	8002318 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <HAL_InitTick+0xa4>)
 8001ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001adc:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_InitTick+0xa4>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_InitTick+0xa4>)
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af0:	f107 0210 	add.w	r2, r7, #16
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f005 fda4 	bl	8007648 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001b00:	f005 fd8e 	bl	8007620 <HAL_RCC_GetPCLK2Freq>
 8001b04:	4603      	mov	r3, r0
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <HAL_InitTick+0xa8>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0c9b      	lsrs	r3, r3, #18
 8001b14:	3b01      	subs	r3, #1
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_InitTick+0xac>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <HAL_InitTick+0xb0>)
 8001b1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_InitTick+0xac>)
 8001b20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_InitTick+0xac>)
 8001b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_InitTick+0xac>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_InitTick+0xac>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b38:	4809      	ldr	r0, [pc, #36]	; (8001b60 <HAL_InitTick+0xac>)
 8001b3a:	f005 ff23 	bl	8007984 <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d104      	bne.n	8001b4e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b44:	4806      	ldr	r0, [pc, #24]	; (8001b60 <HAL_InitTick+0xac>)
 8001b46:	f005 ff77 	bl	8007a38 <HAL_TIM_Base_Start_IT>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	e000      	b.n	8001b50 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3730      	adds	r7, #48	; 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	431bde83 	.word	0x431bde83
 8001b60:	20001a38 	.word	0x20001a38
 8001b64:	40010000 	.word	0x40010000

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f001 faa6 	bl	8003114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f001 fa9f 	bl	8003114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001bde:	2004      	movs	r0, #4
 8001be0:	f001 fa98 	bl	8003114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001bec:	2008      	movs	r0, #8
 8001bee:	f001 fa91 	bl	8003114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <DMA1_Stream5_IRQHandler+0x10>)
 8001bfe:	f000 fd6d 	bl	80026dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20001990 	.word	0x20001990

08001c0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c10:	2020      	movs	r0, #32
 8001c12:	f001 fa7f 	bl	8003114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c22:	f005 ff79 	bl	8007b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20001a38 	.word	0x20001a38

08001c30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <OTG_FS_IRQHandler+0x10>)
 8001c36:	f001 fcef 	bl	8003618 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20002904 	.word	0x20002904

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f00d ff28 	bl	800fac8 <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20020000 	.word	0x20020000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	200001a8 	.word	0x200001a8
 8001cac:	20002c18 	.word	0x20002c18

08001cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <SystemInit+0x20>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <SystemInit+0x20>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <PlayerInit+0x2c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	f7fe fbea 	bl	80004c0 <AUDIO_OUT_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <PlayerInit+0x22>
	{
		return 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001cf6:	2300      	movs	r3, #0
	}
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000003c 	.word	0x2000003c

08001d04 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  uint bytesread;

  f_close(&WavFile);
 8001d0e:	4828      	ldr	r0, [pc, #160]	; (8001db0 <AUDIO_PLAYER_Start+0xac>)
 8001d10:	f00c ff77 	bl	800ec02 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001d14:	f7ff f830 	bl	8000d78 <AUDIO_GetWavObjectNumber>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d940      	bls.n	8001da6 <AUDIO_PLAYER_Start+0xa2>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <AUDIO_PLAYER_Start+0xb0>)
 8001d32:	4413      	add	r3, r2
 8001d34:	3301      	adds	r3, #1
 8001d36:	2201      	movs	r2, #1
 8001d38:	4619      	mov	r1, r3
 8001d3a:	481d      	ldr	r0, [pc, #116]	; (8001db0 <AUDIO_PLAYER_Start+0xac>)
 8001d3c:	f00c fbe6 	bl	800e50c <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	222c      	movs	r2, #44	; 0x2c
 8001d46:	491c      	ldr	r1, [pc, #112]	; (8001db8 <AUDIO_PLAYER_Start+0xb4>)
 8001d48:	4819      	ldr	r0, [pc, #100]	; (8001db0 <AUDIO_PLAYER_Start+0xac>)
 8001d4a:	f00c fd9d 	bl	800e888 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <AUDIO_PLAYER_Start+0xb4>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ffbe 	bl	8001cd4 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <AUDIO_PLAYER_Start+0xb8>)
 8001d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001d62:	2100      	movs	r1, #0
 8001d64:	4812      	ldr	r0, [pc, #72]	; (8001db0 <AUDIO_PLAYER_Start+0xac>)
 8001d66:	f00c ff76 	bl	800ec56 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d72:	4912      	ldr	r1, [pc, #72]	; (8001dbc <AUDIO_PLAYER_Start+0xb8>)
 8001d74:	480e      	ldr	r0, [pc, #56]	; (8001db0 <AUDIO_PLAYER_Start+0xac>)
 8001d76:	f00c fd87 	bl	800e888 <f_read>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d112      	bne.n	8001da6 <AUDIO_PLAYER_Start+0xa2>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <AUDIO_PLAYER_Start+0xbc>)
 8001d82:	2203      	movs	r2, #3
 8001d84:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00c      	beq.n	8001da6 <AUDIO_PLAYER_Start+0xa2>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d90:	480a      	ldr	r0, [pc, #40]	; (8001dbc <AUDIO_PLAYER_Start+0xb8>)
 8001d92:	f7fe fbe3 	bl	800055c <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <AUDIO_PLAYER_Start+0xb8>)
 8001d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9e:	3304      	adds	r3, #4
 8001da0:	601a      	str	r2, [r3, #0]
          return AUDIO_ERROR_NONE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <AUDIO_PLAYER_Start+0xa4>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20001e8c 	.word	0x20001e8c
 8001db4:	20001ab0 	.word	0x20001ab0
 8001db8:	20001a84 	.word	0x20001a84
 8001dbc:	200001ac 	.word	0x200001ac
 8001dc0:	20001a80 	.word	0x20001a80

08001dc4 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8001dd2:	4b84      	ldr	r3, [pc, #528]	; (8001fe4 <AUDIO_PLAYER_Process+0x220>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3b03      	subs	r3, #3
 8001dd8:	2b0a      	cmp	r3, #10
 8001dda:	f200 80fb 	bhi.w	8001fd4 <AUDIO_PLAYER_Process+0x210>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <AUDIO_PLAYER_Process+0x20>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e11 	.word	0x08001e11
 8001de8:	08001fd5 	.word	0x08001fd5
 8001dec:	08001ee1 	.word	0x08001ee1
 8001df0:	08001f2f 	.word	0x08001f2f
 8001df4:	08001fd5 	.word	0x08001fd5
 8001df8:	08001fd5 	.word	0x08001fd5
 8001dfc:	08001ecf 	.word	0x08001ecf
 8001e00:	08001f71 	.word	0x08001f71
 8001e04:	08001f7d 	.word	0x08001f7d
 8001e08:	08001f89 	.word	0x08001f89
 8001e0c:	08001faf 	.word	0x08001faf
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001e10:	4b75      	ldr	r3, [pc, #468]	; (8001fe8 <AUDIO_PLAYER_Process+0x224>)
 8001e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e16:	3304      	adds	r3, #4
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b74      	ldr	r3, [pc, #464]	; (8001fec <AUDIO_PLAYER_Process+0x228>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d305      	bcc.n	8001e2e <AUDIO_PLAYER_Process+0x6a>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001e22:	2002      	movs	r0, #2
 8001e24:	f7fe fbf0 	bl	8000608 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001e28:	4b6e      	ldr	r3, [pc, #440]	; (8001fe4 <AUDIO_PLAYER_Process+0x220>)
 8001e2a:	2205      	movs	r2, #5
 8001e2c:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <AUDIO_PLAYER_Process+0x224>)
 8001e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d120      	bne.n	8001e7c <AUDIO_PLAYER_Process+0xb8>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e42:	4969      	ldr	r1, [pc, #420]	; (8001fe8 <AUDIO_PLAYER_Process+0x224>)
 8001e44:	486a      	ldr	r0, [pc, #424]	; (8001ff0 <AUDIO_PLAYER_Process+0x22c>)
 8001e46:	f00c fd1f 	bl	800e888 <f_read>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d004      	beq.n	8001e5a <AUDIO_PLAYER_Process+0x96>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001e50:	2002      	movs	r0, #2
 8001e52:	f7fe fbd9 	bl	8000608 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0c0      	b.n	8001fdc <AUDIO_PLAYER_Process+0x218>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001e5a:	4b63      	ldr	r3, [pc, #396]	; (8001fe8 <AUDIO_PLAYER_Process+0x224>)
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001e64:	4b60      	ldr	r3, [pc, #384]	; (8001fe8 <AUDIO_PLAYER_Process+0x224>)
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	441a      	add	r2, r3
 8001e72:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <AUDIO_PLAYER_Process+0x224>)
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	3304      	adds	r3, #4
 8001e7a:	601a      	str	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001e7c:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <AUDIO_PLAYER_Process+0x224>)
 8001e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	f040 80a7 	bne.w	8001fd8 <AUDIO_PLAYER_Process+0x214>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e92:	4958      	ldr	r1, [pc, #352]	; (8001ff4 <AUDIO_PLAYER_Process+0x230>)
 8001e94:	4856      	ldr	r0, [pc, #344]	; (8001ff0 <AUDIO_PLAYER_Process+0x22c>)
 8001e96:	f00c fcf7 	bl	800e888 <f_read>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <AUDIO_PLAYER_Process+0xe6>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	f7fe fbb1 	bl	8000608 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e098      	b.n	8001fdc <AUDIO_PLAYER_Process+0x218>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001eaa:	4b4f      	ldr	r3, [pc, #316]	; (8001fe8 <AUDIO_PLAYER_Process+0x224>)
 8001eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001eb4:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <AUDIO_PLAYER_Process+0x224>)
 8001eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eba:	3304      	adds	r3, #4
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	441a      	add	r2, r3
 8001ec2:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <AUDIO_PLAYER_Process+0x224>)
 8001ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec8:	3304      	adds	r3, #4
 8001eca:	601a      	str	r2, [r3, #0]
    }
    break;
 8001ecc:	e084      	b.n	8001fd8 <AUDIO_PLAYER_Process+0x214>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f7fe fb9a 	bl	8000608 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8001ed4:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <AUDIO_PLAYER_Process+0x220>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
    break;
 8001ede:	e07c      	b.n	8001fda <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8001ee0:	4b45      	ldr	r3, [pc, #276]	; (8001ff8 <AUDIO_PLAYER_Process+0x234>)
 8001ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b21a      	sxth	r2, r3
 8001eee:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <AUDIO_PLAYER_Process+0x234>)
 8001ef0:	801a      	strh	r2, [r3, #0]
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <AUDIO_PLAYER_Process+0x234>)
 8001ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef8:	461c      	mov	r4, r3
 8001efa:	f7fe ff3d 	bl	8000d78 <AUDIO_GetWavObjectNumber>
 8001efe:	4603      	mov	r3, r0
 8001f00:	429c      	cmp	r4, r3
 8001f02:	db09      	blt.n	8001f18 <AUDIO_PLAYER_Process+0x154>
    {
    	if (isLoop)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <AUDIO_PLAYER_Process+0x14e>
    	{
    		FilePos = 0;
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <AUDIO_PLAYER_Process+0x234>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	801a      	strh	r2, [r3, #0]
 8001f10:	e002      	b.n	8001f18 <AUDIO_PLAYER_Process+0x154>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8001f12:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <AUDIO_PLAYER_Process+0x220>)
 8001f14:	2209      	movs	r2, #9
 8001f16:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f18:	2002      	movs	r0, #2
 8001f1a:	f7fe fb75 	bl	8000608 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <AUDIO_PLAYER_Process+0x234>)
 8001f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff feec 	bl	8001d04 <AUDIO_PLAYER_Start>
    break;    
 8001f2c:	e055      	b.n	8001fda <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8001f2e:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <AUDIO_PLAYER_Process+0x234>)
 8001f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <AUDIO_PLAYER_Process+0x234>)
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <AUDIO_PLAYER_Process+0x234>)
 8001f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da07      	bge.n	8001f5a <AUDIO_PLAYER_Process+0x196>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8001f4a:	f7fe ff15 	bl	8000d78 <AUDIO_GetWavObjectNumber>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <AUDIO_PLAYER_Process+0x234>)
 8001f58:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f7fe fb54 	bl	8000608 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001f60:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <AUDIO_PLAYER_Process+0x234>)
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fecb 	bl	8001d04 <AUDIO_PLAYER_Start>
    break;   
 8001f6e:	e034      	b.n	8001fda <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8001f70:	f7fe fb1e 	bl	80005b0 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <AUDIO_PLAYER_Process+0x220>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
    break;
 8001f7a:	e02e      	b.n	8001fda <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8001f7c:	f7fe fb2e 	bl	80005dc <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <AUDIO_PLAYER_Process+0x220>)
 8001f82:	2203      	movs	r2, #3
 8001f84:	701a      	strb	r2, [r3, #0]
    break;
 8001f86:	e028      	b.n	8001fda <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8001f88:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <AUDIO_PLAYER_Process+0x238>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b5a      	cmp	r3, #90	; 0x5a
 8001f8e:	d804      	bhi.n	8001f9a <AUDIO_PLAYER_Process+0x1d6>
    {
      uwVolume += 2;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <AUDIO_PLAYER_Process+0x238>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3302      	adds	r3, #2
 8001f96:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <AUDIO_PLAYER_Process+0x238>)
 8001f98:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <AUDIO_PLAYER_Process+0x238>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fb59 	bl	8000658 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <AUDIO_PLAYER_Process+0x220>)
 8001fa8:	2203      	movs	r2, #3
 8001faa:	701a      	strb	r2, [r3, #0]
    break;
 8001fac:	e015      	b.n	8001fda <AUDIO_PLAYER_Process+0x216>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <AUDIO_PLAYER_Process+0x238>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b09      	cmp	r3, #9
 8001fb4:	d904      	bls.n	8001fc0 <AUDIO_PLAYER_Process+0x1fc>
    {
      uwVolume -= 2;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <AUDIO_PLAYER_Process+0x238>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3b02      	subs	r3, #2
 8001fbc:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <AUDIO_PLAYER_Process+0x238>)
 8001fbe:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <AUDIO_PLAYER_Process+0x238>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fb46 	bl	8000658 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <AUDIO_PLAYER_Process+0x220>)
 8001fce:	2203      	movs	r2, #3
 8001fd0:	701a      	strb	r2, [r3, #0]
    break;
 8001fd2:	e002      	b.n	8001fda <AUDIO_PLAYER_Process+0x216>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8001fd4:	bf00      	nop
 8001fd6:	e000      	b.n	8001fda <AUDIO_PLAYER_Process+0x216>
    break;
 8001fd8:	bf00      	nop
  }
  return audio_error;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	20001a80 	.word	0x20001a80
 8001fe8:	200001ac 	.word	0x200001ac
 8001fec:	20001a84 	.word	0x20001a84
 8001ff0:	20001e8c 	.word	0x20001e8c
 8001ff4:	200009ac 	.word	0x200009ac
 8001ff8:	200011b4 	.word	0x200011b4
 8001ffc:	2000003c 	.word	0x2000003c

08002000 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d104      	bne.n	8002016 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800200e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002012:	2202      	movs	r2, #2
 8002014:	701a      	strb	r2, [r3, #0]
  }
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	20001a80 	.word	0x20001a80
 8002024:	200001ac 	.word	0x200001ac

08002028 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d104      	bne.n	800203e <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
  }
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	20001a80 	.word	0x20001a80
 800204c:	200001ac 	.word	0x200001ac

08002050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002056:	490e      	ldr	r1, [pc, #56]	; (8002090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002058:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800206c:	4c0b      	ldr	r4, [pc, #44]	; (800209c <LoopFillZerobss+0x26>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800207a:	f7ff fe19 	bl	8001cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207e:	f00d fd29 	bl	800fad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002082:	f7ff f9ff 	bl	8001484 <main>
  bx  lr    
 8002086:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002090:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002094:	0801029c 	.word	0x0801029c
  ldr r2, =_sbss
 8002098:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 800209c:	20002c18 	.word	0x20002c18

080020a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a0:	e7fe      	b.n	80020a0 <ADC_IRQHandler>
	...

080020a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <HAL_Init+0x40>)
 80020ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_Init+0x40>)
 80020ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_Init+0x40>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020cc:	2003      	movs	r0, #3
 80020ce:	f000 f8fc 	bl	80022ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff fcee 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d8:	f7ff fb9c 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000044 	.word	0x20000044
 800210c:	200020bc 	.word	0x200020bc

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	200020bc 	.word	0x200020bc

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000044 	.word	0x20000044

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <__NVIC_EnableIRQ+0x38>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ff4c 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f2:	f7ff ff61 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 80022f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	6978      	ldr	r0, [r7, #20]
 80022fe:	f7ff ffb1 	bl	8002264 <NVIC_EncodePriority>
 8002302:	4602      	mov	r2, r0
 8002304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff80 	bl	8002210 <__NVIC_SetPriority>
}
 8002310:	bf00      	nop
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff54 	bl	80021d4 <__NVIC_EnableIRQ>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff fee6 	bl	8002110 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e099      	b.n	8002484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002370:	e00f      	b.n	8002392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002372:	f7ff fecd 	bl	8002110 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b05      	cmp	r3, #5
 800237e:	d908      	bls.n	8002392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2203      	movs	r2, #3
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e078      	b.n	8002484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e8      	bne.n	8002372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_DMA_Init+0x158>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d107      	bne.n	80023fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	4313      	orrs	r3, r2
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f023 0307 	bic.w	r3, r3, #7
 8002412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	2b04      	cmp	r3, #4
 8002424:	d117      	bne.n	8002456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00e      	beq.n	8002456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fb3d 	bl	8002ab8 <DMA_CheckFifoParam>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2240      	movs	r2, #64	; 0x40
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002452:	2301      	movs	r3, #1
 8002454:	e016      	b.n	8002484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 faf4 	bl	8002a4c <DMA_CalcBaseAndBitshift>
 8002464:	4603      	mov	r3, r0
 8002466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	223f      	movs	r2, #63	; 0x3f
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	f010803f 	.word	0xf010803f

08002490 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e050      	b.n	8002544 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80024ae:	2302      	movs	r3, #2
 80024b0:	e048      	b.n	8002544 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2221      	movs	r2, #33	; 0x21
 80024f0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 faaa 	bl	8002a4c <DMA_CalcBaseAndBitshift>
 80024f8:	4603      	mov	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	223f      	movs	r2, #63	; 0x3f
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_DMA_Start_IT+0x26>
 800256e:	2302      	movs	r3, #2
 8002570:	e040      	b.n	80025f4 <HAL_DMA_Start_IT+0xa8>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d12f      	bne.n	80025e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fa28 	bl	80029f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	223f      	movs	r2, #63	; 0x3f
 80025a6:	409a      	lsls	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0216 	orr.w	r2, r2, #22
 80025ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0208 	orr.w	r2, r2, #8
 80025d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e005      	b.n	80025f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800260a:	f7ff fd81 	bl	8002110 <HAL_GetTick>
 800260e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d008      	beq.n	800262e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e052      	b.n	80026d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0216 	bic.w	r2, r2, #22
 800263c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800264c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_DMA_Abort+0x62>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0208 	bic.w	r2, r2, #8
 800266c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267e:	e013      	b.n	80026a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002680:	f7ff fd46 	bl	8002110 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b05      	cmp	r3, #5
 800268c:	d90c      	bls.n	80026a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2203      	movs	r2, #3
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e015      	b.n	80026d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1e4      	bne.n	8002680 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	223f      	movs	r2, #63	; 0x3f
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e8:	4b92      	ldr	r3, [pc, #584]	; (8002934 <HAL_DMA_IRQHandler+0x258>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a92      	ldr	r2, [pc, #584]	; (8002938 <HAL_DMA_IRQHandler+0x25c>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0a9b      	lsrs	r3, r3, #10
 80026f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	2208      	movs	r2, #8
 8002708:	409a      	lsls	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d01a      	beq.n	8002748 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0204 	bic.w	r2, r2, #4
 800272e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	2208      	movs	r2, #8
 8002736:	409a      	lsls	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	2201      	movs	r2, #1
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d012      	beq.n	800277e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	2201      	movs	r2, #1
 800276c:	409a      	lsls	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f043 0202 	orr.w	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2204      	movs	r2, #4
 8002784:	409a      	lsls	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d012      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	2204      	movs	r2, #4
 80027a2:	409a      	lsls	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	f043 0204 	orr.w	r2, r3, #4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	2210      	movs	r2, #16
 80027ba:	409a      	lsls	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d043      	beq.n	800284c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d03c      	beq.n	800284c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2210      	movs	r2, #16
 80027d8:	409a      	lsls	r2, r3
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d018      	beq.n	800281e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d108      	bne.n	800280c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d024      	beq.n	800284c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
 800280a:	e01f      	b.n	800284c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01b      	beq.n	800284c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
 800281c:	e016      	b.n	800284c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0208 	bic.w	r2, r2, #8
 800283a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	2220      	movs	r2, #32
 8002852:	409a      	lsls	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 808e 	beq.w	800297a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8086 	beq.w	800297a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	2220      	movs	r2, #32
 8002874:	409a      	lsls	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b05      	cmp	r3, #5
 8002884:	d136      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0216 	bic.w	r2, r2, #22
 8002894:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <HAL_DMA_IRQHandler+0x1da>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0208 	bic.w	r2, r2, #8
 80028c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	223f      	movs	r2, #63	; 0x3f
 80028cc:	409a      	lsls	r2, r3
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d07d      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
        }
        return;
 80028f2:	e078      	b.n	80029e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01c      	beq.n	800293c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d108      	bne.n	8002922 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	2b00      	cmp	r3, #0
 8002916:	d030      	beq.n	800297a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
 8002920:	e02b      	b.n	800297a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d027      	beq.n	800297a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
 8002932:	e022      	b.n	800297a <HAL_DMA_IRQHandler+0x29e>
 8002934:	20000038 	.word	0x20000038
 8002938:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0210 	bic.w	r2, r2, #16
 8002958:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	2b00      	cmp	r3, #0
 8002980:	d032      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d022      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2205      	movs	r2, #5
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3301      	adds	r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d307      	bcc.n	80029c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f2      	bne.n	80029a6 <HAL_DMA_IRQHandler+0x2ca>
 80029c0:	e000      	b.n	80029c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029c2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
 80029e4:	e000      	b.n	80029e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029e6:	bf00      	nop
    }
  }
}
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop

080029f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d108      	bne.n	8002a30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a2e:	e007      	b.n	8002a40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	3b10      	subs	r3, #16
 8002a5c:	4a14      	ldr	r2, [pc, #80]	; (8002ab0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a66:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d909      	bls.n	8002a8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	1d1a      	adds	r2, r3, #4
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a8c:	e007      	b.n	8002a9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a96:	f023 0303 	bic.w	r3, r3, #3
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	aaaaaaab 	.word	0xaaaaaaab
 8002ab4:	0800fe30 	.word	0x0800fe30

08002ab8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11f      	bne.n	8002b12 <DMA_CheckFifoParam+0x5a>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d856      	bhi.n	8002b86 <DMA_CheckFifoParam+0xce>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <DMA_CheckFifoParam+0x28>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002b03 	.word	0x08002b03
 8002ae8:	08002af1 	.word	0x08002af1
 8002aec:	08002b87 	.word	0x08002b87
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d046      	beq.n	8002b8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b00:	e043      	b.n	8002b8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b0a:	d140      	bne.n	8002b8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e03d      	b.n	8002b8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1a:	d121      	bne.n	8002b60 <DMA_CheckFifoParam+0xa8>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d837      	bhi.n	8002b92 <DMA_CheckFifoParam+0xda>
 8002b22:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <DMA_CheckFifoParam+0x70>)
 8002b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b28:	08002b39 	.word	0x08002b39
 8002b2c:	08002b3f 	.word	0x08002b3f
 8002b30:	08002b39 	.word	0x08002b39
 8002b34:	08002b51 	.word	0x08002b51
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e030      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d025      	beq.n	8002b96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4e:	e022      	b.n	8002b96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b58:	d11f      	bne.n	8002b9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b5e:	e01c      	b.n	8002b9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d903      	bls.n	8002b6e <DMA_CheckFifoParam+0xb6>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d003      	beq.n	8002b74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b6c:	e018      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
      break;
 8002b72:	e015      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00e      	beq.n	8002b9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      break;
 8002b84:	e00b      	b.n	8002b9e <DMA_CheckFifoParam+0xe6>
      break;
 8002b86:	bf00      	nop
 8002b88:	e00a      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e008      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e006      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b92:	bf00      	nop
 8002b94:	e004      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b96:	bf00      	nop
 8002b98:	e002      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b9a:	bf00      	nop
 8002b9c:	e000      	b.n	8002ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
    }
  } 
  
  return status; 
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	e16b      	b.n	8002ea4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bcc:	2201      	movs	r2, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	f040 815a 	bne.w	8002e9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d005      	beq.n	8002c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d130      	bne.n	8002c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 0201 	and.w	r2, r3, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d017      	beq.n	8002ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d123      	bne.n	8002cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	08da      	lsrs	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3208      	adds	r2, #8
 8002cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	08da      	lsrs	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3208      	adds	r2, #8
 8002cee:	69b9      	ldr	r1, [r7, #24]
 8002cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0203 	and.w	r2, r3, #3
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80b4 	beq.w	8002e9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b60      	ldr	r3, [pc, #384]	; (8002ebc <HAL_GPIO_Init+0x30c>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a5f      	ldr	r2, [pc, #380]	; (8002ebc <HAL_GPIO_Init+0x30c>)
 8002d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b5d      	ldr	r3, [pc, #372]	; (8002ebc <HAL_GPIO_Init+0x30c>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d52:	4a5b      	ldr	r2, [pc, #364]	; (8002ec0 <HAL_GPIO_Init+0x310>)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	3302      	adds	r3, #2
 8002d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a52      	ldr	r2, [pc, #328]	; (8002ec4 <HAL_GPIO_Init+0x314>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_GPIO_Init+0x226>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a51      	ldr	r2, [pc, #324]	; (8002ec8 <HAL_GPIO_Init+0x318>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d025      	beq.n	8002dd2 <HAL_GPIO_Init+0x222>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a50      	ldr	r2, [pc, #320]	; (8002ecc <HAL_GPIO_Init+0x31c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01f      	beq.n	8002dce <HAL_GPIO_Init+0x21e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4f      	ldr	r2, [pc, #316]	; (8002ed0 <HAL_GPIO_Init+0x320>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x21a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4e      	ldr	r2, [pc, #312]	; (8002ed4 <HAL_GPIO_Init+0x324>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x216>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4d      	ldr	r2, [pc, #308]	; (8002ed8 <HAL_GPIO_Init+0x328>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x212>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4c      	ldr	r2, [pc, #304]	; (8002edc <HAL_GPIO_Init+0x32c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x20e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4b      	ldr	r2, [pc, #300]	; (8002ee0 <HAL_GPIO_Init+0x330>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x20a>
 8002db6:	2307      	movs	r3, #7
 8002db8:	e00e      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dba:	2308      	movs	r3, #8
 8002dbc:	e00c      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dbe:	2306      	movs	r3, #6
 8002dc0:	e00a      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dc2:	2305      	movs	r3, #5
 8002dc4:	e008      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e004      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e002      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	f002 0203 	and.w	r2, r2, #3
 8002dde:	0092      	lsls	r2, r2, #2
 8002de0:	4093      	lsls	r3, r2
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de8:	4935      	ldr	r1, [pc, #212]	; (8002ec0 <HAL_GPIO_Init+0x310>)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df6:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e1a:	4a32      	ldr	r2, [pc, #200]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e20:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e44:	4a27      	ldr	r2, [pc, #156]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4a:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e98:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b0f      	cmp	r3, #15
 8002ea8:	f67f ae90 	bls.w	8002bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	40020400 	.word	0x40020400
 8002ecc:	40020800 	.word	0x40020800
 8002ed0:	40020c00 	.word	0x40020c00
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40021400 	.word	0x40021400
 8002edc:	40021800 	.word	0x40021800
 8002ee0:	40021c00 	.word	0x40021c00
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e0cd      	b.n	80030a0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f04:	2201      	movs	r2, #1
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	f040 80bd 	bne.w	800309a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002f20:	4a65      	ldr	r2, [pc, #404]	; (80030b8 <HAL_GPIO_DeInit+0x1d0>)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	3302      	adds	r3, #2
 8002f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	220f      	movs	r2, #15
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a5d      	ldr	r2, [pc, #372]	; (80030bc <HAL_GPIO_DeInit+0x1d4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02b      	beq.n	8002fa2 <HAL_GPIO_DeInit+0xba>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a5c      	ldr	r2, [pc, #368]	; (80030c0 <HAL_GPIO_DeInit+0x1d8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d025      	beq.n	8002f9e <HAL_GPIO_DeInit+0xb6>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a5b      	ldr	r2, [pc, #364]	; (80030c4 <HAL_GPIO_DeInit+0x1dc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01f      	beq.n	8002f9a <HAL_GPIO_DeInit+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a5a      	ldr	r2, [pc, #360]	; (80030c8 <HAL_GPIO_DeInit+0x1e0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d019      	beq.n	8002f96 <HAL_GPIO_DeInit+0xae>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a59      	ldr	r2, [pc, #356]	; (80030cc <HAL_GPIO_DeInit+0x1e4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_DeInit+0xaa>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a58      	ldr	r2, [pc, #352]	; (80030d0 <HAL_GPIO_DeInit+0x1e8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_GPIO_DeInit+0xa6>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a57      	ldr	r2, [pc, #348]	; (80030d4 <HAL_GPIO_DeInit+0x1ec>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <HAL_GPIO_DeInit+0xa2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a56      	ldr	r2, [pc, #344]	; (80030d8 <HAL_GPIO_DeInit+0x1f0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_GPIO_DeInit+0x9e>
 8002f82:	2307      	movs	r3, #7
 8002f84:	e00e      	b.n	8002fa4 <HAL_GPIO_DeInit+0xbc>
 8002f86:	2308      	movs	r3, #8
 8002f88:	e00c      	b.n	8002fa4 <HAL_GPIO_DeInit+0xbc>
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_DeInit+0xbc>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_DeInit+0xbc>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_DeInit+0xbc>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_DeInit+0xbc>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_DeInit+0xbc>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_DeInit+0xbc>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d132      	bne.n	800301a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002fb4:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_GPIO_DeInit+0x1f4>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	4947      	ldr	r1, [pc, #284]	; (80030dc <HAL_GPIO_DeInit+0x1f4>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002fc2:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_GPIO_DeInit+0x1f4>)
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	4944      	ldr	r1, [pc, #272]	; (80030dc <HAL_GPIO_DeInit+0x1f4>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002fd0:	4b42      	ldr	r3, [pc, #264]	; (80030dc <HAL_GPIO_DeInit+0x1f4>)
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	4940      	ldr	r1, [pc, #256]	; (80030dc <HAL_GPIO_DeInit+0x1f4>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002fde:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <HAL_GPIO_DeInit+0x1f4>)
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	493d      	ldr	r1, [pc, #244]	; (80030dc <HAL_GPIO_DeInit+0x1f4>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ffc:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <HAL_GPIO_DeInit+0x1d0>)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	3302      	adds	r3, #2
 8003004:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	43da      	mvns	r2, r3
 800300c:	482a      	ldr	r0, [pc, #168]	; (80030b8 <HAL_GPIO_DeInit+0x1d0>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	400a      	ands	r2, r1
 8003014:	3302      	adds	r3, #2
 8003016:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2103      	movs	r1, #3
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	401a      	ands	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	08da      	lsrs	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3208      	adds	r2, #8
 8003038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	220f      	movs	r2, #15
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	08d2      	lsrs	r2, r2, #3
 8003050:	4019      	ands	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3208      	adds	r2, #8
 8003056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2103      	movs	r1, #3
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	2101      	movs	r1, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	401a      	ands	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2103      	movs	r1, #3
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	401a      	ands	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	3301      	adds	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	f67f af2e 	bls.w	8002f04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	40020400 	.word	0x40020400
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020c00 	.word	0x40020c00
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40021400 	.word	0x40021400
 80030d4:	40021800 	.word	0x40021800
 80030d8:	40021c00 	.word	0x40021c00
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
 80030ec:	4613      	mov	r3, r2
 80030ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f0:	787b      	ldrb	r3, [r7, #1]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030fc:	e003      	b.n	8003106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	041a      	lsls	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	619a      	str	r2, [r3, #24]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	4013      	ands	r3, r2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800312a:	4a05      	ldr	r2, [pc, #20]	; (8003140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe f970 	bl	8001418 <HAL_GPIO_EXTI_Callback>
  }
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40013c00 	.word	0x40013c00

08003144 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003146:	b08f      	sub	sp, #60	; 0x3c
 8003148:	af0a      	add	r7, sp, #40	; 0x28
 800314a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e054      	b.n	8003200 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f00c f9cf 	bl	800f514 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2203      	movs	r2, #3
 800317a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f004 ff15 	bl	8007fc4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	687e      	ldr	r6, [r7, #4]
 80031a2:	466d      	mov	r5, sp
 80031a4:	f106 0410 	add.w	r4, r6, #16
 80031a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80031b8:	1d33      	adds	r3, r6, #4
 80031ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031bc:	6838      	ldr	r0, [r7, #0]
 80031be:	f004 fe8f 	bl	8007ee0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2101      	movs	r1, #1
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 ff0c 	bl	8007fe6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	687e      	ldr	r6, [r7, #4]
 80031d6:	466d      	mov	r5, sp
 80031d8:	f106 0410 	add.w	r4, r6, #16
 80031dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ec:	1d33      	adds	r3, r6, #4
 80031ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031f0:	6838      	ldr	r0, [r7, #0]
 80031f2:	f005 f873 	bl	80082dc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003208 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af04      	add	r7, sp, #16
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	461a      	mov	r2, r3
 8003216:	4603      	mov	r3, r0
 8003218:	70fb      	strb	r3, [r7, #3]
 800321a:	460b      	mov	r3, r1
 800321c:	70bb      	strb	r3, [r7, #2]
 800321e:	4613      	mov	r3, r2
 8003220:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_HCD_HC_Init+0x28>
 800322c:	2302      	movs	r3, #2
 800322e:	e076      	b.n	800331e <HAL_HCD_HC_Init+0x116>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	333d      	adds	r3, #61	; 0x3d
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	3338      	adds	r3, #56	; 0x38
 8003258:	787a      	ldrb	r2, [r7, #1]
 800325a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3340      	adds	r3, #64	; 0x40
 800326a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800326c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3339      	adds	r3, #57	; 0x39
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	333f      	adds	r3, #63	; 0x3f
 800328e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003292:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	78ba      	ldrb	r2, [r7, #2]
 8003298:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800329c:	b2d0      	uxtb	r0, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	333a      	adds	r3, #58	; 0x3a
 80032aa:	4602      	mov	r2, r0
 80032ac:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80032ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da09      	bge.n	80032ca <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	333b      	adds	r3, #59	; 0x3b
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e008      	b.n	80032dc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	333b      	adds	r3, #59	; 0x3b
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	333c      	adds	r3, #60	; 0x3c
 80032ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032ee:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	787c      	ldrb	r4, [r7, #1]
 80032f6:	78ba      	ldrb	r2, [r7, #2]
 80032f8:	78f9      	ldrb	r1, [r7, #3]
 80032fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032fc:	9302      	str	r3, [sp, #8]
 80032fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	4623      	mov	r3, r4
 800330c:	f005 f960 	bl	80085d0 <USB_HC_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bd90      	pop	{r4, r7, pc}

08003326 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	460b      	mov	r3, r1
 8003330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_HCD_HC_Halt+0x1e>
 8003340:	2302      	movs	r3, #2
 8003342:	e00f      	b.n	8003364 <HAL_HCD_HC_Halt+0x3e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f005 fb9c 	bl	8008a92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	461a      	mov	r2, r3
 800337a:	4603      	mov	r3, r0
 800337c:	70fb      	strb	r3, [r7, #3]
 800337e:	460b      	mov	r3, r1
 8003380:	70bb      	strb	r3, [r7, #2]
 8003382:	4613      	mov	r3, r2
 8003384:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	333b      	adds	r3, #59	; 0x3b
 8003394:	78ba      	ldrb	r2, [r7, #2]
 8003396:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	333f      	adds	r3, #63	; 0x3f
 80033a6:	787a      	ldrb	r2, [r7, #1]
 80033a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80033aa:	7c3b      	ldrb	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d112      	bne.n	80033d6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3342      	adds	r3, #66	; 0x42
 80033be:	2203      	movs	r2, #3
 80033c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	333d      	adds	r3, #61	; 0x3d
 80033d0:	7f3a      	ldrb	r2, [r7, #28]
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e008      	b.n	80033e8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	212c      	movs	r1, #44	; 0x2c
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	3342      	adds	r3, #66	; 0x42
 80033e4:	2202      	movs	r2, #2
 80033e6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	f200 80c6 	bhi.w	800357c <HAL_HCD_HC_SubmitRequest+0x210>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003569 	.word	0x08003569
 8003400:	0800346d 	.word	0x0800346d
 8003404:	080034eb 	.word	0x080034eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003408:	7c3b      	ldrb	r3, [r7, #16]
 800340a:	2b01      	cmp	r3, #1
 800340c:	f040 80b8 	bne.w	8003580 <HAL_HCD_HC_SubmitRequest+0x214>
 8003410:	78bb      	ldrb	r3, [r7, #2]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 80b4 	bne.w	8003580 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003418:	8b3b      	ldrh	r3, [r7, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d108      	bne.n	8003430 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	212c      	movs	r1, #44	; 0x2c
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	3355      	adds	r3, #85	; 0x55
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	3355      	adds	r3, #85	; 0x55
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	3342      	adds	r3, #66	; 0x42
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003456:	e093      	b.n	8003580 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3342      	adds	r3, #66	; 0x42
 8003466:	2202      	movs	r2, #2
 8003468:	701a      	strb	r2, [r3, #0]
      break;
 800346a:	e089      	b.n	8003580 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800346c:	78bb      	ldrb	r3, [r7, #2]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11d      	bne.n	80034ae <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	212c      	movs	r1, #44	; 0x2c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	3355      	adds	r3, #85	; 0x55
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	212c      	movs	r1, #44	; 0x2c
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	3342      	adds	r3, #66	; 0x42
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003498:	e073      	b.n	8003582 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	3342      	adds	r3, #66	; 0x42
 80034a8:	2202      	movs	r2, #2
 80034aa:	701a      	strb	r2, [r3, #0]
      break;
 80034ac:	e069      	b.n	8003582 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	212c      	movs	r1, #44	; 0x2c
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	3354      	adds	r3, #84	; 0x54
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3342      	adds	r3, #66	; 0x42
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
      break;
 80034d4:	e055      	b.n	8003582 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	3342      	adds	r3, #66	; 0x42
 80034e4:	2202      	movs	r2, #2
 80034e6:	701a      	strb	r2, [r3, #0]
      break;
 80034e8:	e04b      	b.n	8003582 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034ea:	78bb      	ldrb	r3, [r7, #2]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d11d      	bne.n	800352c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3355      	adds	r3, #85	; 0x55
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	3342      	adds	r3, #66	; 0x42
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003516:	e034      	b.n	8003582 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3342      	adds	r3, #66	; 0x42
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]
      break;
 800352a:	e02a      	b.n	8003582 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	3354      	adds	r3, #84	; 0x54
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	3342      	adds	r3, #66	; 0x42
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
      break;
 8003552:	e016      	b.n	8003582 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3342      	adds	r3, #66	; 0x42
 8003562:	2202      	movs	r2, #2
 8003564:	701a      	strb	r2, [r3, #0]
      break;
 8003566:	e00c      	b.n	8003582 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3342      	adds	r3, #66	; 0x42
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
      break;
 800357a:	e002      	b.n	8003582 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800357c:	bf00      	nop
 800357e:	e000      	b.n	8003582 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003580:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	3344      	adds	r3, #68	; 0x44
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	8b3a      	ldrh	r2, [r7, #24]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	202c      	movs	r0, #44	; 0x2c
 800359c:	fb00 f303 	mul.w	r3, r0, r3
 80035a0:	440b      	add	r3, r1
 80035a2:	334c      	adds	r3, #76	; 0x4c
 80035a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3360      	adds	r3, #96	; 0x60
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	3350      	adds	r3, #80	; 0x50
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	3339      	adds	r3, #57	; 0x39
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3361      	adds	r3, #97	; 0x61
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	222c      	movs	r2, #44	; 0x2c
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	3338      	adds	r3, #56	; 0x38
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	18d1      	adds	r1, r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	f005 f8f0 	bl	80087ec <USB_HC_StartXfer>
 800360c:	4603      	mov	r3, r0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop

08003618 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f004 fe13 	bl	800825a <USB_GetMode>
 8003634:	4603      	mov	r3, r0
 8003636:	2b01      	cmp	r3, #1
 8003638:	f040 80f6 	bne.w	8003828 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f004 fdf7 	bl	8008234 <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80ec 	beq.w	8003826 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f004 fdee 	bl	8008234 <USB_ReadInterrupts>
 8003658:	4603      	mov	r3, r0
 800365a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003662:	d104      	bne.n	800366e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800366c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f004 fdde 	bl	8008234 <USB_ReadInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003682:	d104      	bne.n	800368e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800368c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f004 fdce 	bl	8008234 <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800369e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a2:	d104      	bne.n	80036ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80036ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f004 fdbe 	bl	8008234 <USB_ReadInterrupts>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d103      	bne.n	80036ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2202      	movs	r2, #2
 80036c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fdb0 	bl	8008234 <USB_ReadInterrupts>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036de:	d11c      	bne.n	800371a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10f      	bne.n	800371a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80036fa:	2110      	movs	r1, #16
 80036fc:	6938      	ldr	r0, [r7, #16]
 80036fe:	f004 fcbf 	bl	8008080 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003702:	6938      	ldr	r0, [r7, #16]
 8003704:	f004 fce0 	bl	80080c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	4618      	mov	r0, r3
 8003710:	f004 fe98 	bl	8008444 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f00b ff7b 	bl	800f610 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f004 fd88 	bl	8008234 <USB_ReadInterrupts>
 8003724:	4603      	mov	r3, r0
 8003726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800372e:	d102      	bne.n	8003736 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f001 fa03 	bl	8004b3c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f004 fd7a 	bl	8008234 <USB_ReadInterrupts>
 8003740:	4603      	mov	r3, r0
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b08      	cmp	r3, #8
 8003748:	d106      	bne.n	8003758 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f00b ff44 	bl	800f5d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2208      	movs	r2, #8
 8003756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f004 fd69 	bl	8008234 <USB_ReadInterrupts>
 8003762:	4603      	mov	r3, r0
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b10      	cmp	r3, #16
 800376a:	d101      	bne.n	8003770 <HAL_HCD_IRQHandler+0x158>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_HCD_IRQHandler+0x15a>
 8003770:	2300      	movs	r3, #0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0210 	bic.w	r2, r2, #16
 8003784:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f001 f906 	bl	8004998 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0210 	orr.w	r2, r2, #16
 800379a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 fd47 	bl	8008234 <USB_ReadInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037b0:	d13a      	bne.n	8003828 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f005 f95a 	bl	8008a70 <USB_HC_ReadInterrupt>
 80037bc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e025      	b.n	8003810 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d018      	beq.n	800380a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ee:	d106      	bne.n	80037fe <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	4619      	mov	r1, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f8ab 	bl	8003952 <HCD_HC_IN_IRQHandler>
 80037fc:	e005      	b.n	800380a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fcc6 	bl	8004196 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3301      	adds	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	429a      	cmp	r2, r3
 8003818:	d3d4      	bcc.n	80037c4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003822:	615a      	str	r2, [r3, #20]
 8003824:	e000      	b.n	8003828 <HAL_HCD_IRQHandler+0x210>
      return;
 8003826:	bf00      	nop
    }
  }
}
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_HCD_Start+0x16>
 8003840:	2302      	movs	r3, #2
 8003842:	e013      	b.n	800386c <HAL_HCD_Start+0x3e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	4618      	mov	r0, r3
 8003854:	f004 fe5a 	bl	800850c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f004 fba0 	bl	8007fa2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_HCD_Stop+0x16>
 8003886:	2302      	movs	r3, #2
 8003888:	e00d      	b.n	80038a6 <HAL_HCD_Stop+0x32>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f005 fa54 	bl	8008d44 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 fdfc 	bl	80084b8 <USB_ResetPort>
 80038c0:	4603      	mov	r3, r0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	212c      	movs	r1, #44	; 0x2c
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	3360      	adds	r3, #96	; 0x60
 80038e4:	781b      	ldrb	r3, [r3, #0]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	212c      	movs	r1, #44	; 0x2c
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	4413      	add	r3, r2
 800390a:	3350      	adds	r3, #80	; 0x50
 800390c:	681b      	ldr	r3, [r3, #0]
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f004 fe40 	bl	80085ac <USB_GetCurrentFrame>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f004 fe1b 	bl	800857e <USB_GetHostSpeed>
 8003948:	4603      	mov	r3, r0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b086      	sub	sp, #24
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	460b      	mov	r3, r1
 800395c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d119      	bne.n	80039b6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398e:	461a      	mov	r2, r3
 8003990:	2304      	movs	r3, #4
 8003992:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	0151      	lsls	r1, r2, #5
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	440a      	add	r2, r1
 80039aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ae:	f043 0302 	orr.w	r3, r3, #2
 80039b2:	60d3      	str	r3, [r2, #12]
 80039b4:	e101      	b.n	8003bba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039cc:	d12b      	bne.n	8003a26 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039da:	461a      	mov	r2, r3
 80039dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	212c      	movs	r1, #44	; 0x2c
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	3361      	adds	r3, #97	; 0x61
 80039f0:	2207      	movs	r2, #7
 80039f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	0151      	lsls	r1, r2, #5
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	440a      	add	r2, r1
 8003a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a0e:	f043 0302 	orr.w	r3, r3, #2
 8003a12:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f005 f837 	bl	8008a92 <USB_HC_Halt>
 8003a24:	e0c9      	b.n	8003bba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d109      	bne.n	8003a50 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2320      	movs	r3, #32
 8003a4c:	6093      	str	r3, [r2, #8]
 8003a4e:	e0b4      	b.n	8003bba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d133      	bne.n	8003ace <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	0151      	lsls	r1, r2, #5
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	440a      	add	r2, r1
 8003a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3361      	adds	r3, #97	; 0x61
 8003a94:	2205      	movs	r2, #5
 8003a96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2310      	movs	r3, #16
 8003aa8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2308      	movs	r3, #8
 8003aba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 ffe3 	bl	8008a92 <USB_HC_Halt>
 8003acc:	e075      	b.n	8003bba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae4:	d134      	bne.n	8003b50 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	0151      	lsls	r1, r2, #5
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	440a      	add	r2, r1
 8003afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	212c      	movs	r1, #44	; 0x2c
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	4413      	add	r3, r2
 8003b12:	3361      	adds	r3, #97	; 0x61
 8003b14:	2208      	movs	r2, #8
 8003b16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b24:	461a      	mov	r2, r3
 8003b26:	2310      	movs	r3, #16
 8003b28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b36:	461a      	mov	r2, r3
 8003b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f004 ffa2 	bl	8008a92 <USB_HC_Halt>
 8003b4e:	e034      	b.n	8003bba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b80      	cmp	r3, #128	; 0x80
 8003b64:	d129      	bne.n	8003bba <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3361      	adds	r3, #97	; 0x61
 8003b94:	2206      	movs	r2, #6
 8003b96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f004 ff75 	bl	8008a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd0:	d122      	bne.n	8003c18 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	0151      	lsls	r1, r2, #5
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	440a      	add	r2, r1
 8003be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f004 ff48 	bl	8008a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c14:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003c16:	e2ba      	b.n	800418e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	f040 811b 	bne.w	8003e66 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d019      	beq.n	8003c6c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3348      	adds	r3, #72	; 0x48
 8003c46:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	0159      	lsls	r1, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	440b      	add	r3, r1
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	202c      	movs	r0, #44	; 0x2c
 8003c62:	fb00 f303 	mul.w	r3, r0, r3
 8003c66:	440b      	add	r3, r1
 8003c68:	3350      	adds	r3, #80	; 0x50
 8003c6a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	212c      	movs	r1, #44	; 0x2c
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	3361      	adds	r3, #97	; 0x61
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	335c      	adds	r3, #92	; 0x5c
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	333f      	adds	r3, #63	; 0x3f
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	333f      	adds	r3, #63	; 0x3f
 8003cc4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d121      	bne.n	8003d0e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f004 fecc 	bl	8008a92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d06:	461a      	mov	r2, r3
 8003d08:	2310      	movs	r3, #16
 8003d0a:	6093      	str	r3, [r2, #8]
 8003d0c:	e066      	b.n	8003ddc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	212c      	movs	r1, #44	; 0x2c
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	333f      	adds	r3, #63	; 0x3f
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d127      	bne.n	8003d72 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d40:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3360      	adds	r3, #96	; 0x60
 8003d50:	2201      	movs	r2, #1
 8003d52:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	b2d9      	uxtb	r1, r3
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	202c      	movs	r0, #44	; 0x2c
 8003d5e:	fb00 f303 	mul.w	r3, r0, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	3360      	adds	r3, #96	; 0x60
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f00b fc5e 	bl	800f62c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d70:	e034      	b.n	8003ddc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	212c      	movs	r1, #44	; 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	333f      	adds	r3, #63	; 0x3f
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d12a      	bne.n	8003ddc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	212c      	movs	r1, #44	; 0x2c
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	4413      	add	r3, r2
 8003d92:	3360      	adds	r3, #96	; 0x60
 8003d94:	2201      	movs	r2, #1
 8003d96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3354      	adds	r3, #84	; 0x54
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	f083 0301 	eor.w	r3, r3, #1
 8003dac:	b2d8      	uxtb	r0, r3
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	212c      	movs	r1, #44	; 0x2c
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	3354      	adds	r3, #84	; 0x54
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	b2d9      	uxtb	r1, r3
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	202c      	movs	r0, #44	; 0x2c
 8003dca:	fb00 f303 	mul.w	r3, r0, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3360      	adds	r3, #96	; 0x60
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f00b fc28 	bl	800f62c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d12b      	bne.n	8003e3c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	212c      	movs	r1, #44	; 0x2c
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	3348      	adds	r3, #72	; 0x48
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	202c      	movs	r0, #44	; 0x2c
 8003dfa:	fb00 f202 	mul.w	r2, r0, r2
 8003dfe:	440a      	add	r2, r1
 8003e00:	3240      	adds	r2, #64	; 0x40
 8003e02:	8812      	ldrh	r2, [r2, #0]
 8003e04:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 81be 	beq.w	800418e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	212c      	movs	r1, #44	; 0x2c
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3354      	adds	r3, #84	; 0x54
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	f083 0301 	eor.w	r3, r3, #1
 8003e26:	b2d8      	uxtb	r0, r3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	212c      	movs	r1, #44	; 0x2c
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	3354      	adds	r3, #84	; 0x54
 8003e36:	4602      	mov	r2, r0
 8003e38:	701a      	strb	r2, [r3, #0]
}
 8003e3a:	e1a8      	b.n	800418e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	212c      	movs	r1, #44	; 0x2c
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	4413      	add	r3, r2
 8003e48:	3354      	adds	r3, #84	; 0x54
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f083 0301 	eor.w	r3, r3, #1
 8003e50:	b2d8      	uxtb	r0, r3
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	212c      	movs	r1, #44	; 0x2c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3354      	adds	r3, #84	; 0x54
 8003e60:	4602      	mov	r2, r0
 8003e62:	701a      	strb	r2, [r3, #0]
}
 8003e64:	e193      	b.n	800418e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	f040 8106 	bne.w	800408a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e98:	f023 0302 	bic.w	r3, r3, #2
 8003e9c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	212c      	movs	r1, #44	; 0x2c
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3361      	adds	r3, #97	; 0x61
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d109      	bne.n	8003ec6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	212c      	movs	r1, #44	; 0x2c
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3360      	adds	r3, #96	; 0x60
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	e0c9      	b.n	800405a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	212c      	movs	r1, #44	; 0x2c
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3361      	adds	r3, #97	; 0x61
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d109      	bne.n	8003eee <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	212c      	movs	r1, #44	; 0x2c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3360      	adds	r3, #96	; 0x60
 8003ee8:	2205      	movs	r2, #5
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e0b5      	b.n	800405a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	212c      	movs	r1, #44	; 0x2c
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	3361      	adds	r3, #97	; 0x61
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d009      	beq.n	8003f16 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3361      	adds	r3, #97	; 0x61
 8003f10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d150      	bne.n	8003fb8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	335c      	adds	r3, #92	; 0x5c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	202c      	movs	r0, #44	; 0x2c
 8003f2e:	fb00 f303 	mul.w	r3, r0, r3
 8003f32:	440b      	add	r3, r1
 8003f34:	335c      	adds	r3, #92	; 0x5c
 8003f36:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	212c      	movs	r1, #44	; 0x2c
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	335c      	adds	r3, #92	; 0x5c
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d912      	bls.n	8003f72 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	212c      	movs	r1, #44	; 0x2c
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	335c      	adds	r3, #92	; 0x5c
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	212c      	movs	r1, #44	; 0x2c
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	4413      	add	r3, r2
 8003f6a:	3360      	adds	r3, #96	; 0x60
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f70:	e073      	b.n	800405a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	212c      	movs	r1, #44	; 0x2c
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3360      	adds	r3, #96	; 0x60
 8003f80:	2202      	movs	r2, #2
 8003f82:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f9a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fa2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fb6:	e050      	b.n	800405a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	212c      	movs	r1, #44	; 0x2c
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3361      	adds	r3, #97	; 0x61
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d122      	bne.n	8004012 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	212c      	movs	r1, #44	; 0x2c
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3360      	adds	r3, #96	; 0x60
 8003fda:	2202      	movs	r2, #2
 8003fdc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ff4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ffc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	461a      	mov	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	e023      	b.n	800405a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	212c      	movs	r1, #44	; 0x2c
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	4413      	add	r3, r2
 800401e:	3361      	adds	r3, #97	; 0x61
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b07      	cmp	r3, #7
 8004024:	d119      	bne.n	800405a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	212c      	movs	r1, #44	; 0x2c
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	4413      	add	r3, r2
 8004032:	335c      	adds	r3, #92	; 0x5c
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	202c      	movs	r0, #44	; 0x2c
 800403e:	fb00 f303 	mul.w	r3, r0, r3
 8004042:	440b      	add	r3, r1
 8004044:	335c      	adds	r3, #92	; 0x5c
 8004046:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	212c      	movs	r1, #44	; 0x2c
 800404e:	fb01 f303 	mul.w	r3, r1, r3
 8004052:	4413      	add	r3, r2
 8004054:	3360      	adds	r3, #96	; 0x60
 8004056:	2204      	movs	r2, #4
 8004058:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4413      	add	r3, r2
 8004062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004066:	461a      	mov	r2, r3
 8004068:	2302      	movs	r3, #2
 800406a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	b2d9      	uxtb	r1, r3
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	202c      	movs	r0, #44	; 0x2c
 8004076:	fb00 f303 	mul.w	r3, r0, r3
 800407a:	4413      	add	r3, r2
 800407c:	3360      	adds	r3, #96	; 0x60
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f00b fad2 	bl	800f62c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004088:	e081      	b.n	800418e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b10      	cmp	r3, #16
 800409e:	d176      	bne.n	800418e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	212c      	movs	r1, #44	; 0x2c
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	333f      	adds	r3, #63	; 0x3f
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d121      	bne.n	80040f8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	212c      	movs	r1, #44	; 0x2c
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	4413      	add	r3, r2
 80040c0:	335c      	adds	r3, #92	; 0x5c
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f004 fcce 	bl	8008a92 <USB_HC_Halt>
 80040f6:	e041      	b.n	800417c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	333f      	adds	r3, #63	; 0x3f
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	333f      	adds	r3, #63	; 0x3f
 800411a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800411c:	2b02      	cmp	r3, #2
 800411e:	d12d      	bne.n	800417c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	335c      	adds	r3, #92	; 0x5c
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d120      	bne.n	800417c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	3361      	adds	r3, #97	; 0x61
 8004148:	2203      	movs	r2, #3
 800414a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4413      	add	r3, r2
 8004154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	440a      	add	r2, r1
 8004162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004166:	f043 0302 	orr.w	r3, r3, #2
 800416a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	4611      	mov	r1, r2
 8004176:	4618      	mov	r0, r3
 8004178:	f004 fc8b 	bl	8008a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	461a      	mov	r2, r3
 800418a:	2310      	movs	r3, #16
 800418c:	6093      	str	r3, [r2, #8]
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b088      	sub	sp, #32
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d119      	bne.n	80041fa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	461a      	mov	r2, r3
 80041d4:	2304      	movs	r3, #4
 80041d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80041f8:	e3ca      	b.n	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b20      	cmp	r3, #32
 800420e:	d13e      	bne.n	800428e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	461a      	mov	r2, r3
 800421e:	2320      	movs	r3, #32
 8004220:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	333d      	adds	r3, #61	; 0x3d
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	f040 83ac 	bne.w	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	333d      	adds	r3, #61	; 0x3d
 8004246:	2200      	movs	r2, #0
 8004248:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	3360      	adds	r3, #96	; 0x60
 8004258:	2202      	movs	r2, #2
 800425a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	440a      	add	r2, r1
 8004272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004276:	f043 0302 	orr.w	r3, r3, #2
 800427a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f004 fc03 	bl	8008a92 <USB_HC_Halt>
}
 800428c:	e380      	b.n	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d122      	bne.n	80042ec <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	0151      	lsls	r1, r2, #5
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	440a      	add	r2, r1
 80042bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042c0:	f043 0302 	orr.w	r3, r3, #2
 80042c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 fbde 	bl	8008a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e2:	461a      	mov	r2, r3
 80042e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042e8:	6093      	str	r3, [r2, #8]
}
 80042ea:	e351      	b.n	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d150      	bne.n	80043a4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	212c      	movs	r1, #44	; 0x2c
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	335c      	adds	r3, #92	; 0x5c
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d111      	bne.n	800434e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	212c      	movs	r1, #44	; 0x2c
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	4413      	add	r3, r2
 8004336:	333d      	adds	r3, #61	; 0x3d
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	4413      	add	r3, r2
 8004344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004348:	461a      	mov	r2, r3
 800434a:	2340      	movs	r3, #64	; 0x40
 800434c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	4413      	add	r3, r2
 8004356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	440a      	add	r2, r1
 8004364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004368:	f043 0302 	orr.w	r3, r3, #2
 800436c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f004 fb8a 	bl	8008a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438a:	461a      	mov	r2, r3
 800438c:	2301      	movs	r3, #1
 800438e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3361      	adds	r3, #97	; 0x61
 800439e:	2201      	movs	r2, #1
 80043a0:	701a      	strb	r2, [r3, #0]
}
 80043a2:	e2f5      	b.n	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d13c      	bne.n	8004434 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	3361      	adds	r3, #97	; 0x61
 80043c8:	2204      	movs	r2, #4
 80043ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	333d      	adds	r3, #61	; 0x3d
 80043da:	2201      	movs	r2, #1
 80043dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	335c      	adds	r3, #92	; 0x5c
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	0151      	lsls	r1, r2, #5
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	440a      	add	r2, r1
 8004406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800440a:	f043 0302 	orr.w	r3, r3, #2
 800440e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f004 fb39 	bl	8008a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	4413      	add	r3, r2
 8004428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442c:	461a      	mov	r2, r3
 800442e:	2340      	movs	r3, #64	; 0x40
 8004430:	6093      	str	r3, [r2, #8]
}
 8004432:	e2ad      	b.n	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4413      	add	r3, r2
 800443c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b08      	cmp	r3, #8
 8004448:	d12a      	bne.n	80044a0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	4413      	add	r3, r2
 8004452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004456:	461a      	mov	r2, r3
 8004458:	2308      	movs	r3, #8
 800445a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	440a      	add	r2, r1
 8004472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004476:	f043 0302 	orr.w	r3, r3, #2
 800447a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	4611      	mov	r1, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f004 fb03 	bl	8008a92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	3361      	adds	r3, #97	; 0x61
 800449a:	2205      	movs	r2, #5
 800449c:	701a      	strb	r2, [r3, #0]
}
 800449e:	e277      	b.n	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d150      	bne.n	8004558 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	335c      	adds	r3, #92	; 0x5c
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	212c      	movs	r1, #44	; 0x2c
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	3361      	adds	r3, #97	; 0x61
 80044d6:	2203      	movs	r2, #3
 80044d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	333d      	adds	r3, #61	; 0x3d
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d112      	bne.n	8004514 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	212c      	movs	r1, #44	; 0x2c
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	333c      	adds	r3, #60	; 0x3c
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d108      	bne.n	8004514 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	333d      	adds	r3, #61	; 0x3d
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	4413      	add	r3, r2
 800451c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	0151      	lsls	r1, r2, #5
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	440a      	add	r2, r1
 800452a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800452e:	f043 0302 	orr.w	r3, r3, #2
 8004532:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f004 faa7 	bl	8008a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	461a      	mov	r2, r3
 8004552:	2310      	movs	r3, #16
 8004554:	6093      	str	r3, [r2, #8]
}
 8004556:	e21b      	b.n	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d174      	bne.n	8004658 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d121      	bne.n	80045ba <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	3361      	adds	r3, #97	; 0x61
 8004584:	2206      	movs	r2, #6
 8004586:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	4413      	add	r3, r2
 8004590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	0151      	lsls	r1, r2, #5
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	440a      	add	r2, r1
 800459e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045a2:	f043 0302 	orr.w	r3, r3, #2
 80045a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 fa6d 	bl	8008a92 <USB_HC_Halt>
 80045b8:	e044      	b.n	8004644 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	212c      	movs	r1, #44	; 0x2c
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	335c      	adds	r3, #92	; 0x5c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	202c      	movs	r0, #44	; 0x2c
 80045d2:	fb00 f303 	mul.w	r3, r0, r3
 80045d6:	440b      	add	r3, r1
 80045d8:	335c      	adds	r3, #92	; 0x5c
 80045da:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	335c      	adds	r3, #92	; 0x5c
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d920      	bls.n	8004632 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	212c      	movs	r1, #44	; 0x2c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	335c      	adds	r3, #92	; 0x5c
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	212c      	movs	r1, #44	; 0x2c
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	3360      	adds	r3, #96	; 0x60
 8004610:	2204      	movs	r2, #4
 8004612:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	b2d9      	uxtb	r1, r3
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	202c      	movs	r0, #44	; 0x2c
 800461e:	fb00 f303 	mul.w	r3, r0, r3
 8004622:	4413      	add	r3, r2
 8004624:	3360      	adds	r3, #96	; 0x60
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f00a fffe 	bl	800f62c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004630:	e008      	b.n	8004644 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	212c      	movs	r1, #44	; 0x2c
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	4413      	add	r3, r2
 800463e:	3360      	adds	r3, #96	; 0x60
 8004640:	2202      	movs	r2, #2
 8004642:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	4413      	add	r3, r2
 800464c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004650:	461a      	mov	r2, r3
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	6093      	str	r3, [r2, #8]
}
 8004656:	e19b      	b.n	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	4413      	add	r3, r2
 8004660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	d134      	bne.n	80046da <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	440a      	add	r2, r1
 8004686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800468a:	f043 0302 	orr.w	r3, r3, #2
 800468e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f004 f9f9 	bl	8008a92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ac:	461a      	mov	r2, r3
 80046ae:	2310      	movs	r3, #16
 80046b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046be:	461a      	mov	r2, r3
 80046c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	212c      	movs	r1, #44	; 0x2c
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	3361      	adds	r3, #97	; 0x61
 80046d4:	2208      	movs	r2, #8
 80046d6:	701a      	strb	r2, [r3, #0]
}
 80046d8:	e15a      	b.n	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	f040 814f 	bne.w	8004990 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	440a      	add	r2, r1
 8004708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800470c:	f023 0302 	bic.w	r3, r3, #2
 8004710:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	212c      	movs	r1, #44	; 0x2c
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	4413      	add	r3, r2
 800471e:	3361      	adds	r3, #97	; 0x61
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d17d      	bne.n	8004822 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	3360      	adds	r3, #96	; 0x60
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	212c      	movs	r1, #44	; 0x2c
 800473e:	fb01 f303 	mul.w	r3, r1, r3
 8004742:	4413      	add	r3, r2
 8004744:	333f      	adds	r3, #63	; 0x3f
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d00a      	beq.n	8004762 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	212c      	movs	r1, #44	; 0x2c
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	4413      	add	r3, r2
 8004758:	333f      	adds	r3, #63	; 0x3f
 800475a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800475c:	2b03      	cmp	r3, #3
 800475e:	f040 8100 	bne.w	8004962 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d113      	bne.n	8004792 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	212c      	movs	r1, #44	; 0x2c
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	4413      	add	r3, r2
 8004776:	3355      	adds	r3, #85	; 0x55
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f083 0301 	eor.w	r3, r3, #1
 800477e:	b2d8      	uxtb	r0, r3
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	212c      	movs	r1, #44	; 0x2c
 8004786:	fb01 f303 	mul.w	r3, r1, r3
 800478a:	4413      	add	r3, r2
 800478c:	3355      	adds	r3, #85	; 0x55
 800478e:	4602      	mov	r2, r0
 8004790:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b01      	cmp	r3, #1
 8004798:	f040 80e3 	bne.w	8004962 <HCD_HC_OUT_IRQHandler+0x7cc>
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	334c      	adds	r3, #76	; 0x4c
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80d8 	beq.w	8004962 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	212c      	movs	r1, #44	; 0x2c
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	4413      	add	r3, r2
 80047be:	334c      	adds	r3, #76	; 0x4c
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	202c      	movs	r0, #44	; 0x2c
 80047c8:	fb00 f202 	mul.w	r2, r0, r2
 80047cc:	440a      	add	r2, r1
 80047ce:	3240      	adds	r2, #64	; 0x40
 80047d0:	8812      	ldrh	r2, [r2, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	3b01      	subs	r3, #1
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	202c      	movs	r0, #44	; 0x2c
 80047dc:	fb00 f202 	mul.w	r2, r0, r2
 80047e0:	440a      	add	r2, r1
 80047e2:	3240      	adds	r2, #64	; 0x40
 80047e4:	8812      	ldrh	r2, [r2, #0]
 80047e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80b5 	beq.w	8004962 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3355      	adds	r3, #85	; 0x55
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	f083 0301 	eor.w	r3, r3, #1
 800480c:	b2d8      	uxtb	r0, r3
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	212c      	movs	r1, #44	; 0x2c
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	4413      	add	r3, r2
 800481a:	3355      	adds	r3, #85	; 0x55
 800481c:	4602      	mov	r2, r0
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e09f      	b.n	8004962 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	212c      	movs	r1, #44	; 0x2c
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	4413      	add	r3, r2
 800482e:	3361      	adds	r3, #97	; 0x61
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d109      	bne.n	800484a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	212c      	movs	r1, #44	; 0x2c
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	4413      	add	r3, r2
 8004842:	3360      	adds	r3, #96	; 0x60
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	e08b      	b.n	8004962 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	212c      	movs	r1, #44	; 0x2c
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	4413      	add	r3, r2
 8004856:	3361      	adds	r3, #97	; 0x61
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d109      	bne.n	8004872 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	212c      	movs	r1, #44	; 0x2c
 8004864:	fb01 f303 	mul.w	r3, r1, r3
 8004868:	4413      	add	r3, r2
 800486a:	3360      	adds	r3, #96	; 0x60
 800486c:	2202      	movs	r2, #2
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	e077      	b.n	8004962 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	212c      	movs	r1, #44	; 0x2c
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	4413      	add	r3, r2
 800487e:	3361      	adds	r3, #97	; 0x61
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b05      	cmp	r3, #5
 8004884:	d109      	bne.n	800489a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	3360      	adds	r3, #96	; 0x60
 8004894:	2205      	movs	r2, #5
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	e063      	b.n	8004962 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	3361      	adds	r3, #97	; 0x61
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	d009      	beq.n	80048c2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	212c      	movs	r1, #44	; 0x2c
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	3361      	adds	r3, #97	; 0x61
 80048bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d14f      	bne.n	8004962 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	212c      	movs	r1, #44	; 0x2c
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	335c      	adds	r3, #92	; 0x5c
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	202c      	movs	r0, #44	; 0x2c
 80048da:	fb00 f303 	mul.w	r3, r0, r3
 80048de:	440b      	add	r3, r1
 80048e0:	335c      	adds	r3, #92	; 0x5c
 80048e2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	212c      	movs	r1, #44	; 0x2c
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	335c      	adds	r3, #92	; 0x5c
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d912      	bls.n	800491e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	212c      	movs	r1, #44	; 0x2c
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	335c      	adds	r3, #92	; 0x5c
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	212c      	movs	r1, #44	; 0x2c
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	4413      	add	r3, r2
 8004916:	3360      	adds	r3, #96	; 0x60
 8004918:	2204      	movs	r2, #4
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	e021      	b.n	8004962 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	212c      	movs	r1, #44	; 0x2c
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	3360      	adds	r3, #96	; 0x60
 800492c:	2202      	movs	r2, #2
 800492e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	4413      	add	r3, r2
 8004938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004946:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800494e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	4413      	add	r3, r2
 8004958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495c:	461a      	mov	r2, r3
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	4413      	add	r3, r2
 800496a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496e:	461a      	mov	r2, r3
 8004970:	2302      	movs	r3, #2
 8004972:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	b2d9      	uxtb	r1, r3
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	202c      	movs	r0, #44	; 0x2c
 800497e:	fb00 f303 	mul.w	r3, r0, r3
 8004982:	4413      	add	r3, r2
 8004984:	3360      	adds	r3, #96	; 0x60
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f00a fe4e 	bl	800f62c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004990:	bf00      	nop
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	; 0x28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	0c5b      	lsrs	r3, r3, #17
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	091b      	lsrs	r3, r3, #4
 80049c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049cc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d004      	beq.n	80049de <HCD_RXQLVL_IRQHandler+0x46>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	f000 80a9 	beq.w	8004b2e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80049dc:	e0aa      	b.n	8004b34 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80a6 	beq.w	8004b32 <HCD_RXQLVL_IRQHandler+0x19a>
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	3344      	adds	r3, #68	; 0x44
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 809b 	beq.w	8004b32 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	212c      	movs	r1, #44	; 0x2c
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	4413      	add	r3, r2
 8004a08:	3350      	adds	r3, #80	; 0x50
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	441a      	add	r2, r3
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	202c      	movs	r0, #44	; 0x2c
 8004a16:	fb00 f303 	mul.w	r3, r0, r3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	334c      	adds	r3, #76	; 0x4c
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d87a      	bhi.n	8004b1a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	3344      	adds	r3, #68	; 0x44
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	b292      	uxth	r2, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f003 fba1 	bl	8008184 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3344      	adds	r3, #68	; 0x44
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	441a      	add	r2, r3
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	202c      	movs	r0, #44	; 0x2c
 8004a5c:	fb00 f303 	mul.w	r3, r0, r3
 8004a60:	440b      	add	r3, r1
 8004a62:	3344      	adds	r3, #68	; 0x44
 8004a64:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	212c      	movs	r1, #44	; 0x2c
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	4413      	add	r3, r2
 8004a72:	3350      	adds	r3, #80	; 0x50
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	441a      	add	r2, r3
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	202c      	movs	r0, #44	; 0x2c
 8004a80:	fb00 f303 	mul.w	r3, r0, r3
 8004a84:	440b      	add	r3, r1
 8004a86:	3350      	adds	r3, #80	; 0x50
 8004a88:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	0cdb      	lsrs	r3, r3, #19
 8004a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	212c      	movs	r1, #44	; 0x2c
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	3340      	adds	r3, #64	; 0x40
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d13c      	bne.n	8004b32 <HCD_RXQLVL_IRQHandler+0x19a>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d039      	beq.n	8004b32 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ad4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004adc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aea:	461a      	mov	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	212c      	movs	r1, #44	; 0x2c
 8004af6:	fb01 f303 	mul.w	r3, r1, r3
 8004afa:	4413      	add	r3, r2
 8004afc:	3354      	adds	r3, #84	; 0x54
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	f083 0301 	eor.w	r3, r3, #1
 8004b04:	b2d8      	uxtb	r0, r3
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	212c      	movs	r1, #44	; 0x2c
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	4413      	add	r3, r2
 8004b12:	3354      	adds	r3, #84	; 0x54
 8004b14:	4602      	mov	r2, r0
 8004b16:	701a      	strb	r2, [r3, #0]
      break;
 8004b18:	e00b      	b.n	8004b32 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	3360      	adds	r3, #96	; 0x60
 8004b28:	2204      	movs	r2, #4
 8004b2a:	701a      	strb	r2, [r3, #0]
      break;
 8004b2c:	e001      	b.n	8004b32 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004b32:	bf00      	nop
  }
}
 8004b34:	bf00      	nop
 8004b36:	3728      	adds	r7, #40	; 0x28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b68:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d10b      	bne.n	8004b8c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d102      	bne.n	8004b84 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f00a fd38 	bl	800f5f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f043 0302 	orr.w	r3, r3, #2
 8004b8a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d132      	bne.n	8004bfc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f043 0308 	orr.w	r3, r3, #8
 8004b9c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d126      	bne.n	8004bf6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d113      	bne.n	8004bd8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004bb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bba:	d106      	bne.n	8004bca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2102      	movs	r1, #2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f003 fc3e 	bl	8008444 <USB_InitFSLSPClkSel>
 8004bc8:	e011      	b.n	8004bee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2101      	movs	r1, #1
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f003 fc37 	bl	8008444 <USB_InitFSLSPClkSel>
 8004bd6:	e00a      	b.n	8004bee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d106      	bne.n	8004bee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be6:	461a      	mov	r2, r3
 8004be8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004bec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f00a fd2a 	bl	800f648 <HAL_HCD_PortEnabled_Callback>
 8004bf4:	e002      	b.n	8004bfc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f00a fd34 	bl	800f664 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d103      	bne.n	8004c0e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f043 0320 	orr.w	r3, r3, #32
 8004c0c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c14:	461a      	mov	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6013      	str	r3, [r2, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e12b      	b.n	8004e8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc fe0a 	bl	8001864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2224      	movs	r2, #36	; 0x24
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0201 	bic.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c88:	f002 fcb6 	bl	80075f8 <HAL_RCC_GetPCLK1Freq>
 8004c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4a81      	ldr	r2, [pc, #516]	; (8004e98 <HAL_I2C_Init+0x274>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d807      	bhi.n	8004ca8 <HAL_I2C_Init+0x84>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4a80      	ldr	r2, [pc, #512]	; (8004e9c <HAL_I2C_Init+0x278>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	bf94      	ite	ls
 8004ca0:	2301      	movls	r3, #1
 8004ca2:	2300      	movhi	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	e006      	b.n	8004cb6 <HAL_I2C_Init+0x92>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a7d      	ldr	r2, [pc, #500]	; (8004ea0 <HAL_I2C_Init+0x27c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	bf94      	ite	ls
 8004cb0:	2301      	movls	r3, #1
 8004cb2:	2300      	movhi	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e0e7      	b.n	8004e8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4a78      	ldr	r2, [pc, #480]	; (8004ea4 <HAL_I2C_Init+0x280>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	0c9b      	lsrs	r3, r3, #18
 8004cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a6a      	ldr	r2, [pc, #424]	; (8004e98 <HAL_I2C_Init+0x274>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d802      	bhi.n	8004cf8 <HAL_I2C_Init+0xd4>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	e009      	b.n	8004d0c <HAL_I2C_Init+0xe8>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cfe:	fb02 f303 	mul.w	r3, r2, r3
 8004d02:	4a69      	ldr	r2, [pc, #420]	; (8004ea8 <HAL_I2C_Init+0x284>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	495c      	ldr	r1, [pc, #368]	; (8004e98 <HAL_I2C_Init+0x274>)
 8004d28:	428b      	cmp	r3, r1
 8004d2a:	d819      	bhi.n	8004d60 <HAL_I2C_Init+0x13c>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1e59      	subs	r1, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d3a:	1c59      	adds	r1, r3, #1
 8004d3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d40:	400b      	ands	r3, r1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_I2C_Init+0x138>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1e59      	subs	r1, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d54:	3301      	adds	r3, #1
 8004d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5a:	e051      	b.n	8004e00 <HAL_I2C_Init+0x1dc>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	e04f      	b.n	8004e00 <HAL_I2C_Init+0x1dc>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d111      	bne.n	8004d8c <HAL_I2C_Init+0x168>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1e58      	subs	r0, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6859      	ldr	r1, [r3, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	440b      	add	r3, r1
 8004d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e012      	b.n	8004db2 <HAL_I2C_Init+0x18e>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	1e58      	subs	r0, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6859      	ldr	r1, [r3, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	0099      	lsls	r1, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004da2:	3301      	adds	r3, #1
 8004da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf0c      	ite	eq
 8004dac:	2301      	moveq	r3, #1
 8004dae:	2300      	movne	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_I2C_Init+0x196>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e022      	b.n	8004e00 <HAL_I2C_Init+0x1dc>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10e      	bne.n	8004de0 <HAL_I2C_Init+0x1bc>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1e58      	subs	r0, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6859      	ldr	r1, [r3, #4]
 8004dca:	460b      	mov	r3, r1
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	440b      	add	r3, r1
 8004dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dde:	e00f      	b.n	8004e00 <HAL_I2C_Init+0x1dc>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1e58      	subs	r0, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6859      	ldr	r1, [r3, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	0099      	lsls	r1, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df6:	3301      	adds	r3, #1
 8004df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	6809      	ldr	r1, [r1, #0]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69da      	ldr	r2, [r3, #28]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6911      	ldr	r1, [r2, #16]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68d2      	ldr	r2, [r2, #12]
 8004e3a:	4311      	orrs	r1, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	000186a0 	.word	0x000186a0
 8004e9c:	001e847f 	.word	0x001e847f
 8004ea0:	003d08ff 	.word	0x003d08ff
 8004ea4:	431bde83 	.word	0x431bde83
 8004ea8:	10624dd3 	.word	0x10624dd3

08004eac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e021      	b.n	8004f02 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2224      	movs	r2, #36	; 0x24
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fc fd0c 	bl	80018f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	817b      	strh	r3, [r7, #10]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	813b      	strh	r3, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f26:	f7fd f8f3 	bl	8002110 <HAL_GetTick>
 8004f2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	f040 80d9 	bne.w	80050ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	2319      	movs	r3, #25
 8004f40:	2201      	movs	r2, #1
 8004f42:	496d      	ldr	r1, [pc, #436]	; (80050f8 <HAL_I2C_Mem_Write+0x1ec>)
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fc8d 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f50:	2302      	movs	r3, #2
 8004f52:	e0cc      	b.n	80050ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2C_Mem_Write+0x56>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e0c5      	b.n	80050ee <HAL_I2C_Mem_Write+0x1e2>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d007      	beq.n	8004f88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2221      	movs	r2, #33	; 0x21
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2240      	movs	r2, #64	; 0x40
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a3a      	ldr	r2, [r7, #32]
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4a4d      	ldr	r2, [pc, #308]	; (80050fc <HAL_I2C_Mem_Write+0x1f0>)
 8004fc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fca:	88f8      	ldrh	r0, [r7, #6]
 8004fcc:	893a      	ldrh	r2, [r7, #8]
 8004fce:	8979      	ldrh	r1, [r7, #10]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	4603      	mov	r3, r0
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fac4 	bl	8005568 <I2C_RequestMemoryWrite>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d052      	beq.n	800508c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e081      	b.n	80050ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fd0e 	bl	8005a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00d      	beq.n	8005016 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d107      	bne.n	8005012 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005010:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e06b      	b.n	80050ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	781a      	ldrb	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b04      	cmp	r3, #4
 8005052:	d11b      	bne.n	800508c <HAL_I2C_Mem_Write+0x180>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005058:	2b00      	cmp	r3, #0
 800505a:	d017      	beq.n	800508c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1aa      	bne.n	8004fea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fcfa 	bl	8005a92 <I2C_WaitOnBTFFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00d      	beq.n	80050c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d107      	bne.n	80050bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e016      	b.n	80050ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e000      	b.n	80050ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050ec:	2302      	movs	r3, #2
  }
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	00100002 	.word	0x00100002
 80050fc:	ffff0000 	.word	0xffff0000

08005100 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08c      	sub	sp, #48	; 0x30
 8005104:	af02      	add	r7, sp, #8
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	461a      	mov	r2, r3
 800510e:	4603      	mov	r3, r0
 8005110:	817b      	strh	r3, [r7, #10]
 8005112:	460b      	mov	r3, r1
 8005114:	813b      	strh	r3, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800511a:	f7fc fff9 	bl	8002110 <HAL_GetTick>
 800511e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b20      	cmp	r3, #32
 800512a:	f040 8208 	bne.w	800553e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	2319      	movs	r3, #25
 8005134:	2201      	movs	r2, #1
 8005136:	497b      	ldr	r1, [pc, #492]	; (8005324 <HAL_I2C_Mem_Read+0x224>)
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 fb93 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005144:	2302      	movs	r3, #2
 8005146:	e1fb      	b.n	8005540 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_I2C_Mem_Read+0x56>
 8005152:	2302      	movs	r3, #2
 8005154:	e1f4      	b.n	8005540 <HAL_I2C_Mem_Read+0x440>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b01      	cmp	r3, #1
 800516a:	d007      	beq.n	800517c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800518a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2222      	movs	r2, #34	; 0x22
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2240      	movs	r2, #64	; 0x40
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80051ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a5b      	ldr	r2, [pc, #364]	; (8005328 <HAL_I2C_Mem_Read+0x228>)
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051be:	88f8      	ldrh	r0, [r7, #6]
 80051c0:	893a      	ldrh	r2, [r7, #8]
 80051c2:	8979      	ldrh	r1, [r7, #10]
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	9301      	str	r3, [sp, #4]
 80051c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	4603      	mov	r3, r0
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fa60 	bl	8005694 <I2C_RequestMemoryRead>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e1b0      	b.n	8005540 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d113      	bne.n	800520e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e6:	2300      	movs	r3, #0
 80051e8:	623b      	str	r3, [r7, #32]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	623b      	str	r3, [r7, #32]
 80051fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e184      	b.n	8005518 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005212:	2b01      	cmp	r3, #1
 8005214:	d11b      	bne.n	800524e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005224:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e164      	b.n	8005518 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005252:	2b02      	cmp	r3, #2
 8005254:	d11b      	bne.n	800528e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005264:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005274:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005276:	2300      	movs	r3, #0
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	e144      	b.n	8005518 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80052a4:	e138      	b.n	8005518 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	f200 80f1 	bhi.w	8005492 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d123      	bne.n	8005300 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fc29 	bl	8005b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e139      	b.n	8005540 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052fe:	e10b      	b.n	8005518 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005304:	2b02      	cmp	r3, #2
 8005306:	d14e      	bne.n	80053a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	2200      	movs	r2, #0
 8005310:	4906      	ldr	r1, [pc, #24]	; (800532c <HAL_I2C_Mem_Read+0x22c>)
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 faa6 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e10e      	b.n	8005540 <HAL_I2C_Mem_Read+0x440>
 8005322:	bf00      	nop
 8005324:	00100002 	.word	0x00100002
 8005328:	ffff0000 	.word	0xffff0000
 800532c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053a4:	e0b8      	b.n	8005518 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	2200      	movs	r2, #0
 80053ae:	4966      	ldr	r1, [pc, #408]	; (8005548 <HAL_I2C_Mem_Read+0x448>)
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 fa57 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0bf      	b.n	8005540 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	2200      	movs	r2, #0
 800540a:	494f      	ldr	r1, [pc, #316]	; (8005548 <HAL_I2C_Mem_Read+0x448>)
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fa29 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e091      	b.n	8005540 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005490:	e042      	b.n	8005518 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005494:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fb3c 	bl	8005b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e04c      	b.n	8005540 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d118      	bne.n	8005518 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	f47f aec2 	bne.w	80052a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e000      	b.n	8005540 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3728      	adds	r7, #40	; 0x28
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	00010004 	.word	0x00010004

0800554c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	b2db      	uxtb	r3, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	4608      	mov	r0, r1
 8005572:	4611      	mov	r1, r2
 8005574:	461a      	mov	r2, r3
 8005576:	4603      	mov	r3, r0
 8005578:	817b      	strh	r3, [r7, #10]
 800557a:	460b      	mov	r3, r1
 800557c:	813b      	strh	r3, [r7, #8]
 800557e:	4613      	mov	r3, r2
 8005580:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005590:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	2200      	movs	r2, #0
 800559a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f960 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00d      	beq.n	80055c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055b8:	d103      	bne.n	80055c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e05f      	b.n	8005686 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055c6:	897b      	ldrh	r3, [r7, #10]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	6a3a      	ldr	r2, [r7, #32]
 80055da:	492d      	ldr	r1, [pc, #180]	; (8005690 <I2C_RequestMemoryWrite+0x128>)
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 f998 	bl	8005912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e04c      	b.n	8005686 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005604:	6a39      	ldr	r1, [r7, #32]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fa02 	bl	8005a10 <I2C_WaitOnTXEFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00d      	beq.n	800562e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2b04      	cmp	r3, #4
 8005618:	d107      	bne.n	800562a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005628:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e02b      	b.n	8005686 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d105      	bne.n	8005640 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005634:	893b      	ldrh	r3, [r7, #8]
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	611a      	str	r2, [r3, #16]
 800563e:	e021      	b.n	8005684 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005640:	893b      	ldrh	r3, [r7, #8]
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	b29b      	uxth	r3, r3
 8005646:	b2da      	uxtb	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800564e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005650:	6a39      	ldr	r1, [r7, #32]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f9dc 	bl	8005a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00d      	beq.n	800567a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	2b04      	cmp	r3, #4
 8005664:	d107      	bne.n	8005676 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005674:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e005      	b.n	8005686 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800567a:	893b      	ldrh	r3, [r7, #8]
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	00010002 	.word	0x00010002

08005694 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	4608      	mov	r0, r1
 800569e:	4611      	mov	r1, r2
 80056a0:	461a      	mov	r2, r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	817b      	strh	r3, [r7, #10]
 80056a6:	460b      	mov	r3, r1
 80056a8:	813b      	strh	r3, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 f8c2 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00d      	beq.n	8005702 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f4:	d103      	bne.n	80056fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e0aa      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005702:	897b      	ldrh	r3, [r7, #10]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005710:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	4952      	ldr	r1, [pc, #328]	; (8005860 <I2C_RequestMemoryRead+0x1cc>)
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f8fa 	bl	8005912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e097      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800573e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005740:	6a39      	ldr	r1, [r7, #32]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 f964 	bl	8005a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b04      	cmp	r3, #4
 8005754:	d107      	bne.n	8005766 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005764:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e076      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d105      	bne.n	800577c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005770:	893b      	ldrh	r3, [r7, #8]
 8005772:	b2da      	uxtb	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	611a      	str	r2, [r3, #16]
 800577a:	e021      	b.n	80057c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800577c:	893b      	ldrh	r3, [r7, #8]
 800577e:	0a1b      	lsrs	r3, r3, #8
 8005780:	b29b      	uxth	r3, r3
 8005782:	b2da      	uxtb	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	6a39      	ldr	r1, [r7, #32]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f93e 	bl	8005a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d107      	bne.n	80057b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e050      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057b6:	893b      	ldrh	r3, [r7, #8]
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	6a39      	ldr	r1, [r7, #32]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f923 	bl	8005a10 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d107      	bne.n	80057e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e035      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2200      	movs	r2, #0
 8005804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f82b 	bl	8005864 <I2C_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00d      	beq.n	8005830 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005822:	d103      	bne.n	800582c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e013      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005830:	897b      	ldrh	r3, [r7, #10]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	6a3a      	ldr	r2, [r7, #32]
 8005844:	4906      	ldr	r1, [pc, #24]	; (8005860 <I2C_RequestMemoryRead+0x1cc>)
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f863 	bl	8005912 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	00010002 	.word	0x00010002

08005864 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	4613      	mov	r3, r2
 8005872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005874:	e025      	b.n	80058c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d021      	beq.n	80058c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587e:	f7fc fc47 	bl	8002110 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <I2C_WaitOnFlagUntilTimeout+0x30>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d116      	bne.n	80058c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f043 0220 	orr.w	r2, r3, #32
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e023      	b.n	800590a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d10d      	bne.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	43da      	mvns	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	e00c      	b.n	8005902 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	43da      	mvns	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4013      	ands	r3, r2
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf0c      	ite	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	2300      	movne	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	461a      	mov	r2, r3
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	429a      	cmp	r2, r3
 8005906:	d0b6      	beq.n	8005876 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
 800591e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005920:	e051      	b.n	80059c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800592c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005930:	d123      	bne.n	800597a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005940:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800594a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	f043 0204 	orr.w	r2, r3, #4
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e046      	b.n	8005a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005980:	d021      	beq.n	80059c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005982:	f7fc fbc5 	bl	8002110 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	429a      	cmp	r2, r3
 8005990:	d302      	bcc.n	8005998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d116      	bne.n	80059c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f043 0220 	orr.w	r2, r3, #32
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e020      	b.n	8005a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d10c      	bne.n	80059ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	43da      	mvns	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4013      	ands	r3, r2
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bf14      	ite	ne
 80059e2:	2301      	movne	r3, #1
 80059e4:	2300      	moveq	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	e00b      	b.n	8005a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	43da      	mvns	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4013      	ands	r3, r2
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bf14      	ite	ne
 80059fc:	2301      	movne	r3, #1
 80059fe:	2300      	moveq	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d18d      	bne.n	8005922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a1c:	e02d      	b.n	8005a7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f8ce 	bl	8005bc0 <I2C_IsAcknowledgeFailed>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e02d      	b.n	8005a8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d021      	beq.n	8005a7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fc fb6b 	bl	8002110 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d116      	bne.n	8005a7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f043 0220 	orr.w	r2, r3, #32
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e007      	b.n	8005a8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d1ca      	bne.n	8005a1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a9e:	e02d      	b.n	8005afc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f88d 	bl	8005bc0 <I2C_IsAcknowledgeFailed>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e02d      	b.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d021      	beq.n	8005afc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab8:	f7fc fb2a 	bl	8002110 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d302      	bcc.n	8005ace <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d116      	bne.n	8005afc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	f043 0220 	orr.w	r2, r3, #32
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e007      	b.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d1ca      	bne.n	8005aa0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b20:	e042      	b.n	8005ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	d119      	bne.n	8005b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0210 	mvn.w	r2, #16
 8005b38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e029      	b.n	8005bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b64:	f7fc fad4 	bl	8002110 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d302      	bcc.n	8005b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d116      	bne.n	8005ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e007      	b.n	8005bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d1b5      	bne.n	8005b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd6:	d11b      	bne.n	8005c10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005be0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	f043 0204 	orr.w	r2, r3, #4
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e128      	b.n	8005e84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a90      	ldr	r2, [pc, #576]	; (8005e8c <HAL_I2S_Init+0x26c>)
 8005c4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fb fe73 	bl	8001938 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6812      	ldr	r2, [r2, #0]
 8005c64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005c68:	f023 030f 	bic.w	r3, r3, #15
 8005c6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2202      	movs	r2, #2
 8005c74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d060      	beq.n	8005d40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005c86:	2310      	movs	r3, #16
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	e001      	b.n	8005c90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d802      	bhi.n	8005c9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	f001 fe12 	bl	80078c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ca4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cae:	d125      	bne.n	8005cfc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d010      	beq.n	8005cda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	461a      	mov	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	3305      	adds	r3, #5
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	e01f      	b.n	8005d1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	461a      	mov	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf6:	3305      	adds	r3, #5
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	e00e      	b.n	8005d1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d16:	3305      	adds	r3, #5
 8005d18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4a5c      	ldr	r2, [pc, #368]	; (8005e90 <HAL_I2S_Init+0x270>)
 8005d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d22:	08db      	lsrs	r3, r3, #3
 8005d24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	e003      	b.n	8005d48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005d40:	2302      	movs	r3, #2
 8005d42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d902      	bls.n	8005d54 <HAL_I2S_Init+0x134>
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	2bff      	cmp	r3, #255	; 0xff
 8005d52:	d907      	bls.n	8005d64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d58:	f043 0210 	orr.w	r2, r3, #16
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e08f      	b.n	8005e84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	ea42 0103 	orr.w	r1, r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d82:	f023 030f 	bic.w	r3, r3, #15
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6851      	ldr	r1, [r2, #4]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6892      	ldr	r2, [r2, #8]
 8005d8e:	4311      	orrs	r1, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	68d2      	ldr	r2, [r2, #12]
 8005d94:	4311      	orrs	r1, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6992      	ldr	r2, [r2, #24]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005da6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d161      	bne.n	8005e74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a38      	ldr	r2, [pc, #224]	; (8005e94 <HAL_I2S_Init+0x274>)
 8005db4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a37      	ldr	r2, [pc, #220]	; (8005e98 <HAL_I2S_Init+0x278>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d101      	bne.n	8005dc4 <HAL_I2S_Init+0x1a4>
 8005dc0:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <HAL_I2S_Init+0x27c>)
 8005dc2:	e001      	b.n	8005dc8 <HAL_I2S_Init+0x1a8>
 8005dc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	4932      	ldr	r1, [pc, #200]	; (8005e98 <HAL_I2S_Init+0x278>)
 8005dd0:	428a      	cmp	r2, r1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_I2S_Init+0x1b8>
 8005dd4:	4a31      	ldr	r2, [pc, #196]	; (8005e9c <HAL_I2S_Init+0x27c>)
 8005dd6:	e001      	b.n	8005ddc <HAL_I2S_Init+0x1bc>
 8005dd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005ddc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005de0:	f023 030f 	bic.w	r3, r3, #15
 8005de4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a2b      	ldr	r2, [pc, #172]	; (8005e98 <HAL_I2S_Init+0x278>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d101      	bne.n	8005df4 <HAL_I2S_Init+0x1d4>
 8005df0:	4b2a      	ldr	r3, [pc, #168]	; (8005e9c <HAL_I2S_Init+0x27c>)
 8005df2:	e001      	b.n	8005df8 <HAL_I2S_Init+0x1d8>
 8005df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005df8:	2202      	movs	r2, #2
 8005dfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a25      	ldr	r2, [pc, #148]	; (8005e98 <HAL_I2S_Init+0x278>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d101      	bne.n	8005e0a <HAL_I2S_Init+0x1ea>
 8005e06:	4b25      	ldr	r3, [pc, #148]	; (8005e9c <HAL_I2S_Init+0x27c>)
 8005e08:	e001      	b.n	8005e0e <HAL_I2S_Init+0x1ee>
 8005e0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e1a:	d003      	beq.n	8005e24 <HAL_I2S_Init+0x204>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d103      	bne.n	8005e2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	e001      	b.n	8005e30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e44:	4313      	orrs	r3, r2
 8005e46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	897b      	ldrh	r3, [r7, #10]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a0d      	ldr	r2, [pc, #52]	; (8005e98 <HAL_I2S_Init+0x278>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d101      	bne.n	8005e6c <HAL_I2S_Init+0x24c>
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <HAL_I2S_Init+0x27c>)
 8005e6a:	e001      	b.n	8005e70 <HAL_I2S_Init+0x250>
 8005e6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e70:	897a      	ldrh	r2, [r7, #10]
 8005e72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3720      	adds	r7, #32
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	08006725 	.word	0x08006725
 8005e90:	cccccccd 	.word	0xcccccccd
 8005e94:	080068ad 	.word	0x080068ad
 8005e98:	40003800 	.word	0x40003800
 8005e9c:	40003400 	.word	0x40003400

08005ea0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <HAL_I2S_Transmit_DMA+0x1a>
 8005eb4:	88fb      	ldrh	r3, [r7, #6]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e08e      	b.n	8005fdc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_I2S_Transmit_DMA+0x2e>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e086      	b.n	8005fdc <HAL_I2S_Transmit_DMA+0x13c>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d005      	beq.n	8005eee <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005eea:	2302      	movs	r3, #2
 8005eec:	e076      	b.n	8005fdc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d002      	beq.n	8005f1a <HAL_I2S_Transmit_DMA+0x7a>
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2b05      	cmp	r3, #5
 8005f18:	d10a      	bne.n	8005f30 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f2e:	e005      	b.n	8005f3c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	4a28      	ldr	r2, [pc, #160]	; (8005fe4 <HAL_I2S_Transmit_DMA+0x144>)
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	4a27      	ldr	r2, [pc, #156]	; (8005fe8 <HAL_I2S_Transmit_DMA+0x148>)
 8005f4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	4a26      	ldr	r2, [pc, #152]	; (8005fec <HAL_I2S_Transmit_DMA+0x14c>)
 8005f52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f5c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f64:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005f6c:	f7fc faee 	bl	800254c <HAL_DMA_Start_IT>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00f      	beq.n	8005f96 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	f043 0208 	orr.w	r2, r3, #8
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e022      	b.n	8005fdc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d107      	bne.n	8005fb4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fb2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d107      	bne.n	8005fd2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0202 	orr.w	r2, r2, #2
 8005fd0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	08006603 	.word	0x08006603
 8005fe8:	080065c1 	.word	0x080065c1
 8005fec:	0800661f 	.word	0x0800661f

08005ff0 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_I2S_DMAPause+0x18>
 8006004:	2302      	movs	r3, #2
 8006006:	e04a      	b.n	800609e <HAL_I2S_DMAPause+0xae>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b03      	cmp	r3, #3
 800601a:	d108      	bne.n	800602e <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0202 	bic.w	r2, r2, #2
 800602a:	605a      	str	r2, [r3, #4]
 800602c:	e032      	b.n	8006094 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b04      	cmp	r3, #4
 8006038:	d108      	bne.n	800604c <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0201 	bic.w	r2, r2, #1
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	e023      	b.n	8006094 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b05      	cmp	r3, #5
 8006056:	d11d      	bne.n	8006094 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0203 	bic.w	r2, r2, #3
 8006066:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a0f      	ldr	r2, [pc, #60]	; (80060ac <HAL_I2S_DMAPause+0xbc>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d101      	bne.n	8006076 <HAL_I2S_DMAPause+0x86>
 8006072:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <HAL_I2S_DMAPause+0xc0>)
 8006074:	e001      	b.n	800607a <HAL_I2S_DMAPause+0x8a>
 8006076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	490a      	ldr	r1, [pc, #40]	; (80060ac <HAL_I2S_DMAPause+0xbc>)
 8006082:	428b      	cmp	r3, r1
 8006084:	d101      	bne.n	800608a <HAL_I2S_DMAPause+0x9a>
 8006086:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <HAL_I2S_DMAPause+0xc0>)
 8006088:	e001      	b.n	800608e <HAL_I2S_DMAPause+0x9e>
 800608a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800608e:	f022 0203 	bic.w	r2, r2, #3
 8006092:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40003800 	.word	0x40003800
 80060b0:	40003400 	.word	0x40003400

080060b4 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_I2S_DMAResume+0x18>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e07d      	b.n	80061c8 <HAL_I2S_DMAResume+0x114>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d108      	bne.n	80060f2 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0202 	orr.w	r2, r2, #2
 80060ee:	605a      	str	r2, [r3, #4]
 80060f0:	e056      	b.n	80061a0 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d108      	bne.n	8006110 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	605a      	str	r2, [r3, #4]
 800610e:	e047      	b.n	80061a0 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b05      	cmp	r3, #5
 800611a:	d141      	bne.n	80061a0 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0203 	orr.w	r2, r2, #3
 800612a:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a28      	ldr	r2, [pc, #160]	; (80061d4 <HAL_I2S_DMAResume+0x120>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d101      	bne.n	800613a <HAL_I2S_DMAResume+0x86>
 8006136:	4b28      	ldr	r3, [pc, #160]	; (80061d8 <HAL_I2S_DMAResume+0x124>)
 8006138:	e001      	b.n	800613e <HAL_I2S_DMAResume+0x8a>
 800613a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4923      	ldr	r1, [pc, #140]	; (80061d4 <HAL_I2S_DMAResume+0x120>)
 8006146:	428b      	cmp	r3, r1
 8006148:	d101      	bne.n	800614e <HAL_I2S_DMAResume+0x9a>
 800614a:	4b23      	ldr	r3, [pc, #140]	; (80061d8 <HAL_I2S_DMAResume+0x124>)
 800614c:	e001      	b.n	8006152 <HAL_I2S_DMAResume+0x9e>
 800614e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006152:	f042 0203 	orr.w	r2, r2, #3
 8006156:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <HAL_I2S_DMAResume+0x120>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d101      	bne.n	8006166 <HAL_I2S_DMAResume+0xb2>
 8006162:	4b1d      	ldr	r3, [pc, #116]	; (80061d8 <HAL_I2S_DMAResume+0x124>)
 8006164:	e001      	b.n	800616a <HAL_I2S_DMAResume+0xb6>
 8006166:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006170:	2b00      	cmp	r3, #0
 8006172:	d115      	bne.n	80061a0 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a16      	ldr	r2, [pc, #88]	; (80061d4 <HAL_I2S_DMAResume+0x120>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d101      	bne.n	8006182 <HAL_I2S_DMAResume+0xce>
 800617e:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <HAL_I2S_DMAResume+0x124>)
 8006180:	e001      	b.n	8006186 <HAL_I2S_DMAResume+0xd2>
 8006182:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4911      	ldr	r1, [pc, #68]	; (80061d4 <HAL_I2S_DMAResume+0x120>)
 800618e:	428b      	cmp	r3, r1
 8006190:	d101      	bne.n	8006196 <HAL_I2S_DMAResume+0xe2>
 8006192:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <HAL_I2S_DMAResume+0x124>)
 8006194:	e001      	b.n	800619a <HAL_I2S_DMAResume+0xe6>
 8006196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800619a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800619e:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061bc:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	40003800 	.word	0x40003800
 80061d8:	40003400 	.word	0x40003400

080061dc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f0:	d004      	beq.n	80061fc <HAL_I2S_DMAStop+0x20>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f040 80d1 	bne.w	800639e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00f      	beq.n	8006224 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	4618      	mov	r0, r3
 800620a:	f7fc f9f7 	bl	80025fc <HAL_DMA_Abort>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006218:	f043 0208 	orr.w	r2, r3, #8
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006224:	2364      	movs	r3, #100	; 0x64
 8006226:	2201      	movs	r2, #1
 8006228:	2102      	movs	r1, #2
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fb04 	bl	8006838 <I2S_WaitFlagStateUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	f043 0201 	orr.w	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800624e:	2364      	movs	r3, #100	; 0x64
 8006250:	2200      	movs	r2, #0
 8006252:	2180      	movs	r1, #128	; 0x80
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 faef 	bl	8006838 <I2S_WaitFlagStateUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006264:	f043 0201 	orr.w	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69da      	ldr	r2, [r3, #28]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006286:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0202 	bic.w	r2, r2, #2
 80062a4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	f040 8165 	bne.w	800657e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00f      	beq.n	80062dc <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fc f99b 	bl	80025fc <HAL_DMA_Abort>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d0:	f043 0208 	orr.w	r2, r3, #8
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a8a      	ldr	r2, [pc, #552]	; (800650c <HAL_I2S_DMAStop+0x330>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d101      	bne.n	80062ea <HAL_I2S_DMAStop+0x10e>
 80062e6:	4b8a      	ldr	r3, [pc, #552]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 80062e8:	e001      	b.n	80062ee <HAL_I2S_DMAStop+0x112>
 80062ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062ee:	69da      	ldr	r2, [r3, #28]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4985      	ldr	r1, [pc, #532]	; (800650c <HAL_I2S_DMAStop+0x330>)
 80062f6:	428b      	cmp	r3, r1
 80062f8:	d101      	bne.n	80062fe <HAL_I2S_DMAStop+0x122>
 80062fa:	4b85      	ldr	r3, [pc, #532]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 80062fc:	e001      	b.n	8006302 <HAL_I2S_DMAStop+0x126>
 80062fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006306:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006308:	2300      	movs	r3, #0
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a7e      	ldr	r2, [pc, #504]	; (800650c <HAL_I2S_DMAStop+0x330>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d101      	bne.n	800631a <HAL_I2S_DMAStop+0x13e>
 8006316:	4b7e      	ldr	r3, [pc, #504]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 8006318:	e001      	b.n	800631e <HAL_I2S_DMAStop+0x142>
 800631a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a79      	ldr	r2, [pc, #484]	; (800650c <HAL_I2S_DMAStop+0x330>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d101      	bne.n	8006330 <HAL_I2S_DMAStop+0x154>
 800632c:	4b78      	ldr	r3, [pc, #480]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 800632e:	e001      	b.n	8006334 <HAL_I2S_DMAStop+0x158>
 8006330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a73      	ldr	r2, [pc, #460]	; (800650c <HAL_I2S_DMAStop+0x330>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d101      	bne.n	8006348 <HAL_I2S_DMAStop+0x16c>
 8006344:	4b72      	ldr	r3, [pc, #456]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 8006346:	e001      	b.n	800634c <HAL_I2S_DMAStop+0x170>
 8006348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	496e      	ldr	r1, [pc, #440]	; (800650c <HAL_I2S_DMAStop+0x330>)
 8006354:	428b      	cmp	r3, r1
 8006356:	d101      	bne.n	800635c <HAL_I2S_DMAStop+0x180>
 8006358:	4b6d      	ldr	r3, [pc, #436]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 800635a:	e001      	b.n	8006360 <HAL_I2S_DMAStop+0x184>
 800635c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006360:	f022 0201 	bic.w	r2, r2, #1
 8006364:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10c      	bne.n	8006388 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006386:	e0fa      	b.n	800657e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a5f      	ldr	r2, [pc, #380]	; (800650c <HAL_I2S_DMAStop+0x330>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d101      	bne.n	8006396 <HAL_I2S_DMAStop+0x1ba>
 8006392:	4b5f      	ldr	r3, [pc, #380]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 8006394:	e001      	b.n	800639a <HAL_I2S_DMAStop+0x1be>
 8006396:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800639a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800639c:	e0ef      	b.n	800657e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a6:	d005      	beq.n	80063b4 <HAL_I2S_DMAStop+0x1d8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b0:	f040 80e5 	bne.w	800657e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00f      	beq.n	80063dc <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fc f91b 	bl	80025fc <HAL_DMA_Abort>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d0:	f043 0208 	orr.w	r2, r3, #8
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b05      	cmp	r3, #5
 80063e6:	f040 809a 	bne.w	800651e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00f      	beq.n	8006412 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fc f900 	bl	80025fc <HAL_DMA_Abort>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006406:	f043 0208 	orr.w	r2, r3, #8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006412:	f7fb fe7d 	bl	8002110 <HAL_GetTick>
 8006416:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006418:	e012      	b.n	8006440 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800641a:	f7fb fe79 	bl	8002110 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b64      	cmp	r3, #100	; 0x64
 8006426:	d90b      	bls.n	8006440 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642c:	f043 0201 	orr.w	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a31      	ldr	r2, [pc, #196]	; (800650c <HAL_I2S_DMAStop+0x330>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d101      	bne.n	800644e <HAL_I2S_DMAStop+0x272>
 800644a:	4b31      	ldr	r3, [pc, #196]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 800644c:	e001      	b.n	8006452 <HAL_I2S_DMAStop+0x276>
 800644e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b02      	cmp	r3, #2
 800645a:	d1de      	bne.n	800641a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800645c:	e012      	b.n	8006484 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800645e:	f7fb fe57 	bl	8002110 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b64      	cmp	r3, #100	; 0x64
 800646a:	d90b      	bls.n	8006484 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006470:	f043 0201 	orr.w	r2, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a20      	ldr	r2, [pc, #128]	; (800650c <HAL_I2S_DMAStop+0x330>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d101      	bne.n	8006492 <HAL_I2S_DMAStop+0x2b6>
 800648e:	4b20      	ldr	r3, [pc, #128]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 8006490:	e001      	b.n	8006496 <HAL_I2S_DMAStop+0x2ba>
 8006492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649c:	2b80      	cmp	r3, #128	; 0x80
 800649e:	d0de      	beq.n	800645e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a19      	ldr	r2, [pc, #100]	; (800650c <HAL_I2S_DMAStop+0x330>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d101      	bne.n	80064ae <HAL_I2S_DMAStop+0x2d2>
 80064aa:	4b19      	ldr	r3, [pc, #100]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 80064ac:	e001      	b.n	80064b2 <HAL_I2S_DMAStop+0x2d6>
 80064ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4914      	ldr	r1, [pc, #80]	; (800650c <HAL_I2S_DMAStop+0x330>)
 80064ba:	428b      	cmp	r3, r1
 80064bc:	d101      	bne.n	80064c2 <HAL_I2S_DMAStop+0x2e6>
 80064be:	4b14      	ldr	r3, [pc, #80]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 80064c0:	e001      	b.n	80064c6 <HAL_I2S_DMAStop+0x2ea>
 80064c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ca:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a0d      	ldr	r2, [pc, #52]	; (800650c <HAL_I2S_DMAStop+0x330>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d101      	bne.n	80064de <HAL_I2S_DMAStop+0x302>
 80064da:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 80064dc:	e001      	b.n	80064e2 <HAL_I2S_DMAStop+0x306>
 80064de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a07      	ldr	r2, [pc, #28]	; (800650c <HAL_I2S_DMAStop+0x330>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d101      	bne.n	80064f6 <HAL_I2S_DMAStop+0x31a>
 80064f2:	4b07      	ldr	r3, [pc, #28]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 80064f4:	e001      	b.n	80064fa <HAL_I2S_DMAStop+0x31e>
 80064f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4902      	ldr	r1, [pc, #8]	; (800650c <HAL_I2S_DMAStop+0x330>)
 8006502:	428b      	cmp	r3, r1
 8006504:	d106      	bne.n	8006514 <HAL_I2S_DMAStop+0x338>
 8006506:	4b02      	ldr	r3, [pc, #8]	; (8006510 <HAL_I2S_DMAStop+0x334>)
 8006508:	e006      	b.n	8006518 <HAL_I2S_DMAStop+0x33c>
 800650a:	bf00      	nop
 800650c:	40003800 	.word	0x40003800
 8006510:	40003400 	.word	0x40003400
 8006514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006518:	f022 0202 	bic.w	r2, r2, #2
 800651c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	60bb      	str	r3, [r7, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0201 	bic.w	r2, r2, #1
 8006552:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655c:	d10c      	bne.n	8006578 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e002      	b.n	800657e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006586:	7ffb      	ldrb	r3, [r7, #31]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b2:	b2db      	uxtb	r3, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10e      	bne.n	80065f4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0202 	bic.w	r2, r2, #2
 80065e4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7fa f847 	bl	8000688 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7fa f84b 	bl	80006ac <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006616:	bf00      	nop
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0203 	bic.w	r2, r2, #3
 800663a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006654:	f043 0208 	orr.w	r2, r3, #8
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7fa f991 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	881a      	ldrh	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	1c9a      	adds	r2, r3, #2
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10e      	bne.n	80066be <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7f9 ffe5 	bl	8000688 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	b292      	uxth	r2, r2
 80066da:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	1c9a      	adds	r2, r3, #2
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10e      	bne.n	800671c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800670c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff ff3a 	bl	8006590 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b04      	cmp	r3, #4
 800673e:	d13a      	bne.n	80067b6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b01      	cmp	r3, #1
 8006748:	d109      	bne.n	800675e <I2S_IRQHandler+0x3a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d102      	bne.n	800675e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff ffb4 	bl	80066c6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d126      	bne.n	80067b6 <I2S_IRQHandler+0x92>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b20      	cmp	r3, #32
 8006774:	d11f      	bne.n	80067b6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006784:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006786:	2300      	movs	r3, #0
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	613b      	str	r3, [r7, #16]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a8:	f043 0202 	orr.w	r2, r3, #2
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7fa f8e7 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d136      	bne.n	8006830 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d109      	bne.n	80067e0 <I2S_IRQHandler+0xbc>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d6:	2b80      	cmp	r3, #128	; 0x80
 80067d8:	d102      	bne.n	80067e0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff ff45 	bl	800666a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d122      	bne.n	8006830 <I2S_IRQHandler+0x10c>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	d11b      	bne.n	8006830 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006806:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006822:	f043 0204 	orr.w	r2, r3, #4
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fa f8aa 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006830:	bf00      	nop
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	4613      	mov	r3, r2
 8006846:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006848:	f7fb fc62 	bl	8002110 <HAL_GetTick>
 800684c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800684e:	e018      	b.n	8006882 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d014      	beq.n	8006882 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006858:	f7fb fc5a 	bl	8002110 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d902      	bls.n	800686e <I2S_WaitFlagStateUntilTimeout+0x36>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d109      	bne.n	8006882 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e00f      	b.n	80068a2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	4013      	ands	r3, r2
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	429a      	cmp	r2, r3
 8006890:	bf0c      	ite	eq
 8006892:	2301      	moveq	r3, #1
 8006894:	2300      	movne	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	461a      	mov	r2, r3
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	429a      	cmp	r2, r3
 800689e:	d1d7      	bne.n	8006850 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4aa2      	ldr	r2, [pc, #648]	; (8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d101      	bne.n	80068ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80068c6:	4ba2      	ldr	r3, [pc, #648]	; (8006b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80068c8:	e001      	b.n	80068ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80068ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a9b      	ldr	r2, [pc, #620]	; (8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d101      	bne.n	80068e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80068e4:	4b9a      	ldr	r3, [pc, #616]	; (8006b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80068e6:	e001      	b.n	80068ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80068e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f8:	d004      	beq.n	8006904 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f040 8099 	bne.w	8006a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b02      	cmp	r3, #2
 800690c:	d107      	bne.n	800691e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f925 	bl	8006b68 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b01      	cmp	r3, #1
 8006926:	d107      	bne.n	8006938 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9c8 	bl	8006cc8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d13a      	bne.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	d035      	beq.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a7e      	ldr	r2, [pc, #504]	; (8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d101      	bne.n	800695a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006956:	4b7e      	ldr	r3, [pc, #504]	; (8006b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006958:	e001      	b.n	800695e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800695a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4979      	ldr	r1, [pc, #484]	; (8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006966:	428b      	cmp	r3, r1
 8006968:	d101      	bne.n	800696e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800696a:	4b79      	ldr	r3, [pc, #484]	; (8006b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800696c:	e001      	b.n	8006972 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800696e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006972:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006976:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006986:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069aa:	f043 0202 	orr.w	r2, r3, #2
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7f9 ffe6 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b08      	cmp	r3, #8
 80069c0:	f040 80be 	bne.w	8006b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 80b8 	beq.w	8006b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a59      	ldr	r2, [pc, #356]	; (8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d101      	bne.n	80069ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80069ea:	4b59      	ldr	r3, [pc, #356]	; (8006b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069ec:	e001      	b.n	80069f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80069ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4954      	ldr	r1, [pc, #336]	; (8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069fa:	428b      	cmp	r3, r1
 80069fc:	d101      	bne.n	8006a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80069fe:	4b54      	ldr	r3, [pc, #336]	; (8006b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a00:	e001      	b.n	8006a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006a02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a0a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60bb      	str	r3, [r7, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]
 8006a18:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	f043 0204 	orr.w	r2, r3, #4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7f9 ffa8 	bl	8000984 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a34:	e084      	b.n	8006b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d107      	bne.n	8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f8be 	bl	8006bcc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d107      	bne.n	8006a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8fd 	bl	8006c64 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b40      	cmp	r3, #64	; 0x40
 8006a72:	d12f      	bne.n	8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d02a      	beq.n	8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a8c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2e      	ldr	r2, [pc, #184]	; (8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d101      	bne.n	8006a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006a98:	4b2d      	ldr	r3, [pc, #180]	; (8006b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a9a:	e001      	b.n	8006aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4929      	ldr	r1, [pc, #164]	; (8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006aac:	4b28      	ldr	r3, [pc, #160]	; (8006b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006aae:	e001      	b.n	8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006ab0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ab4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ab8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac6:	f043 0202 	orr.w	r2, r3, #2
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7f9 ff58 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d131      	bne.n	8006b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02c      	beq.n	8006b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a17      	ldr	r2, [pc, #92]	; (8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d101      	bne.n	8006af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006af2:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006af4:	e001      	b.n	8006afa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006af6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4912      	ldr	r1, [pc, #72]	; (8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b02:	428b      	cmp	r3, r1
 8006b04:	d101      	bne.n	8006b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006b06:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b08:	e001      	b.n	8006b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006b0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b22:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b30:	f043 0204 	orr.w	r2, r3, #4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7f9 ff23 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b3e:	e000      	b.n	8006b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b40:	bf00      	nop
}
 8006b42:	bf00      	nop
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40003800 	.word	0x40003800
 8006b50:	40003400 	.word	0x40003400

08006b54 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	1c99      	adds	r1, r3, #2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6251      	str	r1, [r2, #36]	; 0x24
 8006b7a:	881a      	ldrh	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d113      	bne.n	8006bc2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ba8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d106      	bne.n	8006bc2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff ffc9 	bl	8006b54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	1c99      	adds	r1, r3, #2
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6251      	str	r1, [r2, #36]	; 0x24
 8006bde:	8819      	ldrh	r1, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1d      	ldr	r2, [pc, #116]	; (8006c5c <I2SEx_TxISR_I2SExt+0x90>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d101      	bne.n	8006bee <I2SEx_TxISR_I2SExt+0x22>
 8006bea:	4b1d      	ldr	r3, [pc, #116]	; (8006c60 <I2SEx_TxISR_I2SExt+0x94>)
 8006bec:	e001      	b.n	8006bf2 <I2SEx_TxISR_I2SExt+0x26>
 8006bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bf2:	460a      	mov	r2, r1
 8006bf4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d121      	bne.n	8006c52 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a12      	ldr	r2, [pc, #72]	; (8006c5c <I2SEx_TxISR_I2SExt+0x90>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d101      	bne.n	8006c1c <I2SEx_TxISR_I2SExt+0x50>
 8006c18:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <I2SEx_TxISR_I2SExt+0x94>)
 8006c1a:	e001      	b.n	8006c20 <I2SEx_TxISR_I2SExt+0x54>
 8006c1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	490d      	ldr	r1, [pc, #52]	; (8006c5c <I2SEx_TxISR_I2SExt+0x90>)
 8006c28:	428b      	cmp	r3, r1
 8006c2a:	d101      	bne.n	8006c30 <I2SEx_TxISR_I2SExt+0x64>
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <I2SEx_TxISR_I2SExt+0x94>)
 8006c2e:	e001      	b.n	8006c34 <I2SEx_TxISR_I2SExt+0x68>
 8006c30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d106      	bne.n	8006c52 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff ff81 	bl	8006b54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40003800 	.word	0x40003800
 8006c60:	40003400 	.word	0x40003400

08006c64 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68d8      	ldr	r0, [r3, #12]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	1c99      	adds	r1, r3, #2
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c7c:	b282      	uxth	r2, r0
 8006c7e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d113      	bne.n	8006cc0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ca6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff ff4a 	bl	8006b54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a20      	ldr	r2, [pc, #128]	; (8006d58 <I2SEx_RxISR_I2SExt+0x90>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d101      	bne.n	8006cde <I2SEx_RxISR_I2SExt+0x16>
 8006cda:	4b20      	ldr	r3, [pc, #128]	; (8006d5c <I2SEx_RxISR_I2SExt+0x94>)
 8006cdc:	e001      	b.n	8006ce2 <I2SEx_RxISR_I2SExt+0x1a>
 8006cde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ce2:	68d8      	ldr	r0, [r3, #12]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	1c99      	adds	r1, r3, #2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006cee:	b282      	uxth	r2, r0
 8006cf0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d121      	bne.n	8006d4e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a12      	ldr	r2, [pc, #72]	; (8006d58 <I2SEx_RxISR_I2SExt+0x90>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d101      	bne.n	8006d18 <I2SEx_RxISR_I2SExt+0x50>
 8006d14:	4b11      	ldr	r3, [pc, #68]	; (8006d5c <I2SEx_RxISR_I2SExt+0x94>)
 8006d16:	e001      	b.n	8006d1c <I2SEx_RxISR_I2SExt+0x54>
 8006d18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	490d      	ldr	r1, [pc, #52]	; (8006d58 <I2SEx_RxISR_I2SExt+0x90>)
 8006d24:	428b      	cmp	r3, r1
 8006d26:	d101      	bne.n	8006d2c <I2SEx_RxISR_I2SExt+0x64>
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <I2SEx_RxISR_I2SExt+0x94>)
 8006d2a:	e001      	b.n	8006d30 <I2SEx_RxISR_I2SExt+0x68>
 8006d2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d34:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff ff03 	bl	8006b54 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40003800 	.word	0x40003800
 8006d5c:	40003400 	.word	0x40003400

08006d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e264      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d075      	beq.n	8006e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d7e:	4ba3      	ldr	r3, [pc, #652]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 030c 	and.w	r3, r3, #12
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d00c      	beq.n	8006da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d8a:	4ba0      	ldr	r3, [pc, #640]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d112      	bne.n	8006dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d96:	4b9d      	ldr	r3, [pc, #628]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006da2:	d10b      	bne.n	8006dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da4:	4b99      	ldr	r3, [pc, #612]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d05b      	beq.n	8006e68 <HAL_RCC_OscConfig+0x108>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d157      	bne.n	8006e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e23f      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc4:	d106      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x74>
 8006dc6:	4b91      	ldr	r3, [pc, #580]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a90      	ldr	r2, [pc, #576]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	e01d      	b.n	8006e10 <HAL_RCC_OscConfig+0xb0>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ddc:	d10c      	bne.n	8006df8 <HAL_RCC_OscConfig+0x98>
 8006dde:	4b8b      	ldr	r3, [pc, #556]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a8a      	ldr	r2, [pc, #552]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	4b88      	ldr	r3, [pc, #544]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a87      	ldr	r2, [pc, #540]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	e00b      	b.n	8006e10 <HAL_RCC_OscConfig+0xb0>
 8006df8:	4b84      	ldr	r3, [pc, #528]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a83      	ldr	r2, [pc, #524]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	4b81      	ldr	r3, [pc, #516]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a80      	ldr	r2, [pc, #512]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d013      	beq.n	8006e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e18:	f7fb f97a 	bl	8002110 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e20:	f7fb f976 	bl	8002110 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b64      	cmp	r3, #100	; 0x64
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e204      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e32:	4b76      	ldr	r3, [pc, #472]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f0      	beq.n	8006e20 <HAL_RCC_OscConfig+0xc0>
 8006e3e:	e014      	b.n	8006e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e40:	f7fb f966 	bl	8002110 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e48:	f7fb f962 	bl	8002110 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b64      	cmp	r3, #100	; 0x64
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e1f0      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e5a:	4b6c      	ldr	r3, [pc, #432]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f0      	bne.n	8006e48 <HAL_RCC_OscConfig+0xe8>
 8006e66:	e000      	b.n	8006e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d063      	beq.n	8006f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e76:	4b65      	ldr	r3, [pc, #404]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 030c 	and.w	r3, r3, #12
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00b      	beq.n	8006e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e82:	4b62      	ldr	r3, [pc, #392]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d11c      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e8e:	4b5f      	ldr	r3, [pc, #380]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d116      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e9a:	4b5c      	ldr	r3, [pc, #368]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x152>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d001      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e1c4      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eb2:	4b56      	ldr	r3, [pc, #344]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	4952      	ldr	r1, [pc, #328]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ec6:	e03a      	b.n	8006f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d020      	beq.n	8006f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ed0:	4b4f      	ldr	r3, [pc, #316]	; (8007010 <HAL_RCC_OscConfig+0x2b0>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed6:	f7fb f91b 	bl	8002110 <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ede:	f7fb f917 	bl	8002110 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e1a5      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef0:	4b46      	ldr	r3, [pc, #280]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0f0      	beq.n	8006ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efc:	4b43      	ldr	r3, [pc, #268]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	4940      	ldr	r1, [pc, #256]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	600b      	str	r3, [r1, #0]
 8006f10:	e015      	b.n	8006f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f12:	4b3f      	ldr	r3, [pc, #252]	; (8007010 <HAL_RCC_OscConfig+0x2b0>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f18:	f7fb f8fa 	bl	8002110 <HAL_GetTick>
 8006f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f20:	f7fb f8f6 	bl	8002110 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e184      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f32:	4b36      	ldr	r3, [pc, #216]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f0      	bne.n	8006f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d030      	beq.n	8006fac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d016      	beq.n	8006f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f52:	4b30      	ldr	r3, [pc, #192]	; (8007014 <HAL_RCC_OscConfig+0x2b4>)
 8006f54:	2201      	movs	r2, #1
 8006f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f58:	f7fb f8da 	bl	8002110 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f60:	f7fb f8d6 	bl	8002110 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e164      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f72:	4b26      	ldr	r3, [pc, #152]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0f0      	beq.n	8006f60 <HAL_RCC_OscConfig+0x200>
 8006f7e:	e015      	b.n	8006fac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f80:	4b24      	ldr	r3, [pc, #144]	; (8007014 <HAL_RCC_OscConfig+0x2b4>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f86:	f7fb f8c3 	bl	8002110 <HAL_GetTick>
 8006f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f8e:	f7fb f8bf 	bl	8002110 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e14d      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fa0:	4b1a      	ldr	r3, [pc, #104]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f0      	bne.n	8006f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 80a0 	beq.w	80070fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fbe:	4b13      	ldr	r3, [pc, #76]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10f      	bne.n	8006fea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60bb      	str	r3, [r7, #8]
 8006fce:	4b0f      	ldr	r3, [pc, #60]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	4a0e      	ldr	r2, [pc, #56]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fda:	4b0c      	ldr	r3, [pc, #48]	; (800700c <HAL_RCC_OscConfig+0x2ac>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	60bb      	str	r3, [r7, #8]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <HAL_RCC_OscConfig+0x2b8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d121      	bne.n	800703a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ff6:	4b08      	ldr	r3, [pc, #32]	; (8007018 <HAL_RCC_OscConfig+0x2b8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a07      	ldr	r2, [pc, #28]	; (8007018 <HAL_RCC_OscConfig+0x2b8>)
 8006ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007002:	f7fb f885 	bl	8002110 <HAL_GetTick>
 8007006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007008:	e011      	b.n	800702e <HAL_RCC_OscConfig+0x2ce>
 800700a:	bf00      	nop
 800700c:	40023800 	.word	0x40023800
 8007010:	42470000 	.word	0x42470000
 8007014:	42470e80 	.word	0x42470e80
 8007018:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800701c:	f7fb f878 	bl	8002110 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e106      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702e:	4b85      	ldr	r3, [pc, #532]	; (8007244 <HAL_RCC_OscConfig+0x4e4>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0f0      	beq.n	800701c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d106      	bne.n	8007050 <HAL_RCC_OscConfig+0x2f0>
 8007042:	4b81      	ldr	r3, [pc, #516]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	4a80      	ldr	r2, [pc, #512]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	6713      	str	r3, [r2, #112]	; 0x70
 800704e:	e01c      	b.n	800708a <HAL_RCC_OscConfig+0x32a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	2b05      	cmp	r3, #5
 8007056:	d10c      	bne.n	8007072 <HAL_RCC_OscConfig+0x312>
 8007058:	4b7b      	ldr	r3, [pc, #492]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705c:	4a7a      	ldr	r2, [pc, #488]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 800705e:	f043 0304 	orr.w	r3, r3, #4
 8007062:	6713      	str	r3, [r2, #112]	; 0x70
 8007064:	4b78      	ldr	r3, [pc, #480]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 8007066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007068:	4a77      	ldr	r2, [pc, #476]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	6713      	str	r3, [r2, #112]	; 0x70
 8007070:	e00b      	b.n	800708a <HAL_RCC_OscConfig+0x32a>
 8007072:	4b75      	ldr	r3, [pc, #468]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 8007074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007076:	4a74      	ldr	r2, [pc, #464]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 8007078:	f023 0301 	bic.w	r3, r3, #1
 800707c:	6713      	str	r3, [r2, #112]	; 0x70
 800707e:	4b72      	ldr	r3, [pc, #456]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 8007080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007082:	4a71      	ldr	r2, [pc, #452]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 8007084:	f023 0304 	bic.w	r3, r3, #4
 8007088:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d015      	beq.n	80070be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007092:	f7fb f83d 	bl	8002110 <HAL_GetTick>
 8007096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007098:	e00a      	b.n	80070b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800709a:	f7fb f839 	bl	8002110 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d901      	bls.n	80070b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e0c5      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b0:	4b65      	ldr	r3, [pc, #404]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 80070b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0ee      	beq.n	800709a <HAL_RCC_OscConfig+0x33a>
 80070bc:	e014      	b.n	80070e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070be:	f7fb f827 	bl	8002110 <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c4:	e00a      	b.n	80070dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c6:	f7fb f823 	bl	8002110 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e0af      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070dc:	4b5a      	ldr	r3, [pc, #360]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 80070de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1ee      	bne.n	80070c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d105      	bne.n	80070fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070ee:	4b56      	ldr	r3, [pc, #344]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	4a55      	ldr	r2, [pc, #340]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 80070f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 809b 	beq.w	800723a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007104:	4b50      	ldr	r3, [pc, #320]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f003 030c 	and.w	r3, r3, #12
 800710c:	2b08      	cmp	r3, #8
 800710e:	d05c      	beq.n	80071ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d141      	bne.n	800719c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007118:	4b4c      	ldr	r3, [pc, #304]	; (800724c <HAL_RCC_OscConfig+0x4ec>)
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711e:	f7fa fff7 	bl	8002110 <HAL_GetTick>
 8007122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007124:	e008      	b.n	8007138 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007126:	f7fa fff3 	bl	8002110 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	d901      	bls.n	8007138 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e081      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007138:	4b43      	ldr	r3, [pc, #268]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1f0      	bne.n	8007126 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	019b      	lsls	r3, r3, #6
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	3b01      	subs	r3, #1
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	431a      	orrs	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	061b      	lsls	r3, r3, #24
 8007168:	4937      	ldr	r1, [pc, #220]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 800716a:	4313      	orrs	r3, r2
 800716c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800716e:	4b37      	ldr	r3, [pc, #220]	; (800724c <HAL_RCC_OscConfig+0x4ec>)
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007174:	f7fa ffcc 	bl	8002110 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800717c:	f7fa ffc8 	bl	8002110 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e056      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800718e:	4b2e      	ldr	r3, [pc, #184]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0f0      	beq.n	800717c <HAL_RCC_OscConfig+0x41c>
 800719a:	e04e      	b.n	800723a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800719c:	4b2b      	ldr	r3, [pc, #172]	; (800724c <HAL_RCC_OscConfig+0x4ec>)
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a2:	f7fa ffb5 	bl	8002110 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071aa:	f7fa ffb1 	bl	8002110 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e03f      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071bc:	4b22      	ldr	r3, [pc, #136]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1f0      	bne.n	80071aa <HAL_RCC_OscConfig+0x44a>
 80071c8:	e037      	b.n	800723a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e032      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071d6:	4b1c      	ldr	r3, [pc, #112]	; (8007248 <HAL_RCC_OscConfig+0x4e8>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d028      	beq.n	8007236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d121      	bne.n	8007236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d11a      	bne.n	8007236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007206:	4013      	ands	r3, r2
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800720c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800720e:	4293      	cmp	r3, r2
 8007210:	d111      	bne.n	8007236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	085b      	lsrs	r3, r3, #1
 800721e:	3b01      	subs	r3, #1
 8007220:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007222:	429a      	cmp	r2, r3
 8007224:	d107      	bne.n	8007236 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007232:	429a      	cmp	r2, r3
 8007234:	d001      	beq.n	800723a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	40007000 	.word	0x40007000
 8007248:	40023800 	.word	0x40023800
 800724c:	42470060 	.word	0x42470060

08007250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e0cc      	b.n	80073fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007264:	4b68      	ldr	r3, [pc, #416]	; (8007408 <HAL_RCC_ClockConfig+0x1b8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	429a      	cmp	r2, r3
 8007270:	d90c      	bls.n	800728c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007272:	4b65      	ldr	r3, [pc, #404]	; (8007408 <HAL_RCC_ClockConfig+0x1b8>)
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800727a:	4b63      	ldr	r3, [pc, #396]	; (8007408 <HAL_RCC_ClockConfig+0x1b8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d001      	beq.n	800728c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e0b8      	b.n	80073fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d020      	beq.n	80072da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072a4:	4b59      	ldr	r3, [pc, #356]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	4a58      	ldr	r2, [pc, #352]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80072aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0308 	and.w	r3, r3, #8
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072bc:	4b53      	ldr	r3, [pc, #332]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	4a52      	ldr	r2, [pc, #328]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80072c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072c8:	4b50      	ldr	r3, [pc, #320]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	494d      	ldr	r1, [pc, #308]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d044      	beq.n	8007370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d107      	bne.n	80072fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ee:	4b47      	ldr	r3, [pc, #284]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d119      	bne.n	800732e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e07f      	b.n	80073fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b02      	cmp	r3, #2
 8007304:	d003      	beq.n	800730e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800730a:	2b03      	cmp	r3, #3
 800730c:	d107      	bne.n	800731e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800730e:	4b3f      	ldr	r3, [pc, #252]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d109      	bne.n	800732e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e06f      	b.n	80073fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800731e:	4b3b      	ldr	r3, [pc, #236]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e067      	b.n	80073fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800732e:	4b37      	ldr	r3, [pc, #220]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f023 0203 	bic.w	r2, r3, #3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	4934      	ldr	r1, [pc, #208]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 800733c:	4313      	orrs	r3, r2
 800733e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007340:	f7fa fee6 	bl	8002110 <HAL_GetTick>
 8007344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007346:	e00a      	b.n	800735e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007348:	f7fa fee2 	bl	8002110 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f241 3288 	movw	r2, #5000	; 0x1388
 8007356:	4293      	cmp	r3, r2
 8007358:	d901      	bls.n	800735e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e04f      	b.n	80073fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800735e:	4b2b      	ldr	r3, [pc, #172]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 020c 	and.w	r2, r3, #12
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	429a      	cmp	r2, r3
 800736e:	d1eb      	bne.n	8007348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007370:	4b25      	ldr	r3, [pc, #148]	; (8007408 <HAL_RCC_ClockConfig+0x1b8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	429a      	cmp	r2, r3
 800737c:	d20c      	bcs.n	8007398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800737e:	4b22      	ldr	r3, [pc, #136]	; (8007408 <HAL_RCC_ClockConfig+0x1b8>)
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007386:	4b20      	ldr	r3, [pc, #128]	; (8007408 <HAL_RCC_ClockConfig+0x1b8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	429a      	cmp	r2, r3
 8007392:	d001      	beq.n	8007398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e032      	b.n	80073fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073a4:	4b19      	ldr	r3, [pc, #100]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	4916      	ldr	r1, [pc, #88]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d009      	beq.n	80073d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073c2:	4b12      	ldr	r3, [pc, #72]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	490e      	ldr	r1, [pc, #56]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073d6:	f000 f821 	bl	800741c <HAL_RCC_GetSysClockFreq>
 80073da:	4602      	mov	r2, r0
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <HAL_RCC_ClockConfig+0x1bc>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	091b      	lsrs	r3, r3, #4
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	490a      	ldr	r1, [pc, #40]	; (8007410 <HAL_RCC_ClockConfig+0x1c0>)
 80073e8:	5ccb      	ldrb	r3, [r1, r3]
 80073ea:	fa22 f303 	lsr.w	r3, r2, r3
 80073ee:	4a09      	ldr	r2, [pc, #36]	; (8007414 <HAL_RCC_ClockConfig+0x1c4>)
 80073f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <HAL_RCC_ClockConfig+0x1c8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fa fb5c 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	40023c00 	.word	0x40023c00
 800740c:	40023800 	.word	0x40023800
 8007410:	0800fe18 	.word	0x0800fe18
 8007414:	20000038 	.word	0x20000038
 8007418:	20000040 	.word	0x20000040

0800741c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800741c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	2300      	movs	r3, #0
 800742e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007434:	4b67      	ldr	r3, [pc, #412]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f003 030c 	and.w	r3, r3, #12
 800743c:	2b08      	cmp	r3, #8
 800743e:	d00d      	beq.n	800745c <HAL_RCC_GetSysClockFreq+0x40>
 8007440:	2b08      	cmp	r3, #8
 8007442:	f200 80bd 	bhi.w	80075c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <HAL_RCC_GetSysClockFreq+0x34>
 800744a:	2b04      	cmp	r3, #4
 800744c:	d003      	beq.n	8007456 <HAL_RCC_GetSysClockFreq+0x3a>
 800744e:	e0b7      	b.n	80075c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007450:	4b61      	ldr	r3, [pc, #388]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007452:	60bb      	str	r3, [r7, #8]
       break;
 8007454:	e0b7      	b.n	80075c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007456:	4b61      	ldr	r3, [pc, #388]	; (80075dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007458:	60bb      	str	r3, [r7, #8]
      break;
 800745a:	e0b4      	b.n	80075c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800745c:	4b5d      	ldr	r3, [pc, #372]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007464:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007466:	4b5b      	ldr	r3, [pc, #364]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d04d      	beq.n	800750e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007472:	4b58      	ldr	r3, [pc, #352]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	099b      	lsrs	r3, r3, #6
 8007478:	461a      	mov	r2, r3
 800747a:	f04f 0300 	mov.w	r3, #0
 800747e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007482:	f04f 0100 	mov.w	r1, #0
 8007486:	ea02 0800 	and.w	r8, r2, r0
 800748a:	ea03 0901 	and.w	r9, r3, r1
 800748e:	4640      	mov	r0, r8
 8007490:	4649      	mov	r1, r9
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	014b      	lsls	r3, r1, #5
 800749c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074a0:	0142      	lsls	r2, r0, #5
 80074a2:	4610      	mov	r0, r2
 80074a4:	4619      	mov	r1, r3
 80074a6:	ebb0 0008 	subs.w	r0, r0, r8
 80074aa:	eb61 0109 	sbc.w	r1, r1, r9
 80074ae:	f04f 0200 	mov.w	r2, #0
 80074b2:	f04f 0300 	mov.w	r3, #0
 80074b6:	018b      	lsls	r3, r1, #6
 80074b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074bc:	0182      	lsls	r2, r0, #6
 80074be:	1a12      	subs	r2, r2, r0
 80074c0:	eb63 0301 	sbc.w	r3, r3, r1
 80074c4:	f04f 0000 	mov.w	r0, #0
 80074c8:	f04f 0100 	mov.w	r1, #0
 80074cc:	00d9      	lsls	r1, r3, #3
 80074ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d2:	00d0      	lsls	r0, r2, #3
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	eb12 0208 	adds.w	r2, r2, r8
 80074dc:	eb43 0309 	adc.w	r3, r3, r9
 80074e0:	f04f 0000 	mov.w	r0, #0
 80074e4:	f04f 0100 	mov.w	r1, #0
 80074e8:	0259      	lsls	r1, r3, #9
 80074ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80074ee:	0250      	lsls	r0, r2, #9
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4610      	mov	r0, r2
 80074f6:	4619      	mov	r1, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	f7f8 fe62 	bl	80001c8 <__aeabi_uldivmod>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	4613      	mov	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e04a      	b.n	80075a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800750e:	4b31      	ldr	r3, [pc, #196]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	099b      	lsrs	r3, r3, #6
 8007514:	461a      	mov	r2, r3
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800751e:	f04f 0100 	mov.w	r1, #0
 8007522:	ea02 0400 	and.w	r4, r2, r0
 8007526:	ea03 0501 	and.w	r5, r3, r1
 800752a:	4620      	mov	r0, r4
 800752c:	4629      	mov	r1, r5
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	f04f 0300 	mov.w	r3, #0
 8007536:	014b      	lsls	r3, r1, #5
 8007538:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800753c:	0142      	lsls	r2, r0, #5
 800753e:	4610      	mov	r0, r2
 8007540:	4619      	mov	r1, r3
 8007542:	1b00      	subs	r0, r0, r4
 8007544:	eb61 0105 	sbc.w	r1, r1, r5
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	018b      	lsls	r3, r1, #6
 8007552:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007556:	0182      	lsls	r2, r0, #6
 8007558:	1a12      	subs	r2, r2, r0
 800755a:	eb63 0301 	sbc.w	r3, r3, r1
 800755e:	f04f 0000 	mov.w	r0, #0
 8007562:	f04f 0100 	mov.w	r1, #0
 8007566:	00d9      	lsls	r1, r3, #3
 8007568:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800756c:	00d0      	lsls	r0, r2, #3
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	1912      	adds	r2, r2, r4
 8007574:	eb45 0303 	adc.w	r3, r5, r3
 8007578:	f04f 0000 	mov.w	r0, #0
 800757c:	f04f 0100 	mov.w	r1, #0
 8007580:	0299      	lsls	r1, r3, #10
 8007582:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007586:	0290      	lsls	r0, r2, #10
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4610      	mov	r0, r2
 800758e:	4619      	mov	r1, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	461a      	mov	r2, r3
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	f7f8 fe16 	bl	80001c8 <__aeabi_uldivmod>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4613      	mov	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075a4:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	0c1b      	lsrs	r3, r3, #16
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	3301      	adds	r3, #1
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075bc:	60bb      	str	r3, [r7, #8]
      break;
 80075be:	e002      	b.n	80075c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80075c2:	60bb      	str	r3, [r7, #8]
      break;
 80075c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075c6:	68bb      	ldr	r3, [r7, #8]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80075d2:	bf00      	nop
 80075d4:	40023800 	.word	0x40023800
 80075d8:	00f42400 	.word	0x00f42400
 80075dc:	007a1200 	.word	0x007a1200

080075e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075e4:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80075e6:	681b      	ldr	r3, [r3, #0]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000038 	.word	0x20000038

080075f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075fc:	f7ff fff0 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 8007600:	4602      	mov	r2, r0
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	0a9b      	lsrs	r3, r3, #10
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	4903      	ldr	r1, [pc, #12]	; (800761c <HAL_RCC_GetPCLK1Freq+0x24>)
 800760e:	5ccb      	ldrb	r3, [r1, r3]
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40023800 	.word	0x40023800
 800761c:	0800fe28 	.word	0x0800fe28

08007620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007624:	f7ff ffdc 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 8007628:	4602      	mov	r2, r0
 800762a:	4b05      	ldr	r3, [pc, #20]	; (8007640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	0b5b      	lsrs	r3, r3, #13
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	4903      	ldr	r1, [pc, #12]	; (8007644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007636:	5ccb      	ldrb	r3, [r1, r3]
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800763c:	4618      	mov	r0, r3
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40023800 	.word	0x40023800
 8007644:	0800fe28 	.word	0x0800fe28

08007648 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	220f      	movs	r2, #15
 8007656:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007658:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 0203 	and.w	r2, r3, #3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	08db      	lsrs	r3, r3, #3
 8007682:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <HAL_RCC_GetClockConfig+0x60>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0207 	and.w	r2, r3, #7
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	601a      	str	r2, [r3, #0]
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800
 80076a8:	40023c00 	.word	0x40023c00

080076ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d105      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d035      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076d4:	4b62      	ldr	r3, [pc, #392]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076da:	f7fa fd19 	bl	8002110 <HAL_GetTick>
 80076de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076e0:	e008      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076e2:	f7fa fd15 	bl	8002110 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e0b0      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076f4:	4b5b      	ldr	r3, [pc, #364]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1f0      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	019a      	lsls	r2, r3, #6
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	071b      	lsls	r3, r3, #28
 800770c:	4955      	ldr	r1, [pc, #340]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007714:	4b52      	ldr	r3, [pc, #328]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007716:	2201      	movs	r2, #1
 8007718:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800771a:	f7fa fcf9 	bl	8002110 <HAL_GetTick>
 800771e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007720:	e008      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007722:	f7fa fcf5 	bl	8002110 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d901      	bls.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e090      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007734:	4b4b      	ldr	r3, [pc, #300]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0f0      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 8083 	beq.w	8007854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	4b44      	ldr	r3, [pc, #272]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	4a43      	ldr	r2, [pc, #268]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775c:	6413      	str	r3, [r2, #64]	; 0x40
 800775e:	4b41      	ldr	r3, [pc, #260]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800776a:	4b3f      	ldr	r3, [pc, #252]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a3e      	ldr	r2, [pc, #248]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007774:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007776:	f7fa fccb 	bl	8002110 <HAL_GetTick>
 800777a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800777c:	e008      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800777e:	f7fa fcc7 	bl	8002110 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e062      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007790:	4b35      	ldr	r3, [pc, #212]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0f0      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800779c:	4b31      	ldr	r3, [pc, #196]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800779e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d02f      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d028      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077ba:	4b2a      	ldr	r3, [pc, #168]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077c4:	4b29      	ldr	r3, [pc, #164]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077ca:	4b28      	ldr	r3, [pc, #160]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80077d0:	4a24      	ldr	r2, [pc, #144]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077d6:	4b23      	ldr	r3, [pc, #140]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d114      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80077e2:	f7fa fc95 	bl	8002110 <HAL_GetTick>
 80077e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077e8:	e00a      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077ea:	f7fa fc91 	bl	8002110 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d901      	bls.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e02a      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007800:	4b18      	ldr	r3, [pc, #96]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0ee      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007818:	d10d      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800781a:	4b12      	ldr	r3, [pc, #72]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800782a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782e:	490d      	ldr	r1, [pc, #52]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007830:	4313      	orrs	r3, r2
 8007832:	608b      	str	r3, [r1, #8]
 8007834:	e005      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007836:	4b0b      	ldr	r3, [pc, #44]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	4a0a      	ldr	r2, [pc, #40]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800783c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007840:	6093      	str	r3, [r2, #8]
 8007842:	4b08      	ldr	r3, [pc, #32]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007844:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800784e:	4905      	ldr	r1, [pc, #20]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007850:	4313      	orrs	r3, r2
 8007852:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	42470068 	.word	0x42470068
 8007864:	40023800 	.word	0x40023800
 8007868:	40007000 	.word	0x40007000
 800786c:	42470e40 	.word	0x42470e40

08007870 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2203      	movs	r2, #3
 800787c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800787e:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007884:	099b      	lsrs	r3, r3, #6
 8007886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800788e:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007894:	0f1b      	lsrs	r3, r3, #28
 8007896:	f003 0207 	and.w	r2, r3, #7
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800789e:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80078a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80078a8:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80078b8:	bf00      	nop
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	40023800 	.word	0x40023800

080078c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d13e      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80078e6:	4b23      	ldr	r3, [pc, #140]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d12f      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80078fc:	4b1e      	ldr	r3, [pc, #120]	; (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078fe:	617b      	str	r3, [r7, #20]
          break;
 8007900:	e02f      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007902:	4b1c      	ldr	r3, [pc, #112]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800790e:	d108      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007910:	4b18      	ldr	r3, [pc, #96]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007918:	4a18      	ldr	r2, [pc, #96]	; (800797c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800791a:	fbb2 f3f3 	udiv	r3, r2, r3
 800791e:	613b      	str	r3, [r7, #16]
 8007920:	e007      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007922:	4b14      	ldr	r3, [pc, #80]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800792a:	4a15      	ldr	r2, [pc, #84]	; (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800792c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007930:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007932:	4b10      	ldr	r3, [pc, #64]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007938:	099b      	lsrs	r3, r3, #6
 800793a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	fb02 f303 	mul.w	r3, r2, r3
 8007944:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007946:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800794c:	0f1b      	lsrs	r3, r3, #28
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	fbb2 f3f3 	udiv	r3, r2, r3
 8007958:	617b      	str	r3, [r7, #20]
          break;
 800795a:	e002      	b.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
          break;
 8007960:	bf00      	nop
        }
      }
      break;
 8007962:	bf00      	nop
    }
  }
  return frequency;
 8007964:	697b      	ldr	r3, [r7, #20]
}
 8007966:	4618      	mov	r0, r3
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40023800 	.word	0x40023800
 8007978:	00bb8000 	.word	0x00bb8000
 800797c:	007a1200 	.word	0x007a1200
 8007980:	00f42400 	.word	0x00f42400

08007984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e041      	b.n	8007a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f839 	bl	8007a22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3304      	adds	r3, #4
 80079c0:	4619      	mov	r1, r3
 80079c2:	4610      	mov	r0, r2
 80079c4:	f000 f9d8 	bl	8007d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
	...

08007a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d001      	beq.n	8007a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e04e      	b.n	8007aee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0201 	orr.w	r2, r2, #1
 8007a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a23      	ldr	r2, [pc, #140]	; (8007afc <HAL_TIM_Base_Start_IT+0xc4>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d022      	beq.n	8007ab8 <HAL_TIM_Base_Start_IT+0x80>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7a:	d01d      	beq.n	8007ab8 <HAL_TIM_Base_Start_IT+0x80>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a1f      	ldr	r2, [pc, #124]	; (8007b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d018      	beq.n	8007ab8 <HAL_TIM_Base_Start_IT+0x80>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a1e      	ldr	r2, [pc, #120]	; (8007b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d013      	beq.n	8007ab8 <HAL_TIM_Base_Start_IT+0x80>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a1c      	ldr	r2, [pc, #112]	; (8007b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00e      	beq.n	8007ab8 <HAL_TIM_Base_Start_IT+0x80>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1b      	ldr	r2, [pc, #108]	; (8007b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d009      	beq.n	8007ab8 <HAL_TIM_Base_Start_IT+0x80>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a19      	ldr	r2, [pc, #100]	; (8007b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d004      	beq.n	8007ab8 <HAL_TIM_Base_Start_IT+0x80>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a18      	ldr	r2, [pc, #96]	; (8007b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d111      	bne.n	8007adc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 0307 	and.w	r3, r3, #7
 8007ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b06      	cmp	r3, #6
 8007ac8:	d010      	beq.n	8007aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f042 0201 	orr.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	e007      	b.n	8007aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	40010000 	.word	0x40010000
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40000800 	.word	0x40000800
 8007b08:	40000c00 	.word	0x40000c00
 8007b0c:	40010400 	.word	0x40010400
 8007b10:	40014000 	.word	0x40014000
 8007b14:	40001800 	.word	0x40001800

08007b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d122      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d11b      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f06f 0202 	mvn.w	r2, #2
 8007b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f8ee 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 8007b60:	e005      	b.n	8007b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8e0 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f8f1 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d122      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d11b      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0204 	mvn.w	r2, #4
 8007b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f8c4 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 8007bb4:	e005      	b.n	8007bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f8b6 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8c7 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b08      	cmp	r3, #8
 8007bd4:	d122      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f003 0308 	and.w	r3, r3, #8
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d11b      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0208 	mvn.w	r2, #8
 8007bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2204      	movs	r2, #4
 8007bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f89a 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 8007c08:	e005      	b.n	8007c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f88c 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f89d 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	2b10      	cmp	r3, #16
 8007c28:	d122      	bne.n	8007c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b10      	cmp	r3, #16
 8007c36:	d11b      	bne.n	8007c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f06f 0210 	mvn.w	r2, #16
 8007c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2208      	movs	r2, #8
 8007c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f870 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 8007c5c:	e005      	b.n	8007c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f862 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f873 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d10e      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d107      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f06f 0201 	mvn.w	r2, #1
 8007c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7f9 fda4 	bl	80017e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca6:	2b80      	cmp	r3, #128	; 0x80
 8007ca8:	d10e      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb4:	2b80      	cmp	r3, #128	; 0x80
 8007cb6:	d107      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f902 	bl	8007ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	d10e      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d107      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f838 	bl	8007d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d10e      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d107      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0220 	mvn.w	r2, #32
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8cc 	bl	8007eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a40      	ldr	r2, [pc, #256]	; (8007e8c <TIM_Base_SetConfig+0x114>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d013      	beq.n	8007db8 <TIM_Base_SetConfig+0x40>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d96:	d00f      	beq.n	8007db8 <TIM_Base_SetConfig+0x40>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a3d      	ldr	r2, [pc, #244]	; (8007e90 <TIM_Base_SetConfig+0x118>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d00b      	beq.n	8007db8 <TIM_Base_SetConfig+0x40>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a3c      	ldr	r2, [pc, #240]	; (8007e94 <TIM_Base_SetConfig+0x11c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d007      	beq.n	8007db8 <TIM_Base_SetConfig+0x40>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a3b      	ldr	r2, [pc, #236]	; (8007e98 <TIM_Base_SetConfig+0x120>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d003      	beq.n	8007db8 <TIM_Base_SetConfig+0x40>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a3a      	ldr	r2, [pc, #232]	; (8007e9c <TIM_Base_SetConfig+0x124>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d108      	bne.n	8007dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a2f      	ldr	r2, [pc, #188]	; (8007e8c <TIM_Base_SetConfig+0x114>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d02b      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd8:	d027      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a2c      	ldr	r2, [pc, #176]	; (8007e90 <TIM_Base_SetConfig+0x118>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d023      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a2b      	ldr	r2, [pc, #172]	; (8007e94 <TIM_Base_SetConfig+0x11c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01f      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a2a      	ldr	r2, [pc, #168]	; (8007e98 <TIM_Base_SetConfig+0x120>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d01b      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a29      	ldr	r2, [pc, #164]	; (8007e9c <TIM_Base_SetConfig+0x124>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d017      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a28      	ldr	r2, [pc, #160]	; (8007ea0 <TIM_Base_SetConfig+0x128>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d013      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a27      	ldr	r2, [pc, #156]	; (8007ea4 <TIM_Base_SetConfig+0x12c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00f      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a26      	ldr	r2, [pc, #152]	; (8007ea8 <TIM_Base_SetConfig+0x130>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00b      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a25      	ldr	r2, [pc, #148]	; (8007eac <TIM_Base_SetConfig+0x134>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d007      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a24      	ldr	r2, [pc, #144]	; (8007eb0 <TIM_Base_SetConfig+0x138>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d003      	beq.n	8007e2a <TIM_Base_SetConfig+0xb2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a23      	ldr	r2, [pc, #140]	; (8007eb4 <TIM_Base_SetConfig+0x13c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d108      	bne.n	8007e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a0a      	ldr	r2, [pc, #40]	; (8007e8c <TIM_Base_SetConfig+0x114>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d003      	beq.n	8007e70 <TIM_Base_SetConfig+0xf8>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a0c      	ldr	r2, [pc, #48]	; (8007e9c <TIM_Base_SetConfig+0x124>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d103      	bne.n	8007e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	691a      	ldr	r2, [r3, #16]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	615a      	str	r2, [r3, #20]
}
 8007e7e:	bf00      	nop
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	40010000 	.word	0x40010000
 8007e90:	40000400 	.word	0x40000400
 8007e94:	40000800 	.word	0x40000800
 8007e98:	40000c00 	.word	0x40000c00
 8007e9c:	40010400 	.word	0x40010400
 8007ea0:	40014000 	.word	0x40014000
 8007ea4:	40014400 	.word	0x40014400
 8007ea8:	40014800 	.word	0x40014800
 8007eac:	40001800 	.word	0x40001800
 8007eb0:	40001c00 	.word	0x40001c00
 8007eb4:	40002000 	.word	0x40002000

08007eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	f107 001c 	add.w	r0, r7, #28
 8007eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d122      	bne.n	8007f3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d105      	bne.n	8007f32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9a0 	bl	8008278 <USB_CoreReset>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]
 8007f3c:	e01a      	b.n	8007f74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f994 	bl	8008278 <USB_CoreReset>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	639a      	str	r2, [r3, #56]	; 0x38
 8007f66:	e005      	b.n	8007f74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d10b      	bne.n	8007f92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f043 0206 	orr.w	r2, r3, #6
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f043 0220 	orr.w	r2, r3, #32
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f9e:	b004      	add	sp, #16
 8007fa0:	4770      	bx	lr

08007fa2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f043 0201 	orr.w	r2, r3, #1
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f023 0201 	bic.w	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008002:	78fb      	ldrb	r3, [r7, #3]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d115      	bne.n	8008034 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008014:	2001      	movs	r0, #1
 8008016:	f7fa f887 	bl	8002128 <HAL_Delay>
      ms++;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3301      	adds	r3, #1
 800801e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f91a 	bl	800825a <USB_GetMode>
 8008026:	4603      	mov	r3, r0
 8008028:	2b01      	cmp	r3, #1
 800802a:	d01e      	beq.n	800806a <USB_SetCurrentMode+0x84>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b31      	cmp	r3, #49	; 0x31
 8008030:	d9f0      	bls.n	8008014 <USB_SetCurrentMode+0x2e>
 8008032:	e01a      	b.n	800806a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d115      	bne.n	8008066 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008046:	2001      	movs	r0, #1
 8008048:	f7fa f86e 	bl	8002128 <HAL_Delay>
      ms++;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3301      	adds	r3, #1
 8008050:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f901 	bl	800825a <USB_GetMode>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <USB_SetCurrentMode+0x84>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b31      	cmp	r3, #49	; 0x31
 8008062:	d9f0      	bls.n	8008046 <USB_SetCurrentMode+0x60>
 8008064:	e001      	b.n	800806a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e005      	b.n	8008076 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b32      	cmp	r3, #50	; 0x32
 800806e:	d101      	bne.n	8008074 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e000      	b.n	8008076 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	019b      	lsls	r3, r3, #6
 8008092:	f043 0220 	orr.w	r2, r3, #32
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	4a08      	ldr	r2, [pc, #32]	; (80080c4 <USB_FlushTxFifo+0x44>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d901      	bls.n	80080aa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e006      	b.n	80080b8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d0f1      	beq.n	800809a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	00030d40 	.word	0x00030d40

080080c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2210      	movs	r2, #16
 80080d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3301      	adds	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	4a08      	ldr	r2, [pc, #32]	; (8008104 <USB_FlushRxFifo+0x3c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d901      	bls.n	80080ea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e006      	b.n	80080f8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0310 	and.w	r3, r3, #16
 80080f2:	2b10      	cmp	r3, #16
 80080f4:	d0f1      	beq.n	80080da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	00030d40 	.word	0x00030d40

08008108 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008108:	b480      	push	{r7}
 800810a:	b089      	sub	sp, #36	; 0x24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	4611      	mov	r1, r2
 8008114:	461a      	mov	r2, r3
 8008116:	460b      	mov	r3, r1
 8008118:	71fb      	strb	r3, [r7, #7]
 800811a:	4613      	mov	r3, r2
 800811c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008126:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800812a:	2b00      	cmp	r3, #0
 800812c:	d123      	bne.n	8008176 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800812e:	88bb      	ldrh	r3, [r7, #4]
 8008130:	3303      	adds	r3, #3
 8008132:	089b      	lsrs	r3, r3, #2
 8008134:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008136:	2300      	movs	r3, #0
 8008138:	61bb      	str	r3, [r7, #24]
 800813a:	e018      	b.n	800816e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	031a      	lsls	r2, r3, #12
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	4413      	add	r3, r2
 8008144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008148:	461a      	mov	r2, r3
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	3301      	adds	r3, #1
 8008154:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	3301      	adds	r3, #1
 800815a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	3301      	adds	r3, #1
 8008160:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	3301      	adds	r3, #1
 8008166:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	3301      	adds	r3, #1
 800816c:	61bb      	str	r3, [r7, #24]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	429a      	cmp	r2, r3
 8008174:	d3e2      	bcc.n	800813c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3724      	adds	r7, #36	; 0x24
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008184:	b480      	push	{r7}
 8008186:	b08b      	sub	sp, #44	; 0x2c
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	089b      	lsrs	r3, r3, #2
 800819e:	b29b      	uxth	r3, r3
 80081a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80081a2:	88fb      	ldrh	r3, [r7, #6]
 80081a4:	f003 0303 	and.w	r3, r3, #3
 80081a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80081aa:	2300      	movs	r3, #0
 80081ac:	623b      	str	r3, [r7, #32]
 80081ae:	e014      	b.n	80081da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	3301      	adds	r3, #1
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	3301      	adds	r3, #1
 80081c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	3301      	adds	r3, #1
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	3301      	adds	r3, #1
 80081d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	3301      	adds	r3, #1
 80081d8:	623b      	str	r3, [r7, #32]
 80081da:	6a3a      	ldr	r2, [r7, #32]
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d3e6      	bcc.n	80081b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80081e2:	8bfb      	ldrh	r3, [r7, #30]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01e      	beq.n	8008226 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f2:	461a      	mov	r2, r3
 80081f4:	f107 0310 	add.w	r3, r7, #16
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	fa22 f303 	lsr.w	r3, r2, r3
 8008208:	b2da      	uxtb	r2, r3
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	701a      	strb	r2, [r3, #0]
      i++;
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	3301      	adds	r3, #1
 8008212:	623b      	str	r3, [r7, #32]
      pDest++;
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	3301      	adds	r3, #1
 8008218:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800821a:	8bfb      	ldrh	r3, [r7, #30]
 800821c:	3b01      	subs	r3, #1
 800821e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008220:	8bfb      	ldrh	r3, [r7, #30]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1ea      	bne.n	80081fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008228:	4618      	mov	r0, r3
 800822a:	372c      	adds	r7, #44	; 0x2c
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	695b      	ldr	r3, [r3, #20]
 8008240:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4013      	ands	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800824c:	68fb      	ldr	r3, [r7, #12]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	f003 0301 	and.w	r3, r3, #1
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
	...

08008278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	4a13      	ldr	r2, [pc, #76]	; (80082d8 <USB_CoreReset+0x60>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d901      	bls.n	8008294 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e01a      	b.n	80082ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	daf3      	bge.n	8008284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	f043 0201 	orr.w	r2, r3, #1
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3301      	adds	r3, #1
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	4a09      	ldr	r2, [pc, #36]	; (80082d8 <USB_CoreReset+0x60>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d901      	bls.n	80082bc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e006      	b.n	80082ca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d0f1      	beq.n	80082ac <USB_CoreReset+0x34>

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	00030d40 	.word	0x00030d40

080082dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082dc:	b084      	sub	sp, #16
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	f107 001c 	add.w	r0, r7, #28
 80082ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082f8:	461a      	mov	r2, r3
 80082fa:	2300      	movs	r3, #0
 80082fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008302:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832a:	2b00      	cmp	r3, #0
 800832c:	d018      	beq.n	8008360 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	2b01      	cmp	r3, #1
 8008332:	d10a      	bne.n	800834a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008342:	f043 0304 	orr.w	r3, r3, #4
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	e014      	b.n	8008374 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008358:	f023 0304 	bic.w	r3, r3, #4
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	e009      	b.n	8008374 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800836e:	f023 0304 	bic.w	r3, r3, #4
 8008372:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008374:	2110      	movs	r1, #16
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff fe82 	bl	8008080 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff fea3 	bl	80080c8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	e015      	b.n	80083b4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4413      	add	r3, r2
 8008390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008394:	461a      	mov	r2, r3
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a8:	461a      	mov	r2, r3
 80083aa:	2300      	movs	r3, #0
 80083ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d3e5      	bcc.n	8008388 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f04f 32ff 	mov.w	r2, #4294967295
 80083c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00b      	beq.n	80083ee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a13      	ldr	r2, [pc, #76]	; (8008430 <USB_HostInit+0x154>)
 80083e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a13      	ldr	r2, [pc, #76]	; (8008434 <USB_HostInit+0x158>)
 80083e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80083ec:	e009      	b.n	8008402 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2280      	movs	r2, #128	; 0x80
 80083f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a10      	ldr	r2, [pc, #64]	; (8008438 <USB_HostInit+0x15c>)
 80083f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a0f      	ldr	r2, [pc, #60]	; (800843c <USB_HostInit+0x160>)
 80083fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	2b00      	cmp	r3, #0
 8008406:	d105      	bne.n	8008414 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	f043 0210 	orr.w	r2, r3, #16
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	699a      	ldr	r2, [r3, #24]
 8008418:	4b09      	ldr	r3, [pc, #36]	; (8008440 <USB_HostInit+0x164>)
 800841a:	4313      	orrs	r3, r2
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800842c:	b004      	add	sp, #16
 800842e:	4770      	bx	lr
 8008430:	01000200 	.word	0x01000200
 8008434:	00e00300 	.word	0x00e00300
 8008438:	00600080 	.word	0x00600080
 800843c:	004000e0 	.word	0x004000e0
 8008440:	a3200008 	.word	0xa3200008

08008444 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008462:	f023 0303 	bic.w	r3, r3, #3
 8008466:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	f003 0303 	and.w	r3, r3, #3
 8008476:	68f9      	ldr	r1, [r7, #12]
 8008478:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800847c:	4313      	orrs	r3, r2
 800847e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d107      	bne.n	8008496 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800848c:	461a      	mov	r2, r3
 800848e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008492:	6053      	str	r3, [r2, #4]
 8008494:	e009      	b.n	80084aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008496:	78fb      	ldrb	r3, [r7, #3]
 8008498:	2b02      	cmp	r3, #2
 800849a:	d106      	bne.n	80084aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084a2:	461a      	mov	r2, r3
 80084a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80084a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80084d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80084e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80084e8:	2064      	movs	r0, #100	; 0x64
 80084ea:	f7f9 fe1d 	bl	8002128 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80084f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80084fc:	200a      	movs	r0, #10
 80084fe:	f7f9 fe13 	bl	8002128 <HAL_Delay>

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008530:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d109      	bne.n	8008550 <USB_DriveVbus+0x44>
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d106      	bne.n	8008550 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800854a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800854e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800855a:	d109      	bne.n	8008570 <USB_DriveVbus+0x64>
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d106      	bne.n	8008570 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800856a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800856e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	0c5b      	lsrs	r3, r3, #17
 800859c:	f003 0303 	and.w	r3, r3, #3
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	b29b      	uxth	r3, r3
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
	...

080085d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b088      	sub	sp, #32
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	4608      	mov	r0, r1
 80085da:	4611      	mov	r1, r2
 80085dc:	461a      	mov	r2, r3
 80085de:	4603      	mov	r3, r0
 80085e0:	70fb      	strb	r3, [r7, #3]
 80085e2:	460b      	mov	r3, r1
 80085e4:	70bb      	strb	r3, [r7, #2]
 80085e6:	4613      	mov	r3, r2
 80085e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fe:	461a      	mov	r2, r3
 8008600:	f04f 33ff 	mov.w	r3, #4294967295
 8008604:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008606:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800860a:	2b03      	cmp	r3, #3
 800860c:	d87e      	bhi.n	800870c <USB_HC_Init+0x13c>
 800860e:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <USB_HC_Init+0x44>)
 8008610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008614:	08008625 	.word	0x08008625
 8008618:	080086cf 	.word	0x080086cf
 800861c:	08008625 	.word	0x08008625
 8008620:	08008691 	.word	0x08008691
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	4413      	add	r3, r2
 800862c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008630:	461a      	mov	r2, r3
 8008632:	f240 439d 	movw	r3, #1181	; 0x49d
 8008636:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008638:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800863c:	2b00      	cmp	r3, #0
 800863e:	da10      	bge.n	8008662 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	4413      	add	r3, r2
 8008648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	78fa      	ldrb	r2, [r7, #3]
 8008650:	0151      	lsls	r1, r2, #5
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	440a      	add	r2, r1
 8008656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800865a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800865e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008660:	e057      	b.n	8008712 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866a:	2b00      	cmp	r3, #0
 800866c:	d051      	beq.n	8008712 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800866e:	78fb      	ldrb	r3, [r7, #3]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	4413      	add	r3, r2
 8008676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	78fa      	ldrb	r2, [r7, #3]
 800867e:	0151      	lsls	r1, r2, #5
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	440a      	add	r2, r1
 8008684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008688:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800868c:	60d3      	str	r3, [r2, #12]
      break;
 800868e:	e040      	b.n	8008712 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	4413      	add	r3, r2
 8008698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869c:	461a      	mov	r2, r3
 800869e:	f240 639d 	movw	r3, #1693	; 0x69d
 80086a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80086a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da34      	bge.n	8008716 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80086cc:	e023      	b.n	8008716 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086da:	461a      	mov	r2, r3
 80086dc:	f240 2325 	movw	r3, #549	; 0x225
 80086e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80086e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da17      	bge.n	800871a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	78fa      	ldrb	r2, [r7, #3]
 80086fa:	0151      	lsls	r1, r2, #5
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	440a      	add	r2, r1
 8008700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008704:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008708:	60d3      	str	r3, [r2, #12]
      }
      break;
 800870a:	e006      	b.n	800871a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	77fb      	strb	r3, [r7, #31]
      break;
 8008710:	e004      	b.n	800871c <USB_HC_Init+0x14c>
      break;
 8008712:	bf00      	nop
 8008714:	e002      	b.n	800871c <USB_HC_Init+0x14c>
      break;
 8008716:	bf00      	nop
 8008718:	e000      	b.n	800871c <USB_HC_Init+0x14c>
      break;
 800871a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008722:	699a      	ldr	r2, [r3, #24]
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	f003 030f 	and.w	r3, r3, #15
 800872a:	2101      	movs	r1, #1
 800872c:	fa01 f303 	lsl.w	r3, r1, r3
 8008730:	6939      	ldr	r1, [r7, #16]
 8008732:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008736:	4313      	orrs	r3, r2
 8008738:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008746:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800874a:	2b00      	cmp	r3, #0
 800874c:	da03      	bge.n	8008756 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800874e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	e001      	b.n	800875a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff ff0f 	bl	800857e <USB_GetHostSpeed>
 8008760:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008762:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008766:	2b02      	cmp	r3, #2
 8008768:	d106      	bne.n	8008778 <USB_HC_Init+0x1a8>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d003      	beq.n	8008778 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008770:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	e001      	b.n	800877c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800877c:	787b      	ldrb	r3, [r7, #1]
 800877e:	059b      	lsls	r3, r3, #22
 8008780:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008784:	78bb      	ldrb	r3, [r7, #2]
 8008786:	02db      	lsls	r3, r3, #11
 8008788:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800878c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800878e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008792:	049b      	lsls	r3, r3, #18
 8008794:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008798:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800879a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800879c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80087a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	0159      	lsls	r1, r3, #5
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	440b      	add	r3, r1
 80087ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087b2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087b8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80087ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d10f      	bne.n	80087e2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	78fa      	ldrb	r2, [r7, #3]
 80087d2:	0151      	lsls	r1, r2, #5
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	440a      	add	r2, r1
 80087d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80087e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3720      	adds	r7, #32
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08c      	sub	sp, #48	; 0x30
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4613      	mov	r3, r2
 80087f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008808:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008812:	2b00      	cmp	r3, #0
 8008814:	d02d      	beq.n	8008872 <USB_HC_StartXfer+0x86>
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	791b      	ldrb	r3, [r3, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d129      	bne.n	8008872 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d117      	bne.n	8008854 <USB_HC_StartXfer+0x68>
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	79db      	ldrb	r3, [r3, #7]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <USB_HC_StartXfer+0x48>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	79db      	ldrb	r3, [r3, #7]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d10f      	bne.n	8008854 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	4413      	add	r3, r2
 800883c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	69fa      	ldr	r2, [r7, #28]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	6a3a      	ldr	r2, [r7, #32]
 8008848:	440a      	add	r2, r1
 800884a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800884e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008852:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <USB_HC_StartXfer+0x86>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	795b      	ldrb	r3, [r3, #5]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d107      	bne.n	8008872 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	785b      	ldrb	r3, [r3, #1]
 8008866:	4619      	mov	r1, r3
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 fa2f 	bl	8008ccc <USB_DoPing>
      return HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	e0f8      	b.n	8008a64 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d018      	beq.n	80088ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	8912      	ldrh	r2, [r2, #8]
 8008882:	4413      	add	r3, r2
 8008884:	3b01      	subs	r3, #1
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	8912      	ldrh	r2, [r2, #8]
 800888a:	fbb3 f3f2 	udiv	r3, r3, r2
 800888e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008890:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008892:	8b7b      	ldrh	r3, [r7, #26]
 8008894:	429a      	cmp	r2, r3
 8008896:	d90b      	bls.n	80088b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008898:	8b7b      	ldrh	r3, [r7, #26]
 800889a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800889c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	8912      	ldrh	r2, [r2, #8]
 80088a2:	fb02 f203 	mul.w	r2, r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	611a      	str	r2, [r3, #16]
 80088aa:	e001      	b.n	80088b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80088ac:	2301      	movs	r3, #1
 80088ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	78db      	ldrb	r3, [r3, #3]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d007      	beq.n	80088c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80088b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	8912      	ldrh	r2, [r2, #8]
 80088be:	fb02 f203 	mul.w	r2, r2, r3
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	611a      	str	r2, [r3, #16]
 80088c6:	e003      	b.n	80088d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	695a      	ldr	r2, [r3, #20]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088da:	04d9      	lsls	r1, r3, #19
 80088dc:	4b63      	ldr	r3, [pc, #396]	; (8008a6c <USB_HC_StartXfer+0x280>)
 80088de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	7a9b      	ldrb	r3, [r3, #10]
 80088e6:	075b      	lsls	r3, r3, #29
 80088e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088ec:	69f9      	ldr	r1, [r7, #28]
 80088ee:	0148      	lsls	r0, r1, #5
 80088f0:	6a39      	ldr	r1, [r7, #32]
 80088f2:	4401      	add	r1, r0
 80088f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d009      	beq.n	8008916 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	68d9      	ldr	r1, [r3, #12]
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	4413      	add	r3, r2
 800890e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008912:	460a      	mov	r2, r1
 8008914:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	bf0c      	ite	eq
 8008926:	2301      	moveq	r3, #1
 8008928:	2300      	movne	r3, #0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	4413      	add	r3, r2
 8008936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	6a3a      	ldr	r2, [r7, #32]
 8008942:	440a      	add	r2, r1
 8008944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008948:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800894c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	4413      	add	r3, r2
 8008956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	7e7b      	ldrb	r3, [r7, #25]
 800895e:	075b      	lsls	r3, r3, #29
 8008960:	69f9      	ldr	r1, [r7, #28]
 8008962:	0148      	lsls	r0, r1, #5
 8008964:	6a39      	ldr	r1, [r7, #32]
 8008966:	4401      	add	r1, r0
 8008968:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800896c:	4313      	orrs	r3, r2
 800896e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	4413      	add	r3, r2
 8008978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008986:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	78db      	ldrb	r3, [r3, #3]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d004      	beq.n	800899a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	e003      	b.n	80089a2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089a0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089a8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b6:	461a      	mov	r2, r3
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	e04e      	b.n	8008a64 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	78db      	ldrb	r3, [r3, #3]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d149      	bne.n	8008a62 <USB_HC_StartXfer+0x276>
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d045      	beq.n	8008a62 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	79db      	ldrb	r3, [r3, #7]
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d830      	bhi.n	8008a40 <USB_HC_StartXfer+0x254>
 80089de:	a201      	add	r2, pc, #4	; (adr r2, 80089e4 <USB_HC_StartXfer+0x1f8>)
 80089e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e4:	080089f5 	.word	0x080089f5
 80089e8:	08008a19 	.word	0x08008a19
 80089ec:	080089f5 	.word	0x080089f5
 80089f0:	08008a19 	.word	0x08008a19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	3303      	adds	r3, #3
 80089fa:	089b      	lsrs	r3, r3, #2
 80089fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80089fe:	8afa      	ldrh	r2, [r7, #22]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d91c      	bls.n	8008a44 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	f043 0220 	orr.w	r2, r3, #32
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a16:	e015      	b.n	8008a44 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	3303      	adds	r3, #3
 8008a1e:	089b      	lsrs	r3, r3, #2
 8008a20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008a22:	8afa      	ldrh	r2, [r7, #22]
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d90a      	bls.n	8008a48 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a3e:	e003      	b.n	8008a48 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008a40:	bf00      	nop
 8008a42:	e002      	b.n	8008a4a <USB_HC_StartXfer+0x25e>
        break;
 8008a44:	bf00      	nop
 8008a46:	e000      	b.n	8008a4a <USB_HC_StartXfer+0x25e>
        break;
 8008a48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	68d9      	ldr	r1, [r3, #12]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	785a      	ldrb	r2, [r3, #1]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	2000      	movs	r0, #0
 8008a5a:	9000      	str	r0, [sp, #0]
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f7ff fb53 	bl	8008108 <USB_WritePacket>
  }

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3728      	adds	r7, #40	; 0x28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	1ff80000 	.word	0x1ff80000

08008a70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	b29b      	uxth	r3, r3
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b089      	sub	sp, #36	; 0x24
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	0c9b      	lsrs	r3, r3, #18
 8008aba:	f003 0303 	and.w	r3, r3, #3
 8008abe:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	0fdb      	lsrs	r3, r3, #31
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 0320 	and.w	r3, r3, #32
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	d104      	bne.n	8008aec <USB_HC_Halt+0x5a>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e0e8      	b.n	8008cbe <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <USB_HC_Halt+0x66>
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d173      	bne.n	8008be0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b16:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f003 0320 	and.w	r3, r3, #32
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f040 80cb 	bne.w	8008cbc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d143      	bne.n	8008bba <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	0151      	lsls	r1, r2, #5
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	440a      	add	r2, r1
 8008b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b50:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b70:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b90:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	3301      	adds	r3, #1
 8008b96:	61fb      	str	r3, [r7, #28]
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b9e:	d81d      	bhi.n	8008bdc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bb6:	d0ec      	beq.n	8008b92 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bb8:	e080      	b.n	8008cbc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	0151      	lsls	r1, r2, #5
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	440a      	add	r2, r1
 8008bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bd8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bda:	e06f      	b.n	8008cbc <USB_HC_Halt+0x22a>
            break;
 8008bdc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bde:	e06d      	b.n	8008cbc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	0151      	lsls	r1, r2, #5
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	440a      	add	r2, r1
 8008bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bfe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d143      	bne.n	8008c98 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	0151      	lsls	r1, r2, #5
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	440a      	add	r2, r1
 8008c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	0151      	lsls	r1, r2, #5
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	440a      	add	r2, r1
 8008c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c4e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	0151      	lsls	r1, r2, #5
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	440a      	add	r2, r1
 8008c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c6e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	3301      	adds	r3, #1
 8008c74:	61fb      	str	r3, [r7, #28]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c7c:	d81d      	bhi.n	8008cba <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c94:	d0ec      	beq.n	8008c70 <USB_HC_Halt+0x1de>
 8008c96:	e011      	b.n	8008cbc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	0151      	lsls	r1, r2, #5
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	440a      	add	r2, r1
 8008cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	e000      	b.n	8008cbc <USB_HC_Halt+0x22a>
          break;
 8008cba:	bf00      	nop
    }
  }

  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3724      	adds	r7, #36	; 0x24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	04da      	lsls	r2, r3, #19
 8008ce8:	4b15      	ldr	r3, [pc, #84]	; (8008d40 <USB_DoPing+0x74>)
 8008cea:	4013      	ands	r3, r2
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cfc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d14:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d1c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	1ff80000 	.word	0x1ff80000

08008d44 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff f935 	bl	8007fc4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008d5a:	2110      	movs	r1, #16
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7ff f98f 	bl	8008080 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff f9b0 	bl	80080c8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008d68:	2300      	movs	r3, #0
 8008d6a:	613b      	str	r3, [r7, #16]
 8008d6c:	e01f      	b.n	8008dae <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d84:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d8c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d94:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da2:	461a      	mov	r2, r3
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	3301      	adds	r3, #1
 8008dac:	613b      	str	r3, [r7, #16]
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b0f      	cmp	r3, #15
 8008db2:	d9dc      	bls.n	8008d6e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008db4:	2300      	movs	r3, #0
 8008db6:	613b      	str	r3, [r7, #16]
 8008db8:	e034      	b.n	8008e24 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dd0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dd8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008de0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dee:	461a      	mov	r2, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	3301      	adds	r3, #1
 8008df8:	617b      	str	r3, [r7, #20]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e00:	d80c      	bhi.n	8008e1c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e18:	d0ec      	beq.n	8008df4 <USB_StopHost+0xb0>
 8008e1a:	e000      	b.n	8008e1e <USB_StopHost+0xda>
        break;
 8008e1c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3301      	adds	r3, #1
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b0f      	cmp	r3, #15
 8008e28:	d9c7      	bls.n	8008dba <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e30:	461a      	mov	r2, r3
 8008e32:	f04f 33ff 	mov.w	r3, #4294967295
 8008e36:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e3e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff f8ae 	bl	8007fa2 <USB_EnableGlobalInt>

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3718      	adds	r7, #24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008e54:	4904      	ldr	r1, [pc, #16]	; (8008e68 <MX_FATFS_Init+0x18>)
 8008e56:	4805      	ldr	r0, [pc, #20]	; (8008e6c <MX_FATFS_Init+0x1c>)
 8008e58:	f006 fa28 	bl	800f2ac <FATFS_LinkDriver>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	461a      	mov	r2, r3
 8008e60:	4b03      	ldr	r3, [pc, #12]	; (8008e70 <MX_FATFS_Init+0x20>)
 8008e62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008e64:	bf00      	nop
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	200020c0 	.word	0x200020c0
 8008e6c:	0800fe38 	.word	0x0800fe38
 8008e70:	20002528 	.word	0x20002528

08008e74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008e78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	4619      	mov	r1, r3
 8008eae:	4808      	ldr	r0, [pc, #32]	; (8008ed0 <USBH_status+0x34>)
 8008eb0:	f000 fe1a 	bl	8009ae8 <USBH_MSC_UnitIsReady>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <USBH_status+0x24>
  {
    res = RES_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73fb      	strb	r3, [r7, #15]
 8008ebe:	e001      	b.n	8008ec4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	2000252c 	.word	0x2000252c

08008ed4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b094      	sub	sp, #80	; 0x50
 8008ed8:	af02      	add	r7, sp, #8
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008eea:	7bf9      	ldrb	r1, [r7, #15]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	4813      	ldr	r0, [pc, #76]	; (8008f44 <USBH_read+0x70>)
 8008ef6:	f000 fe41 	bl	8009b7c <USBH_MSC_Read>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d103      	bne.n	8008f08 <USBH_read+0x34>
  {
    res = RES_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008f06:	e017      	b.n	8008f38 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008f08:	f107 0210 	add.w	r2, r7, #16
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	480c      	ldr	r0, [pc, #48]	; (8008f44 <USBH_read+0x70>)
 8008f12:	f000 fe0f 	bl	8009b34 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008f16:	7f7b      	ldrb	r3, [r7, #29]
 8008f18:	2b3a      	cmp	r3, #58	; 0x3a
 8008f1a:	d005      	beq.n	8008f28 <USBH_read+0x54>
 8008f1c:	2b3a      	cmp	r3, #58	; 0x3a
 8008f1e:	dc07      	bgt.n	8008f30 <USBH_read+0x5c>
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d001      	beq.n	8008f28 <USBH_read+0x54>
 8008f24:	2b28      	cmp	r3, #40	; 0x28
 8008f26:	d103      	bne.n	8008f30 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008f2e:	e003      	b.n	8008f38 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008f36:	bf00      	nop
    }
  }

  return res;
 8008f38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3748      	adds	r7, #72	; 0x48
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	2000252c 	.word	0x2000252c

08008f48 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b094      	sub	sp, #80	; 0x50
 8008f4c:	af02      	add	r7, sp, #8
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	607a      	str	r2, [r7, #4]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008f5e:	7bf9      	ldrb	r1, [r7, #15]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	4817      	ldr	r0, [pc, #92]	; (8008fc8 <USBH_write+0x80>)
 8008f6a:	f000 fe70 	bl	8009c4e <USBH_MSC_Write>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d103      	bne.n	8008f7c <USBH_write+0x34>
  {
    res = RES_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008f7a:	e01f      	b.n	8008fbc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008f7c:	f107 0210 	add.w	r2, r7, #16
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	4619      	mov	r1, r3
 8008f84:	4810      	ldr	r0, [pc, #64]	; (8008fc8 <USBH_write+0x80>)
 8008f86:	f000 fdd5 	bl	8009b34 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008f8a:	7f7b      	ldrb	r3, [r7, #29]
 8008f8c:	2b3a      	cmp	r3, #58	; 0x3a
 8008f8e:	d00d      	beq.n	8008fac <USBH_write+0x64>
 8008f90:	2b3a      	cmp	r3, #58	; 0x3a
 8008f92:	dc0f      	bgt.n	8008fb4 <USBH_write+0x6c>
 8008f94:	2b28      	cmp	r3, #40	; 0x28
 8008f96:	d009      	beq.n	8008fac <USBH_write+0x64>
 8008f98:	2b28      	cmp	r3, #40	; 0x28
 8008f9a:	dc0b      	bgt.n	8008fb4 <USBH_write+0x6c>
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d005      	beq.n	8008fac <USBH_write+0x64>
 8008fa0:	2b27      	cmp	r3, #39	; 0x27
 8008fa2:	d107      	bne.n	8008fb4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008faa:	e007      	b.n	8008fbc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008fac:	2303      	movs	r3, #3
 8008fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008fb2:	e003      	b.n	8008fbc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008fba:	bf00      	nop
    }
  }

  return res;
 8008fbc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3748      	adds	r7, #72	; 0x48
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	2000252c 	.word	0x2000252c

08008fcc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b090      	sub	sp, #64	; 0x40
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	603a      	str	r2, [r7, #0]
 8008fd6:	71fb      	strb	r3, [r7, #7]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008fe2:	79bb      	ldrb	r3, [r7, #6]
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d852      	bhi.n	800908e <USBH_ioctl+0xc2>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <USBH_ioctl+0x24>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009001 	.word	0x08009001
 8008ff4:	08009009 	.word	0x08009009
 8008ff8:	08009033 	.word	0x08009033
 8008ffc:	0800905f 	.word	0x0800905f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009006:	e045      	b.n	8009094 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009008:	f107 0208 	add.w	r2, r7, #8
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	4619      	mov	r1, r3
 8009010:	4823      	ldr	r0, [pc, #140]	; (80090a0 <USBH_ioctl+0xd4>)
 8009012:	f000 fd8f 	bl	8009b34 <USBH_MSC_GetLUNInfo>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d106      	bne.n	800902a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009028:	e034      	b.n	8009094 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009030:	e030      	b.n	8009094 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009032:	f107 0208 	add.w	r2, r7, #8
 8009036:	79fb      	ldrb	r3, [r7, #7]
 8009038:	4619      	mov	r1, r3
 800903a:	4819      	ldr	r0, [pc, #100]	; (80090a0 <USBH_ioctl+0xd4>)
 800903c:	f000 fd7a 	bl	8009b34 <USBH_MSC_GetLUNInfo>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d107      	bne.n	8009056 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009046:	8a3b      	ldrh	r3, [r7, #16]
 8009048:	461a      	mov	r2, r3
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009054:	e01e      	b.n	8009094 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800905c:	e01a      	b.n	8009094 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800905e:	f107 0208 	add.w	r2, r7, #8
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	4619      	mov	r1, r3
 8009066:	480e      	ldr	r0, [pc, #56]	; (80090a0 <USBH_ioctl+0xd4>)
 8009068:	f000 fd64 	bl	8009b34 <USBH_MSC_GetLUNInfo>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009072:	8a3b      	ldrh	r3, [r7, #16]
 8009074:	0a5b      	lsrs	r3, r3, #9
 8009076:	b29b      	uxth	r3, r3
 8009078:	461a      	mov	r2, r3
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009084:	e006      	b.n	8009094 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800908c:	e002      	b.n	8009094 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800908e:	2304      	movs	r3, #4
 8009090:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009094:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009098:	4618      	mov	r0, r3
 800909a:	3740      	adds	r7, #64	; 0x40
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	2000252c 	.word	0x2000252c

080090a4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80090a4:	b590      	push	{r4, r7, lr}
 80090a6:	b089      	sub	sp, #36	; 0x24
 80090a8:	af04      	add	r7, sp, #16
 80090aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b2:	7919      	ldrb	r1, [r3, #4]
 80090b4:	2350      	movs	r3, #80	; 0x50
 80090b6:	2206      	movs	r2, #6
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 fc53 	bl	800a964 <USBH_FindInterface>
 80090be:	4603      	mov	r3, r0
 80090c0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
 80090c4:	2bff      	cmp	r3, #255	; 0xff
 80090c6:	d002      	beq.n	80090ce <USBH_MSC_InterfaceInit+0x2a>
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d901      	bls.n	80090d2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80090ce:	2302      	movs	r3, #2
 80090d0:	e0ef      	b.n	80092b2 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 fc28 	bl	800a92c <USBH_SelectInterface>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80090e6:	2302      	movs	r3, #2
 80090e8:	e0e3      	b.n	80092b2 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80090f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80090f4:	f006 fd12 	bl	800fb1c <malloc>
 80090f8:	4603      	mov	r3, r0
 80090fa:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800910c:	2302      	movs	r3, #2
 800910e:	e0d0      	b.n	80092b2 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009114:	2100      	movs	r1, #0
 8009116:	68b8      	ldr	r0, [r7, #8]
 8009118:	f006 fd1e 	bl	800fb58 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	211a      	movs	r1, #26
 8009122:	fb01 f303 	mul.w	r3, r1, r3
 8009126:	4413      	add	r3, r2
 8009128:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	b25b      	sxtb	r3, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	da16      	bge.n	8009162 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	211a      	movs	r1, #26
 800913a:	fb01 f303 	mul.w	r3, r1, r3
 800913e:	4413      	add	r3, r2
 8009140:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009144:	781a      	ldrb	r2, [r3, #0]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	211a      	movs	r1, #26
 8009150:	fb01 f303 	mul.w	r3, r1, r3
 8009154:	4413      	add	r3, r2
 8009156:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800915a:	881a      	ldrh	r2, [r3, #0]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	815a      	strh	r2, [r3, #10]
 8009160:	e015      	b.n	800918e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	211a      	movs	r1, #26
 8009168:	fb01 f303 	mul.w	r3, r1, r3
 800916c:	4413      	add	r3, r2
 800916e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009172:	781a      	ldrb	r2, [r3, #0]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	211a      	movs	r1, #26
 800917e:	fb01 f303 	mul.w	r3, r1, r3
 8009182:	4413      	add	r3, r2
 8009184:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009188:	881a      	ldrh	r2, [r3, #0]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	211a      	movs	r1, #26
 8009194:	fb01 f303 	mul.w	r3, r1, r3
 8009198:	4413      	add	r3, r2
 800919a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	b25b      	sxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	da16      	bge.n	80091d4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	211a      	movs	r1, #26
 80091ac:	fb01 f303 	mul.w	r3, r1, r3
 80091b0:	4413      	add	r3, r2
 80091b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091b6:	781a      	ldrb	r2, [r3, #0]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	211a      	movs	r1, #26
 80091c2:	fb01 f303 	mul.w	r3, r1, r3
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80091cc:	881a      	ldrh	r2, [r3, #0]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	815a      	strh	r2, [r3, #10]
 80091d2:	e015      	b.n	8009200 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	211a      	movs	r1, #26
 80091da:	fb01 f303 	mul.w	r3, r1, r3
 80091de:	4413      	add	r3, r2
 80091e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091e4:	781a      	ldrb	r2, [r3, #0]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	211a      	movs	r1, #26
 80091f0:	fb01 f303 	mul.w	r3, r1, r3
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80091fa:	881a      	ldrh	r2, [r3, #0]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2200      	movs	r2, #0
 8009204:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2200      	movs	r2, #0
 800920a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2200      	movs	r2, #0
 8009210:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	799b      	ldrb	r3, [r3, #6]
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f002 fdc4 	bl	800bda6 <USBH_AllocPipe>
 800921e:	4603      	mov	r3, r0
 8009220:	461a      	mov	r2, r3
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	79db      	ldrb	r3, [r3, #7]
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f002 fdba 	bl	800bda6 <USBH_AllocPipe>
 8009232:	4603      	mov	r3, r0
 8009234:	461a      	mov	r2, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fdac 	bl	8009d98 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	7959      	ldrb	r1, [r3, #5]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	7998      	ldrb	r0, [r3, #6]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	8912      	ldrh	r2, [r2, #8]
 8009258:	9202      	str	r2, [sp, #8]
 800925a:	2202      	movs	r2, #2
 800925c:	9201      	str	r2, [sp, #4]
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	4623      	mov	r3, r4
 8009262:	4602      	mov	r2, r0
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f002 fd6f 	bl	800bd48 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	7919      	ldrb	r1, [r3, #4]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	79d8      	ldrb	r0, [r3, #7]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	8952      	ldrh	r2, [r2, #10]
 8009282:	9202      	str	r2, [sp, #8]
 8009284:	2202      	movs	r2, #2
 8009286:	9201      	str	r2, [sp, #4]
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	4623      	mov	r3, r4
 800928c:	4602      	mov	r2, r0
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f002 fd5a 	bl	800bd48 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	791b      	ldrb	r3, [r3, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f006 fb5f 	bl	800f960 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	795b      	ldrb	r3, [r3, #5]
 80092a6:	2200      	movs	r2, #0
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f006 fb58 	bl	800f960 <USBH_LL_SetToggle>

  return USBH_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd90      	pop	{r4, r7, pc}

080092ba <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	795b      	ldrb	r3, [r3, #5]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00e      	beq.n	80092f2 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	795b      	ldrb	r3, [r3, #5]
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f002 fd53 	bl	800bd86 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	795b      	ldrb	r3, [r3, #5]
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f002 fd7e 	bl	800bde8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	791b      	ldrb	r3, [r3, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00e      	beq.n	8009318 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	791b      	ldrb	r3, [r3, #4]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f002 fd40 	bl	800bd86 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	791b      	ldrb	r3, [r3, #4]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f002 fd6b 	bl	800bde8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800932a:	69db      	ldr	r3, [r3, #28]
 800932c:	4618      	mov	r0, r3
 800932e:	f006 fbfd 	bl	800fb2c <free>
    phost->pActiveClass->pData = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009338:	2200      	movs	r2, #0
 800933a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009358:	2301      	movs	r3, #1
 800935a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	7b9b      	ldrb	r3, [r3, #14]
 8009360:	2b03      	cmp	r3, #3
 8009362:	d041      	beq.n	80093e8 <USBH_MSC_ClassRequest+0xa2>
 8009364:	2b03      	cmp	r3, #3
 8009366:	dc4b      	bgt.n	8009400 <USBH_MSC_ClassRequest+0xba>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <USBH_MSC_ClassRequest+0x2a>
 800936c:	2b02      	cmp	r3, #2
 800936e:	d147      	bne.n	8009400 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fcf0 	bl	8009d5a <USBH_MSC_BOT_REQ_GetMaxLUN>
 800937a:	4603      	mov	r3, r0
 800937c:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	2b03      	cmp	r3, #3
 8009382:	d104      	bne.n	800938e <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d137      	bne.n	8009404 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b02      	cmp	r3, #2
 800939a:	d804      	bhi.n	80093a6 <USBH_MSC_ClassRequest+0x60>
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	e000      	b.n	80093a8 <USBH_MSC_ClassRequest+0x62>
 80093a6:	2202      	movs	r2, #2
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80093ac:	2300      	movs	r3, #0
 80093ae:	73bb      	strb	r3, [r7, #14]
 80093b0:	e014      	b.n	80093dc <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80093b2:	7bbb      	ldrb	r3, [r7, #14]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	2134      	movs	r1, #52	; 0x34
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	4413      	add	r3, r2
 80093be:	3392      	adds	r3, #146	; 0x92
 80093c0:	2202      	movs	r2, #2
 80093c2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	2134      	movs	r1, #52	; 0x34
 80093ca:	fb01 f303 	mul.w	r3, r1, r3
 80093ce:	4413      	add	r3, r2
 80093d0:	33c1      	adds	r3, #193	; 0xc1
 80093d2:	2200      	movs	r2, #0
 80093d4:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80093d6:	7bbb      	ldrb	r3, [r7, #14]
 80093d8:	3301      	adds	r3, #1
 80093da:	73bb      	strb	r3, [r7, #14]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	7bba      	ldrb	r2, [r7, #14]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d3e5      	bcc.n	80093b2 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80093e6:	e00d      	b.n	8009404 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80093e8:	2100      	movs	r1, #0
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f002 f87b 	bl	800b4e6 <USBH_ClrFeature>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d108      	bne.n	8009408 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	7bda      	ldrb	r2, [r3, #15]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	739a      	strb	r2, [r3, #14]
      }
      break;
 80093fe:	e003      	b.n	8009408 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009400:	bf00      	nop
 8009402:	e002      	b.n	800940a <USBH_MSC_ClassRequest+0xc4>
      break;
 8009404:	bf00      	nop
 8009406:	e000      	b.n	800940a <USBH_MSC_ClassRequest+0xc4>
      break;
 8009408:	bf00      	nop
  }

  return status;
 800940a:	7bfb      	ldrb	r3, [r7, #15]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009426:	2301      	movs	r3, #1
 8009428:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800942a:	2301      	movs	r3, #1
 800942c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800942e:	2301      	movs	r3, #1
 8009430:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	7b1b      	ldrb	r3, [r3, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d003      	beq.n	8009442 <USBH_MSC_Process+0x2e>
 800943a:	2b01      	cmp	r3, #1
 800943c:	f000 8271 	beq.w	8009922 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009440:	e272      	b.n	8009928 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	b29b      	uxth	r3, r3
 800944e:	429a      	cmp	r2, r3
 8009450:	f080 824f 	bcs.w	80098f2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800945a:	4619      	mov	r1, r3
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	2334      	movs	r3, #52	; 0x34
 8009460:	fb03 f301 	mul.w	r3, r3, r1
 8009464:	4413      	add	r3, r2
 8009466:	3391      	adds	r3, #145	; 0x91
 8009468:	2201      	movs	r2, #1
 800946a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009472:	4619      	mov	r1, r3
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	2334      	movs	r3, #52	; 0x34
 8009478:	fb03 f301 	mul.w	r3, r3, r1
 800947c:	4413      	add	r3, r2
 800947e:	3390      	adds	r3, #144	; 0x90
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	2b08      	cmp	r3, #8
 8009484:	f200 8243 	bhi.w	800990e <USBH_MSC_Process+0x4fa>
 8009488:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <USBH_MSC_Process+0x7c>)
 800948a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948e:	bf00      	nop
 8009490:	080094b5 	.word	0x080094b5
 8009494:	0800990f 	.word	0x0800990f
 8009498:	0800957d 	.word	0x0800957d
 800949c:	08009701 	.word	0x08009701
 80094a0:	080094db 	.word	0x080094db
 80094a4:	080097cd 	.word	0x080097cd
 80094a8:	0800990f 	.word	0x0800990f
 80094ac:	0800990f 	.word	0x0800990f
 80094b0:	080098e1 	.word	0x080098e1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094ba:	4619      	mov	r1, r3
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	2334      	movs	r3, #52	; 0x34
 80094c0:	fb03 f301 	mul.w	r3, r3, r1
 80094c4:	4413      	add	r3, r2
 80094c6:	3390      	adds	r3, #144	; 0x90
 80094c8:	2204      	movs	r2, #4
 80094ca:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80094d8:	e222      	b.n	8009920 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094e0:	b2d9      	uxtb	r1, r3
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094e8:	461a      	mov	r2, r3
 80094ea:	2334      	movs	r3, #52	; 0x34
 80094ec:	fb03 f302 	mul.w	r3, r3, r2
 80094f0:	3398      	adds	r3, #152	; 0x98
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4413      	add	r3, r2
 80094f6:	3307      	adds	r3, #7
 80094f8:	461a      	mov	r2, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 ff6a 	bl	800a3d4 <USBH_MSC_SCSI_Inquiry>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10b      	bne.n	8009522 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009510:	4619      	mov	r1, r3
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	2334      	movs	r3, #52	; 0x34
 8009516:	fb03 f301 	mul.w	r3, r3, r1
 800951a:	4413      	add	r3, r2
 800951c:	3390      	adds	r3, #144	; 0x90
 800951e:	2202      	movs	r2, #2
 8009520:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	2b02      	cmp	r3, #2
 8009526:	d10c      	bne.n	8009542 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800952e:	4619      	mov	r1, r3
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	2334      	movs	r3, #52	; 0x34
 8009534:	fb03 f301 	mul.w	r3, r3, r1
 8009538:	4413      	add	r3, r2
 800953a:	3390      	adds	r3, #144	; 0x90
 800953c:	2205      	movs	r2, #5
 800953e:	701a      	strb	r2, [r3, #0]
            break;
 8009540:	e1e7      	b.n	8009912 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b04      	cmp	r3, #4
 8009546:	f040 81e4 	bne.w	8009912 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009550:	4619      	mov	r1, r3
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	2334      	movs	r3, #52	; 0x34
 8009556:	fb03 f301 	mul.w	r3, r3, r1
 800955a:	4413      	add	r3, r2
 800955c:	3390      	adds	r3, #144	; 0x90
 800955e:	2201      	movs	r2, #1
 8009560:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009568:	4619      	mov	r1, r3
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	2334      	movs	r3, #52	; 0x34
 800956e:	fb03 f301 	mul.w	r3, r3, r1
 8009572:	4413      	add	r3, r2
 8009574:	3391      	adds	r3, #145	; 0x91
 8009576:	2202      	movs	r2, #2
 8009578:	701a      	strb	r2, [r3, #0]
            break;
 800957a:	e1ca      	b.n	8009912 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009582:	b2db      	uxtb	r3, r3
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fe66 	bl	800a258 <USBH_MSC_SCSI_TestUnitReady>
 800958c:	4603      	mov	r3, r0
 800958e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d149      	bne.n	800962a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800959c:	4619      	mov	r1, r3
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	2334      	movs	r3, #52	; 0x34
 80095a2:	fb03 f301 	mul.w	r3, r3, r1
 80095a6:	4413      	add	r3, r2
 80095a8:	3392      	adds	r3, #146	; 0x92
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00c      	beq.n	80095ca <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095b6:	4619      	mov	r1, r3
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	2334      	movs	r3, #52	; 0x34
 80095bc:	fb03 f301 	mul.w	r3, r3, r1
 80095c0:	4413      	add	r3, r2
 80095c2:	33c1      	adds	r3, #193	; 0xc1
 80095c4:	2201      	movs	r2, #1
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	e00b      	b.n	80095e2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095d0:	4619      	mov	r1, r3
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	2334      	movs	r3, #52	; 0x34
 80095d6:	fb03 f301 	mul.w	r3, r3, r1
 80095da:	4413      	add	r3, r2
 80095dc:	33c1      	adds	r3, #193	; 0xc1
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095e8:	4619      	mov	r1, r3
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	2334      	movs	r3, #52	; 0x34
 80095ee:	fb03 f301 	mul.w	r3, r3, r1
 80095f2:	4413      	add	r3, r2
 80095f4:	3390      	adds	r3, #144	; 0x90
 80095f6:	2203      	movs	r2, #3
 80095f8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009600:	4619      	mov	r1, r3
 8009602:	693a      	ldr	r2, [r7, #16]
 8009604:	2334      	movs	r3, #52	; 0x34
 8009606:	fb03 f301 	mul.w	r3, r3, r1
 800960a:	4413      	add	r3, r2
 800960c:	3391      	adds	r3, #145	; 0x91
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009618:	4619      	mov	r1, r3
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	2334      	movs	r3, #52	; 0x34
 800961e:	fb03 f301 	mul.w	r3, r3, r1
 8009622:	4413      	add	r3, r2
 8009624:	3392      	adds	r3, #146	; 0x92
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800962a:	7bbb      	ldrb	r3, [r7, #14]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d14a      	bne.n	80096c6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009636:	4619      	mov	r1, r3
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	2334      	movs	r3, #52	; 0x34
 800963c:	fb03 f301 	mul.w	r3, r3, r1
 8009640:	4413      	add	r3, r2
 8009642:	3392      	adds	r3, #146	; 0x92
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d00c      	beq.n	8009664 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009650:	4619      	mov	r1, r3
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	2334      	movs	r3, #52	; 0x34
 8009656:	fb03 f301 	mul.w	r3, r3, r1
 800965a:	4413      	add	r3, r2
 800965c:	33c1      	adds	r3, #193	; 0xc1
 800965e:	2201      	movs	r2, #1
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	e00b      	b.n	800967c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800966a:	4619      	mov	r1, r3
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	2334      	movs	r3, #52	; 0x34
 8009670:	fb03 f301 	mul.w	r3, r3, r1
 8009674:	4413      	add	r3, r2
 8009676:	33c1      	adds	r3, #193	; 0xc1
 8009678:	2200      	movs	r2, #0
 800967a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009682:	4619      	mov	r1, r3
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	2334      	movs	r3, #52	; 0x34
 8009688:	fb03 f301 	mul.w	r3, r3, r1
 800968c:	4413      	add	r3, r2
 800968e:	3390      	adds	r3, #144	; 0x90
 8009690:	2205      	movs	r2, #5
 8009692:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800969a:	4619      	mov	r1, r3
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	2334      	movs	r3, #52	; 0x34
 80096a0:	fb03 f301 	mul.w	r3, r3, r1
 80096a4:	4413      	add	r3, r2
 80096a6:	3391      	adds	r3, #145	; 0x91
 80096a8:	2201      	movs	r2, #1
 80096aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096b2:	4619      	mov	r1, r3
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	2334      	movs	r3, #52	; 0x34
 80096b8:	fb03 f301 	mul.w	r3, r3, r1
 80096bc:	4413      	add	r3, r2
 80096be:	3392      	adds	r3, #146	; 0x92
 80096c0:	2202      	movs	r2, #2
 80096c2:	701a      	strb	r2, [r3, #0]
            break;
 80096c4:	e127      	b.n	8009916 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	2b04      	cmp	r3, #4
 80096ca:	f040 8124 	bne.w	8009916 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096d4:	4619      	mov	r1, r3
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	2334      	movs	r3, #52	; 0x34
 80096da:	fb03 f301 	mul.w	r3, r3, r1
 80096de:	4413      	add	r3, r2
 80096e0:	3390      	adds	r3, #144	; 0x90
 80096e2:	2201      	movs	r2, #1
 80096e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096ec:	4619      	mov	r1, r3
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	2334      	movs	r3, #52	; 0x34
 80096f2:	fb03 f301 	mul.w	r3, r3, r1
 80096f6:	4413      	add	r3, r2
 80096f8:	3391      	adds	r3, #145	; 0x91
 80096fa:	2202      	movs	r2, #2
 80096fc:	701a      	strb	r2, [r3, #0]
            break;
 80096fe:	e10a      	b.n	8009916 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009706:	b2d9      	uxtb	r1, r3
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800970e:	461a      	mov	r2, r3
 8009710:	2334      	movs	r3, #52	; 0x34
 8009712:	fb03 f302 	mul.w	r3, r3, r2
 8009716:	3390      	adds	r3, #144	; 0x90
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	4413      	add	r3, r2
 800971c:	3304      	adds	r3, #4
 800971e:	461a      	mov	r2, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fddc 	bl	800a2de <USBH_MSC_SCSI_ReadCapacity>
 8009726:	4603      	mov	r3, r0
 8009728:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d120      	bne.n	8009772 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009736:	4619      	mov	r1, r3
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	2334      	movs	r3, #52	; 0x34
 800973c:	fb03 f301 	mul.w	r3, r3, r1
 8009740:	4413      	add	r3, r2
 8009742:	3390      	adds	r3, #144	; 0x90
 8009744:	2201      	movs	r2, #1
 8009746:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800974e:	4619      	mov	r1, r3
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	2334      	movs	r3, #52	; 0x34
 8009754:	fb03 f301 	mul.w	r3, r3, r1
 8009758:	4413      	add	r3, r2
 800975a:	3391      	adds	r3, #145	; 0x91
 800975c:	2200      	movs	r2, #0
 800975e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009766:	3301      	adds	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009770:	e0d3      	b.n	800991a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009772:	7bfb      	ldrb	r3, [r7, #15]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d10c      	bne.n	8009792 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800977e:	4619      	mov	r1, r3
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	2334      	movs	r3, #52	; 0x34
 8009784:	fb03 f301 	mul.w	r3, r3, r1
 8009788:	4413      	add	r3, r2
 800978a:	3390      	adds	r3, #144	; 0x90
 800978c:	2205      	movs	r2, #5
 800978e:	701a      	strb	r2, [r3, #0]
            break;
 8009790:	e0c3      	b.n	800991a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	2b04      	cmp	r3, #4
 8009796:	f040 80c0 	bne.w	800991a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097a0:	4619      	mov	r1, r3
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	2334      	movs	r3, #52	; 0x34
 80097a6:	fb03 f301 	mul.w	r3, r3, r1
 80097aa:	4413      	add	r3, r2
 80097ac:	3390      	adds	r3, #144	; 0x90
 80097ae:	2201      	movs	r2, #1
 80097b0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097b8:	4619      	mov	r1, r3
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	2334      	movs	r3, #52	; 0x34
 80097be:	fb03 f301 	mul.w	r3, r3, r1
 80097c2:	4413      	add	r3, r2
 80097c4:	3391      	adds	r3, #145	; 0x91
 80097c6:	2202      	movs	r2, #2
 80097c8:	701a      	strb	r2, [r3, #0]
            break;
 80097ca:	e0a6      	b.n	800991a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097d2:	b2d9      	uxtb	r1, r3
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80097da:	461a      	mov	r2, r3
 80097dc:	2334      	movs	r3, #52	; 0x34
 80097de:	fb03 f302 	mul.w	r3, r3, r2
 80097e2:	3398      	adds	r3, #152	; 0x98
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	4413      	add	r3, r2
 80097e8:	3304      	adds	r3, #4
 80097ea:	461a      	mov	r2, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fe96 	bl	800a51e <USBH_MSC_SCSI_RequestSense>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d145      	bne.n	8009888 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009802:	4619      	mov	r1, r3
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	2334      	movs	r3, #52	; 0x34
 8009808:	fb03 f301 	mul.w	r3, r3, r1
 800980c:	4413      	add	r3, r2
 800980e:	339c      	adds	r3, #156	; 0x9c
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b06      	cmp	r3, #6
 8009814:	d00c      	beq.n	8009830 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800981c:	4619      	mov	r1, r3
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	2334      	movs	r3, #52	; 0x34
 8009822:	fb03 f301 	mul.w	r3, r3, r1
 8009826:	4413      	add	r3, r2
 8009828:	339c      	adds	r3, #156	; 0x9c
 800982a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800982c:	2b02      	cmp	r3, #2
 800982e:	d117      	bne.n	8009860 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	f242 720f 	movw	r2, #9999	; 0x270f
 8009842:	4293      	cmp	r3, r2
 8009844:	d80c      	bhi.n	8009860 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800984c:	4619      	mov	r1, r3
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	2334      	movs	r3, #52	; 0x34
 8009852:	fb03 f301 	mul.w	r3, r3, r1
 8009856:	4413      	add	r3, r2
 8009858:	3390      	adds	r3, #144	; 0x90
 800985a:	2202      	movs	r2, #2
 800985c:	701a      	strb	r2, [r3, #0]
                  break;
 800985e:	e05f      	b.n	8009920 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009866:	4619      	mov	r1, r3
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	2334      	movs	r3, #52	; 0x34
 800986c:	fb03 f301 	mul.w	r3, r3, r1
 8009870:	4413      	add	r3, r2
 8009872:	3390      	adds	r3, #144	; 0x90
 8009874:	2201      	movs	r2, #1
 8009876:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800987e:	3301      	adds	r3, #1
 8009880:	b29a      	uxth	r2, r3
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	2b02      	cmp	r3, #2
 800988c:	d10c      	bne.n	80098a8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009894:	4619      	mov	r1, r3
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	2334      	movs	r3, #52	; 0x34
 800989a:	fb03 f301 	mul.w	r3, r3, r1
 800989e:	4413      	add	r3, r2
 80098a0:	3390      	adds	r3, #144	; 0x90
 80098a2:	2208      	movs	r2, #8
 80098a4:	701a      	strb	r2, [r3, #0]
            break;
 80098a6:	e03a      	b.n	800991e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d137      	bne.n	800991e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098b4:	4619      	mov	r1, r3
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	2334      	movs	r3, #52	; 0x34
 80098ba:	fb03 f301 	mul.w	r3, r3, r1
 80098be:	4413      	add	r3, r2
 80098c0:	3390      	adds	r3, #144	; 0x90
 80098c2:	2201      	movs	r2, #1
 80098c4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098cc:	4619      	mov	r1, r3
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	2334      	movs	r3, #52	; 0x34
 80098d2:	fb03 f301 	mul.w	r3, r3, r1
 80098d6:	4413      	add	r3, r2
 80098d8:	3391      	adds	r3, #145	; 0x91
 80098da:	2202      	movs	r2, #2
 80098dc:	701a      	strb	r2, [r3, #0]
            break;
 80098de:	e01e      	b.n	800991e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80098e6:	3301      	adds	r3, #1
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80098f0:	e016      	b.n	8009920 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2201      	movs	r2, #1
 80098fe:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009906:	2102      	movs	r1, #2
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3
      break;
 800990c:	e00c      	b.n	8009928 <USBH_MSC_Process+0x514>
            break;
 800990e:	bf00      	nop
 8009910:	e00a      	b.n	8009928 <USBH_MSC_Process+0x514>
            break;
 8009912:	bf00      	nop
 8009914:	e008      	b.n	8009928 <USBH_MSC_Process+0x514>
            break;
 8009916:	bf00      	nop
 8009918:	e006      	b.n	8009928 <USBH_MSC_Process+0x514>
            break;
 800991a:	bf00      	nop
 800991c:	e004      	b.n	8009928 <USBH_MSC_Process+0x514>
            break;
 800991e:	bf00      	nop
      break;
 8009920:	e002      	b.n	8009928 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	75fb      	strb	r3, [r7, #23]
      break;
 8009926:	bf00      	nop
  }
  return error;
 8009928:	7dfb      	ldrb	r3, [r7, #23]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop

08009934 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b088      	sub	sp, #32
 800994e:	af02      	add	r7, sp, #8
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	460b      	mov	r3, r1
 8009954:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009960:	2301      	movs	r3, #1
 8009962:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009964:	2301      	movs	r3, #1
 8009966:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	2134      	movs	r1, #52	; 0x34
 800996e:	fb01 f303 	mul.w	r3, r1, r3
 8009972:	4413      	add	r3, r2
 8009974:	3390      	adds	r3, #144	; 0x90
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b07      	cmp	r3, #7
 800997a:	d03c      	beq.n	80099f6 <USBH_MSC_RdWrProcess+0xac>
 800997c:	2b07      	cmp	r3, #7
 800997e:	f300 80a7 	bgt.w	8009ad0 <USBH_MSC_RdWrProcess+0x186>
 8009982:	2b05      	cmp	r3, #5
 8009984:	d06c      	beq.n	8009a60 <USBH_MSC_RdWrProcess+0x116>
 8009986:	2b06      	cmp	r3, #6
 8009988:	f040 80a2 	bne.w	8009ad0 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800998c:	78f9      	ldrb	r1, [r7, #3]
 800998e:	2300      	movs	r3, #0
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	2300      	movs	r3, #0
 8009994:	2200      	movs	r2, #0
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fea5 	bl	800a6e6 <USBH_MSC_SCSI_Read>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10b      	bne.n	80099be <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80099a6:	78fb      	ldrb	r3, [r7, #3]
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	2134      	movs	r1, #52	; 0x34
 80099ac:	fb01 f303 	mul.w	r3, r1, r3
 80099b0:	4413      	add	r3, r2
 80099b2:	3390      	adds	r3, #144	; 0x90
 80099b4:	2201      	movs	r2, #1
 80099b6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80099bc:	e08a      	b.n	8009ad4 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d109      	bne.n	80099d8 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80099c4:	78fb      	ldrb	r3, [r7, #3]
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	2134      	movs	r1, #52	; 0x34
 80099ca:	fb01 f303 	mul.w	r3, r1, r3
 80099ce:	4413      	add	r3, r2
 80099d0:	3390      	adds	r3, #144	; 0x90
 80099d2:	2205      	movs	r2, #5
 80099d4:	701a      	strb	r2, [r3, #0]
      break;
 80099d6:	e07d      	b.n	8009ad4 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	2b04      	cmp	r3, #4
 80099dc:	d17a      	bne.n	8009ad4 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80099de:	78fb      	ldrb	r3, [r7, #3]
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	2134      	movs	r1, #52	; 0x34
 80099e4:	fb01 f303 	mul.w	r3, r1, r3
 80099e8:	4413      	add	r3, r2
 80099ea:	3390      	adds	r3, #144	; 0x90
 80099ec:	2208      	movs	r2, #8
 80099ee:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80099f0:	2302      	movs	r3, #2
 80099f2:	75fb      	strb	r3, [r7, #23]
      break;
 80099f4:	e06e      	b.n	8009ad4 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80099f6:	78f9      	ldrb	r1, [r7, #3]
 80099f8:	2300      	movs	r3, #0
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	2300      	movs	r3, #0
 80099fe:	2200      	movs	r2, #0
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fe05 	bl	800a610 <USBH_MSC_SCSI_Write>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10b      	bne.n	8009a28 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	2134      	movs	r1, #52	; 0x34
 8009a16:	fb01 f303 	mul.w	r3, r1, r3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	3390      	adds	r3, #144	; 0x90
 8009a1e:	2201      	movs	r2, #1
 8009a20:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009a26:	e057      	b.n	8009ad8 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d109      	bne.n	8009a42 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	2134      	movs	r1, #52	; 0x34
 8009a34:	fb01 f303 	mul.w	r3, r1, r3
 8009a38:	4413      	add	r3, r2
 8009a3a:	3390      	adds	r3, #144	; 0x90
 8009a3c:	2205      	movs	r2, #5
 8009a3e:	701a      	strb	r2, [r3, #0]
      break;
 8009a40:	e04a      	b.n	8009ad8 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d147      	bne.n	8009ad8 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	2134      	movs	r1, #52	; 0x34
 8009a4e:	fb01 f303 	mul.w	r3, r1, r3
 8009a52:	4413      	add	r3, r2
 8009a54:	3390      	adds	r3, #144	; 0x90
 8009a56:	2208      	movs	r2, #8
 8009a58:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a5e:	e03b      	b.n	8009ad8 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	2234      	movs	r2, #52	; 0x34
 8009a64:	fb02 f303 	mul.w	r3, r2, r3
 8009a68:	3398      	adds	r3, #152	; 0x98
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	1d1a      	adds	r2, r3, #4
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fd52 	bl	800a51e <USBH_MSC_SCSI_RequestSense>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d113      	bne.n	8009aac <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009a84:	78fb      	ldrb	r3, [r7, #3]
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	2134      	movs	r1, #52	; 0x34
 8009a8a:	fb01 f303 	mul.w	r3, r1, r3
 8009a8e:	4413      	add	r3, r2
 8009a90:	3390      	adds	r3, #144	; 0x90
 8009a92:	2201      	movs	r2, #1
 8009a94:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009a96:	78fb      	ldrb	r3, [r7, #3]
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	2134      	movs	r1, #52	; 0x34
 8009a9c:	fb01 f303 	mul.w	r3, r1, r3
 8009aa0:	4413      	add	r3, r2
 8009aa2:	3391      	adds	r3, #145	; 0x91
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d014      	beq.n	8009adc <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	2b04      	cmp	r3, #4
 8009ab6:	d111      	bne.n	8009adc <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009ab8:	78fb      	ldrb	r3, [r7, #3]
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	2134      	movs	r1, #52	; 0x34
 8009abe:	fb01 f303 	mul.w	r3, r1, r3
 8009ac2:	4413      	add	r3, r2
 8009ac4:	3390      	adds	r3, #144	; 0x90
 8009ac6:	2208      	movs	r2, #8
 8009ac8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009aca:	2302      	movs	r3, #2
 8009acc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ace:	e005      	b.n	8009adc <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009ad0:	bf00      	nop
 8009ad2:	e004      	b.n	8009ade <USBH_MSC_RdWrProcess+0x194>
      break;
 8009ad4:	bf00      	nop
 8009ad6:	e002      	b.n	8009ade <USBH_MSC_RdWrProcess+0x194>
      break;
 8009ad8:	bf00      	nop
 8009ada:	e000      	b.n	8009ade <USBH_MSC_RdWrProcess+0x194>
      break;
 8009adc:	bf00      	nop

  }
  return error;
 8009ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3718      	adds	r7, #24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b0b      	cmp	r3, #11
 8009b06:	d10c      	bne.n	8009b22 <USBH_MSC_UnitIsReady+0x3a>
 8009b08:	78fb      	ldrb	r3, [r7, #3]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	2134      	movs	r1, #52	; 0x34
 8009b0e:	fb01 f303 	mul.w	r3, r1, r3
 8009b12:	4413      	add	r3, r2
 8009b14:	3391      	adds	r3, #145	; 0x91
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	73fb      	strb	r3, [r7, #15]
 8009b20:	e001      	b.n	8009b26 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b0b      	cmp	r3, #11
 8009b54:	d10d      	bne.n	8009b72 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009b56:	7afb      	ldrb	r3, [r7, #11]
 8009b58:	2234      	movs	r2, #52	; 0x34
 8009b5a:	fb02 f303 	mul.w	r3, r2, r3
 8009b5e:	3390      	adds	r3, #144	; 0x90
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	4413      	add	r3, r2
 8009b64:	2234      	movs	r2, #52	; 0x34
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f005 ffe7 	bl	800fb3c <memcpy>
    return USBH_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	e000      	b.n	8009b74 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009b72:	2302      	movs	r3, #2
  }
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af02      	add	r7, sp, #8
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	607a      	str	r2, [r7, #4]
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00e      	beq.n	8009bc0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009ba8:	2b0b      	cmp	r3, #11
 8009baa:	d109      	bne.n	8009bc0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009bac:	7afb      	ldrb	r3, [r7, #11]
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	2134      	movs	r1, #52	; 0x34
 8009bb2:	fb01 f303 	mul.w	r3, r1, r3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	3390      	adds	r3, #144	; 0x90
 8009bba:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d001      	beq.n	8009bc4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e040      	b.n	8009c46 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2206      	movs	r2, #6
 8009bc8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009bca:	7afb      	ldrb	r3, [r7, #11]
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	2134      	movs	r1, #52	; 0x34
 8009bd0:	fb01 f303 	mul.w	r3, r1, r3
 8009bd4:	4413      	add	r3, r2
 8009bd6:	3390      	adds	r3, #144	; 0x90
 8009bd8:	2206      	movs	r2, #6
 8009bda:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009bdc:	7afb      	ldrb	r3, [r7, #11]
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009be6:	7af9      	ldrb	r1, [r7, #11]
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 fd78 	bl	800a6e6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bfc:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009bfe:	e016      	b.n	8009c2e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	1ad2      	subs	r2, r2, r3
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d805      	bhi.n	8009c24 <USBH_MSC_Read+0xa8>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d104      	bne.n	8009c2e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2201      	movs	r2, #1
 8009c28:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e00b      	b.n	8009c46 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009c2e:	7afb      	ldrb	r3, [r7, #11]
 8009c30:	4619      	mov	r1, r3
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f7ff fe89 	bl	800994a <USBH_MSC_RdWrProcess>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d0e0      	beq.n	8009c00 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2201      	movs	r2, #1
 8009c42:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b088      	sub	sp, #32
 8009c52:	af02      	add	r7, sp, #8
 8009c54:	60f8      	str	r0, [r7, #12]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00e      	beq.n	8009c92 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009c7a:	2b0b      	cmp	r3, #11
 8009c7c:	d109      	bne.n	8009c92 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009c7e:	7afb      	ldrb	r3, [r7, #11]
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	2134      	movs	r1, #52	; 0x34
 8009c84:	fb01 f303 	mul.w	r3, r1, r3
 8009c88:	4413      	add	r3, r2
 8009c8a:	3390      	adds	r3, #144	; 0x90
 8009c8c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d001      	beq.n	8009c96 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009c92:	2302      	movs	r3, #2
 8009c94:	e040      	b.n	8009d18 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2207      	movs	r2, #7
 8009c9a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009c9c:	7afb      	ldrb	r3, [r7, #11]
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	2134      	movs	r1, #52	; 0x34
 8009ca2:	fb01 f303 	mul.w	r3, r1, r3
 8009ca6:	4413      	add	r3, r2
 8009ca8:	3390      	adds	r3, #144	; 0x90
 8009caa:	2207      	movs	r2, #7
 8009cac:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009cae:	7afb      	ldrb	r3, [r7, #11]
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009cb8:	7af9      	ldrb	r1, [r7, #11]
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 fca4 	bl	800a610 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cce:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009cd0:	e016      	b.n	8009d00 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	1ad2      	subs	r2, r2, r3
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	f242 7110 	movw	r1, #10000	; 0x2710
 8009ce2:	fb01 f303 	mul.w	r3, r1, r3
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d805      	bhi.n	8009cf6 <USBH_MSC_Write+0xa8>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d104      	bne.n	8009d00 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e00b      	b.n	8009d18 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009d00:	7afb      	ldrb	r3, [r7, #11]
 8009d02:	4619      	mov	r1, r3
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f7ff fe20 	bl	800994a <USBH_MSC_RdWrProcess>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d0e0      	beq.n	8009cd2 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2201      	movs	r2, #1
 8009d14:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2221      	movs	r2, #33	; 0x21
 8009d2c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	22ff      	movs	r2, #255	; 0xff
 8009d32:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009d46:	2200      	movs	r2, #0
 8009d48:	2100      	movs	r1, #0
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f001 fdab 	bl	800b8a6 <USBH_CtlReq>
 8009d50:	4603      	mov	r3, r0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	22a1      	movs	r2, #161	; 0xa1
 8009d68:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	22fe      	movs	r2, #254	; 0xfe
 8009d6e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009d82:	2201      	movs	r2, #1
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 fd8d 	bl	800b8a6 <USBH_CtlReq>
 8009d8c:	4603      	mov	r3, r0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009da6:	69db      	ldr	r3, [r3, #28]
 8009da8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	4a09      	ldr	r2, [pc, #36]	; (8009dd4 <USBH_MSC_BOT_Init+0x3c>)
 8009dae:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4a09      	ldr	r2, [pc, #36]	; (8009dd8 <USBH_MSC_BOT_Init+0x40>)
 8009db4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	43425355 	.word	0x43425355
 8009dd8:	20304050 	.word	0x20304050

08009ddc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b088      	sub	sp, #32
 8009de0:	af02      	add	r7, sp, #8
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009de8:	2301      	movs	r3, #1
 8009dea:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009dec:	2301      	movs	r3, #1
 8009dee:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009df0:	2301      	movs	r3, #1
 8009df2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	2b0a      	cmp	r3, #10
 8009e10:	f200 819e 	bhi.w	800a150 <USBH_MSC_BOT_Process+0x374>
 8009e14:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <USBH_MSC_BOT_Process+0x40>)
 8009e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1a:	bf00      	nop
 8009e1c:	08009e49 	.word	0x08009e49
 8009e20:	08009e71 	.word	0x08009e71
 8009e24:	08009edb 	.word	0x08009edb
 8009e28:	08009ef9 	.word	0x08009ef9
 8009e2c:	08009f7d 	.word	0x08009f7d
 8009e30:	08009f9f 	.word	0x08009f9f
 8009e34:	0800a037 	.word	0x0800a037
 8009e38:	0800a053 	.word	0x0800a053
 8009e3c:	0800a0a5 	.word	0x0800a0a5
 8009e40:	0800a0d5 	.word	0x0800a0d5
 8009e44:	0800a137 	.word	0x0800a137
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	795b      	ldrb	r3, [r3, #5]
 8009e62:	2201      	movs	r2, #1
 8009e64:	9200      	str	r2, [sp, #0]
 8009e66:	221f      	movs	r2, #31
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 ff2a 	bl	800bcc2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009e6e:	e17e      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	795b      	ldrb	r3, [r3, #5]
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f005 fd48 	bl	800f90c <USBH_LL_GetURBState>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009e80:	7d3b      	ldrb	r3, [r7, #20]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d118      	bne.n	8009eb8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00f      	beq.n	8009eae <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009e94:	b25b      	sxtb	r3, r3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	da04      	bge.n	8009ea4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2203      	movs	r2, #3
 8009e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009ea2:	e157      	b.n	800a154 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2205      	movs	r2, #5
 8009ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009eac:	e152      	b.n	800a154 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	2207      	movs	r2, #7
 8009eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009eb6:	e14d      	b.n	800a154 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009eb8:	7d3b      	ldrb	r3, [r7, #20]
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d104      	bne.n	8009ec8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ec6:	e145      	b.n	800a154 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009ec8:	7d3b      	ldrb	r3, [r7, #20]
 8009eca:	2b05      	cmp	r3, #5
 8009ecc:	f040 8142 	bne.w	800a154 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	220a      	movs	r2, #10
 8009ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ed8:	e13c      	b.n	800a154 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	895a      	ldrh	r2, [r3, #10]
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	791b      	ldrb	r3, [r3, #4]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 ff0f 	bl	800bd0c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2204      	movs	r2, #4
 8009ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009ef6:	e13a      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	791b      	ldrb	r3, [r3, #4]
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f005 fd04 	bl	800f90c <USBH_LL_GetURBState>
 8009f04:	4603      	mov	r3, r0
 8009f06:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009f08:	7d3b      	ldrb	r3, [r7, #20]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d12d      	bne.n	8009f6a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	8952      	ldrh	r2, [r2, #10]
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d910      	bls.n	8009f3c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	8952      	ldrh	r2, [r2, #10]
 8009f24:	441a      	add	r2, r3
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	8952      	ldrh	r2, [r2, #10]
 8009f34:	1a9a      	subs	r2, r3, r2
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f3a:	e002      	b.n	8009f42 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	895a      	ldrh	r2, [r3, #10]
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	791b      	ldrb	r3, [r3, #4]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f001 fed7 	bl	800bd0c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009f5e:	e0fb      	b.n	800a158 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	2207      	movs	r2, #7
 8009f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f68:	e0f6      	b.n	800a158 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009f6a:	7d3b      	ldrb	r3, [r7, #20]
 8009f6c:	2b05      	cmp	r3, #5
 8009f6e:	f040 80f3 	bne.w	800a158 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	2209      	movs	r2, #9
 8009f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f7a:	e0ed      	b.n	800a158 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	891a      	ldrh	r2, [r3, #8]
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	795b      	ldrb	r3, [r3, #5]
 8009f8a:	2001      	movs	r0, #1
 8009f8c:	9000      	str	r0, [sp, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f001 fe97 	bl	800bcc2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	2206      	movs	r2, #6
 8009f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f9c:	e0e7      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	795b      	ldrb	r3, [r3, #5]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f005 fcb1 	bl	800f90c <USBH_LL_GetURBState>
 8009faa:	4603      	mov	r3, r0
 8009fac:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009fae:	7d3b      	ldrb	r3, [r7, #20]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d12f      	bne.n	800a014 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	8912      	ldrh	r2, [r2, #8]
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d910      	bls.n	8009fe2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	8912      	ldrh	r2, [r2, #8]
 8009fca:	441a      	add	r2, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	8912      	ldrh	r2, [r2, #8]
 8009fda:	1a9a      	subs	r2, r3, r2
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	65da      	str	r2, [r3, #92]	; 0x5c
 8009fe0:	e002      	b.n	8009fe8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00c      	beq.n	800a00a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	891a      	ldrh	r2, [r3, #8]
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	795b      	ldrb	r3, [r3, #5]
 8009ffe:	2001      	movs	r0, #1
 800a000:	9000      	str	r0, [sp, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 fe5d 	bl	800bcc2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a008:	e0a8      	b.n	800a15c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	2207      	movs	r2, #7
 800a00e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a012:	e0a3      	b.n	800a15c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a014:	7d3b      	ldrb	r3, [r7, #20]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d104      	bne.n	800a024 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2205      	movs	r2, #5
 800a01e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a022:	e09b      	b.n	800a15c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a024:	7d3b      	ldrb	r3, [r7, #20]
 800a026:	2b05      	cmp	r3, #5
 800a028:	f040 8098 	bne.w	800a15c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	220a      	movs	r2, #10
 800a030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a034:	e092      	b.n	800a15c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	791b      	ldrb	r3, [r3, #4]
 800a040:	220d      	movs	r2, #13
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 fe62 	bl	800bd0c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	2208      	movs	r2, #8
 800a04c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a050:	e08d      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	791b      	ldrb	r3, [r3, #4]
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f005 fc57 	bl	800f90c <USBH_LL_GetURBState>
 800a05e:	4603      	mov	r3, r0
 800a060:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a062:	7d3b      	ldrb	r3, [r7, #20]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d115      	bne.n	800a094 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f8a9 	bl	800a1d0 <USBH_MSC_DecodeCSW>
 800a07e:	4603      	mov	r3, r0
 800a080:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a082:	7d7b      	ldrb	r3, [r7, #21]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a08c:	e068      	b.n	800a160 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a08e:	2302      	movs	r3, #2
 800a090:	75fb      	strb	r3, [r7, #23]
      break;
 800a092:	e065      	b.n	800a160 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a094:	7d3b      	ldrb	r3, [r7, #20]
 800a096:	2b05      	cmp	r3, #5
 800a098:	d162      	bne.n	800a160 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	2209      	movs	r2, #9
 800a09e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a0a2:	e05d      	b.n	800a160 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f864 	bl	800a178 <USBH_MSC_BOT_Abort>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a0b4:	7dbb      	ldrb	r3, [r7, #22]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d104      	bne.n	800a0c4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2207      	movs	r2, #7
 800a0be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a0c2:	e04f      	b.n	800a164 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a0c4:	7dbb      	ldrb	r3, [r7, #22]
 800a0c6:	2b04      	cmp	r3, #4
 800a0c8:	d14c      	bne.n	800a164 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	220b      	movs	r2, #11
 800a0ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a0d2:	e047      	b.n	800a164 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f84c 	bl	800a178 <USBH_MSC_BOT_Abort>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a0e4:	7dbb      	ldrb	r3, [r7, #22]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d11d      	bne.n	800a126 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	795b      	ldrb	r3, [r3, #5]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f005 fc65 	bl	800f9c0 <USBH_LL_GetToggle>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	7959      	ldrb	r1, [r3, #5]
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
 800a100:	f1c3 0301 	rsb	r3, r3, #1
 800a104:	b2db      	uxtb	r3, r3
 800a106:	461a      	mov	r2, r3
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f005 fc29 	bl	800f960 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	791b      	ldrb	r3, [r3, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f005 fc22 	bl	800f960 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	2209      	movs	r2, #9
 800a120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a124:	e020      	b.n	800a168 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a126:	7dbb      	ldrb	r3, [r7, #22]
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d11d      	bne.n	800a168 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	220b      	movs	r2, #11
 800a130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a134:	e018      	b.n	800a168 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7ff fdf2 	bl	8009d20 <USBH_MSC_BOT_REQ_Reset>
 800a13c:	4603      	mov	r3, r0
 800a13e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d112      	bne.n	800a16c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a14e:	e00d      	b.n	800a16c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a150:	bf00      	nop
 800a152:	e00c      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>
      break;
 800a154:	bf00      	nop
 800a156:	e00a      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>
      break;
 800a158:	bf00      	nop
 800a15a:	e008      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>
      break;
 800a15c:	bf00      	nop
 800a15e:	e006      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>
      break;
 800a160:	bf00      	nop
 800a162:	e004      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>
      break;
 800a164:	bf00      	nop
 800a166:	e002      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>
      break;
 800a168:	bf00      	nop
 800a16a:	e000      	b.n	800a16e <USBH_MSC_BOT_Process+0x392>
      break;
 800a16c:	bf00      	nop
  }
  return status;
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	70fb      	strb	r3, [r7, #3]
 800a184:	4613      	mov	r3, r2
 800a186:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a188:	2302      	movs	r3, #2
 800a18a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a192:	69db      	ldr	r3, [r3, #28]
 800a194:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a196:	78bb      	ldrb	r3, [r7, #2]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <USBH_MSC_BOT_Abort+0x2a>
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d009      	beq.n	800a1b4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a1a0:	e011      	b.n	800a1c6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	79db      	ldrb	r3, [r3, #7]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f001 f99c 	bl	800b4e6 <USBH_ClrFeature>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b2:	e008      	b.n	800a1c6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	799b      	ldrb	r3, [r3, #6]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 f993 	bl	800b4e6 <USBH_ClrFeature>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c4:	bf00      	nop
  }
  return status;
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	791b      	ldrb	r3, [r3, #4]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f005 fafb 	bl	800f7e8 <USBH_LL_GetLastXferSize>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b0d      	cmp	r3, #13
 800a1f6:	d002      	beq.n	800a1fe <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	73fb      	strb	r3, [r7, #15]
 800a1fc:	e024      	b.n	800a248 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a202:	4a14      	ldr	r2, [pc, #80]	; (800a254 <USBH_MSC_DecodeCSW+0x84>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d11d      	bne.n	800a244 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a210:	429a      	cmp	r2, r3
 800a212:	d119      	bne.n	800a248 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d102      	bne.n	800a224 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a21e:	2300      	movs	r3, #0
 800a220:	73fb      	strb	r3, [r7, #15]
 800a222:	e011      	b.n	800a248 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d102      	bne.n	800a234 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a22e:	2301      	movs	r3, #1
 800a230:	73fb      	strb	r3, [r7, #15]
 800a232:	e009      	b.n	800a248 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d104      	bne.n	800a248 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a23e:	2302      	movs	r3, #2
 800a240:	73fb      	strb	r3, [r7, #15]
 800a242:	e001      	b.n	800a248 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a244:	2302      	movs	r3, #2
 800a246:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a248:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	53425355 	.word	0x53425355

0800a258 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a264:	2302      	movs	r3, #2
 800a266:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d002      	beq.n	800a282 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d021      	beq.n	800a2c4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a280:	e028      	b.n	800a2d4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2200      	movs	r2, #0
 800a286:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	220a      	movs	r2, #10
 800a294:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	3363      	adds	r3, #99	; 0x63
 800a29c:	2210      	movs	r2, #16
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f005 fc59 	bl	800fb58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2c2:	e007      	b.n	800a2d4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a2c4:	78fb      	ldrb	r3, [r7, #3]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7ff fd87 	bl	8009ddc <USBH_MSC_BOT_Process>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2d2:	bf00      	nop
  }

  return error;
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b086      	sub	sp, #24
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	60f8      	str	r0, [r7, #12]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	607a      	str	r2, [r7, #4]
 800a2ea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2f6:	69db      	ldr	r3, [r3, #28]
 800a2f8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a300:	2b01      	cmp	r3, #1
 800a302:	d002      	beq.n	800a30a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a304:	2b02      	cmp	r3, #2
 800a306:	d027      	beq.n	800a358 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a308:	e05f      	b.n	800a3ca <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	2208      	movs	r2, #8
 800a30e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	2280      	movs	r2, #128	; 0x80
 800a314:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	220a      	movs	r2, #10
 800a31c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	3363      	adds	r3, #99	; 0x63
 800a324:	2210      	movs	r2, #16
 800a326:	2100      	movs	r1, #0
 800a328:	4618      	mov	r0, r3
 800a32a:	f005 fc15 	bl	800fb58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	2225      	movs	r2, #37	; 0x25
 800a332:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	2202      	movs	r2, #2
 800a342:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	f103 0210 	add.w	r2, r3, #16
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a352:	2301      	movs	r3, #1
 800a354:	75fb      	strb	r3, [r7, #23]
      break;
 800a356:	e038      	b.n	800a3ca <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a358:	7afb      	ldrb	r3, [r7, #11]
 800a35a:	4619      	mov	r1, r3
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f7ff fd3d 	bl	8009ddc <USBH_MSC_BOT_Process>
 800a362:	4603      	mov	r3, r0
 800a364:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a366:	7dfb      	ldrb	r3, [r7, #23]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d12d      	bne.n	800a3c8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a372:	3303      	adds	r3, #3
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a37e:	3302      	adds	r3, #2
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	021b      	lsls	r3, r3, #8
 800a384:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a38c:	3301      	adds	r3, #1
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a392:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	061b      	lsls	r3, r3, #24
 800a39e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3aa:	3307      	adds	r3, #7
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3b6:	3306      	adds	r3, #6
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	809a      	strh	r2, [r3, #4]
      break;
 800a3c8:	bf00      	nop
  }

  return error;
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a3e2:	2302      	movs	r3, #2
 800a3e4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d002      	beq.n	800a400 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d03d      	beq.n	800a47a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a3fe:	e089      	b.n	800a514 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	2224      	movs	r2, #36	; 0x24
 800a404:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	2280      	movs	r2, #128	; 0x80
 800a40a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	220a      	movs	r2, #10
 800a412:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	3363      	adds	r3, #99	; 0x63
 800a41a:	220a      	movs	r2, #10
 800a41c:	2100      	movs	r1, #0
 800a41e:	4618      	mov	r0, r3
 800a420:	f005 fb9a 	bl	800fb58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	2212      	movs	r2, #18
 800a428:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a42c:	7afb      	ldrb	r3, [r7, #11]
 800a42e:	015b      	lsls	r3, r3, #5
 800a430:	b2da      	uxtb	r2, r3
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	2224      	movs	r2, #36	; 0x24
 800a44c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2200      	movs	r2, #0
 800a454:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	f103 0210 	add.w	r2, r3, #16
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a474:	2301      	movs	r3, #1
 800a476:	75fb      	strb	r3, [r7, #23]
      break;
 800a478:	e04c      	b.n	800a514 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a47a:	7afb      	ldrb	r3, [r7, #11]
 800a47c:	4619      	mov	r1, r3
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f7ff fcac 	bl	8009ddc <USBH_MSC_BOT_Process>
 800a484:	4603      	mov	r3, r0
 800a486:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d141      	bne.n	800a512 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a48e:	2222      	movs	r2, #34	; 0x22
 800a490:	2100      	movs	r1, #0
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f005 fb60 	bl	800fb58 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	f003 031f 	and.w	r3, r3, #31
 800a4a4:	b2da      	uxtb	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	095b      	lsrs	r3, r3, #5
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	b25b      	sxtb	r3, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	da03      	bge.n	800a4d2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	709a      	strb	r2, [r3, #2]
 800a4d0:	e002      	b.n	800a4d8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	1cd8      	adds	r0, r3, #3
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	2208      	movs	r2, #8
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	f005 fb28 	bl	800fb3c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f103 000c 	add.w	r0, r3, #12
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4f8:	3310      	adds	r3, #16
 800a4fa:	2210      	movs	r2, #16
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f005 fb1d 	bl	800fb3c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	331d      	adds	r3, #29
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a50c:	3220      	adds	r2, #32
 800a50e:	6812      	ldr	r2, [r2, #0]
 800a510:	601a      	str	r2, [r3, #0]
      break;
 800a512:	bf00      	nop
  }

  return error;
 800a514:	7dfb      	ldrb	r3, [r7, #23]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b086      	sub	sp, #24
 800a522:	af00      	add	r7, sp, #0
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	460b      	mov	r3, r1
 800a528:	607a      	str	r2, [r7, #4]
 800a52a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a52c:	2302      	movs	r3, #2
 800a52e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a540:	2b01      	cmp	r3, #1
 800a542:	d002      	beq.n	800a54a <USBH_MSC_SCSI_RequestSense+0x2c>
 800a544:	2b02      	cmp	r3, #2
 800a546:	d03d      	beq.n	800a5c4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a548:	e05d      	b.n	800a606 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	220e      	movs	r2, #14
 800a54e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	2280      	movs	r2, #128	; 0x80
 800a554:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	220a      	movs	r2, #10
 800a55c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	3363      	adds	r3, #99	; 0x63
 800a564:	2210      	movs	r2, #16
 800a566:	2100      	movs	r1, #0
 800a568:	4618      	mov	r0, r3
 800a56a:	f005 faf5 	bl	800fb58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	2203      	movs	r2, #3
 800a572:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a576:	7afb      	ldrb	r3, [r7, #11]
 800a578:	015b      	lsls	r3, r3, #5
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	220e      	movs	r2, #14
 800a596:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	f103 0210 	add.w	r2, r3, #16
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a5c2:	e020      	b.n	800a606 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7ff fc07 	bl	8009ddc <USBH_MSC_BOT_Process>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d115      	bne.n	800a604 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5de:	3302      	adds	r3, #2
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	f003 030f 	and.w	r3, r3, #15
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5f2:	7b1a      	ldrb	r2, [r3, #12]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5fe:	7b5a      	ldrb	r2, [r3, #13]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	709a      	strb	r2, [r3, #2]
      break;
 800a604:	bf00      	nop
  }

  return error;
 800a606:	7dfb      	ldrb	r3, [r7, #23]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	607a      	str	r2, [r7, #4]
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	460b      	mov	r3, r1
 800a61e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a620:	2302      	movs	r3, #2
 800a622:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a634:	2b01      	cmp	r3, #1
 800a636:	d002      	beq.n	800a63e <USBH_MSC_SCSI_Write+0x2e>
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d047      	beq.n	800a6cc <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a63c:	e04e      	b.n	800a6dc <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a644:	461a      	mov	r2, r3
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	fb03 f202 	mul.w	r2, r3, r2
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	220a      	movs	r2, #10
 800a65c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	3363      	adds	r3, #99	; 0x63
 800a664:	2210      	movs	r2, #16
 800a666:	2100      	movs	r1, #0
 800a668:	4618      	mov	r0, r3
 800a66a:	f005 fa75 	bl	800fb58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	222a      	movs	r2, #42	; 0x2a
 800a672:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a676:	79fa      	ldrb	r2, [r7, #7]
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a67e:	79ba      	ldrb	r2, [r7, #6]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a686:	797a      	ldrb	r2, [r7, #5]
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a68e:	1d3b      	adds	r3, r7, #4
 800a690:	781a      	ldrb	r2, [r3, #0]
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a698:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a6a2:	f107 0320 	add.w	r3, r7, #32
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ca:	e007      	b.n	800a6dc <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a6cc:	7afb      	ldrb	r3, [r7, #11]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f7ff fb83 	bl	8009ddc <USBH_MSC_BOT_Process>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6da:	bf00      	nop
  }

  return error;
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b086      	sub	sp, #24
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	603b      	str	r3, [r7, #0]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d002      	beq.n	800a714 <USBH_MSC_SCSI_Read+0x2e>
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d047      	beq.n	800a7a2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a712:	e04e      	b.n	800a7b2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a71a:	461a      	mov	r2, r3
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	fb03 f202 	mul.w	r2, r3, r2
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	2280      	movs	r2, #128	; 0x80
 800a72a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	220a      	movs	r2, #10
 800a732:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	3363      	adds	r3, #99	; 0x63
 800a73a:	2210      	movs	r2, #16
 800a73c:	2100      	movs	r1, #0
 800a73e:	4618      	mov	r0, r3
 800a740:	f005 fa0a 	bl	800fb58 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	2228      	movs	r2, #40	; 0x28
 800a748:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a74c:	79fa      	ldrb	r2, [r7, #7]
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a754:	79ba      	ldrb	r2, [r7, #6]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a75c:	797a      	ldrb	r2, [r7, #5]
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a764:	1d3b      	adds	r3, r7, #4
 800a766:	781a      	ldrb	r2, [r3, #0]
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a76e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a778:	f107 0320 	add.w	r3, r7, #32
 800a77c:	781a      	ldrb	r2, [r3, #0]
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a79c:	2301      	movs	r3, #1
 800a79e:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a0:	e007      	b.n	800a7b2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a7a2:	7afb      	ldrb	r3, [r7, #11]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7ff fb18 	bl	8009ddc <USBH_MSC_BOT_Process>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a7b0:	bf00      	nop
  }

  return error;
 800a7b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3718      	adds	r7, #24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e029      	b.n	800a828 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	79fa      	ldrb	r2, [r7, #7]
 800a7d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f000 f81f 	bl	800a830 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d003      	beq.n	800a820 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f004 ff2d 	bl	800f680 <USBH_LL_Init>

  return USBH_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a83c:	2300      	movs	r3, #0
 800a83e:	60fb      	str	r3, [r7, #12]
 800a840:	e009      	b.n	800a856 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	33e0      	adds	r3, #224	; 0xe0
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	2200      	movs	r2, #0
 800a84e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3301      	adds	r3, #1
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b0e      	cmp	r3, #14
 800a85a:	d9f2      	bls.n	800a842 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a85c:	2300      	movs	r3, #0
 800a85e:	60fb      	str	r3, [r7, #12]
 800a860:	e009      	b.n	800a876 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	4413      	add	r3, r2
 800a868:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3301      	adds	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a87c:	d3f1      	bcc.n	800a862 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2240      	movs	r2, #64	; 0x40
 800a8a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d016      	beq.n	800a91a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10e      	bne.n	800a914 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a8fc:	1c59      	adds	r1, r3, #1
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	33de      	adds	r3, #222	; 0xde
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	73fb      	strb	r3, [r7, #15]
 800a912:	e004      	b.n	800a91e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a914:	2302      	movs	r3, #2
 800a916:	73fb      	strb	r3, [r7, #15]
 800a918:	e001      	b.n	800a91e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a91a:	2302      	movs	r3, #2
 800a91c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a942:	78fa      	ldrb	r2, [r7, #3]
 800a944:	429a      	cmp	r2, r3
 800a946:	d204      	bcs.n	800a952 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	78fa      	ldrb	r2, [r7, #3]
 800a94c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a950:	e001      	b.n	800a956 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a952:	2302      	movs	r3, #2
 800a954:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a956:	7bfb      	ldrb	r3, [r7, #15]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a964:	b480      	push	{r7}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	4608      	mov	r0, r1
 800a96e:	4611      	mov	r1, r2
 800a970:	461a      	mov	r2, r3
 800a972:	4603      	mov	r3, r0
 800a974:	70fb      	strb	r3, [r7, #3]
 800a976:	460b      	mov	r3, r1
 800a978:	70bb      	strb	r3, [r7, #2]
 800a97a:	4613      	mov	r3, r2
 800a97c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a982:	2300      	movs	r3, #0
 800a984:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a98c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a98e:	e025      	b.n	800a9dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a990:	7dfb      	ldrb	r3, [r7, #23]
 800a992:	221a      	movs	r2, #26
 800a994:	fb02 f303 	mul.w	r3, r2, r3
 800a998:	3308      	adds	r3, #8
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	4413      	add	r3, r2
 800a99e:	3302      	adds	r3, #2
 800a9a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	795b      	ldrb	r3, [r3, #5]
 800a9a6:	78fa      	ldrb	r2, [r7, #3]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d002      	beq.n	800a9b2 <USBH_FindInterface+0x4e>
 800a9ac:	78fb      	ldrb	r3, [r7, #3]
 800a9ae:	2bff      	cmp	r3, #255	; 0xff
 800a9b0:	d111      	bne.n	800a9d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a9b6:	78ba      	ldrb	r2, [r7, #2]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d002      	beq.n	800a9c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a9bc:	78bb      	ldrb	r3, [r7, #2]
 800a9be:	2bff      	cmp	r3, #255	; 0xff
 800a9c0:	d109      	bne.n	800a9d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a9c6:	787a      	ldrb	r2, [r7, #1]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d002      	beq.n	800a9d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a9cc:	787b      	ldrb	r3, [r7, #1]
 800a9ce:	2bff      	cmp	r3, #255	; 0xff
 800a9d0:	d101      	bne.n	800a9d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a9d2:	7dfb      	ldrb	r3, [r7, #23]
 800a9d4:	e006      	b.n	800a9e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d9d6      	bls.n	800a990 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a9e2:	23ff      	movs	r3, #255	; 0xff
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	371c      	adds	r7, #28
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f004 fe7d 	bl	800f6f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a9fe:	2101      	movs	r1, #1
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f004 ff96 	bl	800f932 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b088      	sub	sp, #32
 800aa14:	af04      	add	r7, sp, #16
 800aa16:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800aa18:	2302      	movs	r3, #2
 800aa1a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d102      	bne.n	800aa32 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2203      	movs	r2, #3
 800aa30:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b0b      	cmp	r3, #11
 800aa3a:	f200 81b3 	bhi.w	800ada4 <USBH_Process+0x394>
 800aa3e:	a201      	add	r2, pc, #4	; (adr r2, 800aa44 <USBH_Process+0x34>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aa75 	.word	0x0800aa75
 800aa48:	0800aaa7 	.word	0x0800aaa7
 800aa4c:	0800ab0f 	.word	0x0800ab0f
 800aa50:	0800ad3f 	.word	0x0800ad3f
 800aa54:	0800ada5 	.word	0x0800ada5
 800aa58:	0800abb3 	.word	0x0800abb3
 800aa5c:	0800ace5 	.word	0x0800ace5
 800aa60:	0800abe9 	.word	0x0800abe9
 800aa64:	0800ac09 	.word	0x0800ac09
 800aa68:	0800ac29 	.word	0x0800ac29
 800aa6c:	0800ac57 	.word	0x0800ac57
 800aa70:	0800ad27 	.word	0x0800ad27
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 8193 	beq.w	800ada8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2201      	movs	r2, #1
 800aa86:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800aa88:	20c8      	movs	r0, #200	; 0xc8
 800aa8a:	f004 ffc9 	bl	800fa20 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f004 fe8f 	bl	800f7b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aaa4:	e180      	b.n	800ada8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d107      	bne.n	800aac0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aabe:	e182      	b.n	800adc6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aaca:	d914      	bls.n	800aaf6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aad2:	3301      	adds	r3, #1
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	d903      	bls.n	800aaee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	220d      	movs	r2, #13
 800aaea:	701a      	strb	r2, [r3, #0]
      break;
 800aaec:	e16b      	b.n	800adc6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	701a      	strb	r2, [r3, #0]
      break;
 800aaf4:	e167      	b.n	800adc6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aafc:	f103 020a 	add.w	r2, r3, #10
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ab06:	200a      	movs	r0, #10
 800ab08:	f004 ff8a 	bl	800fa20 <USBH_Delay>
      break;
 800ab0c:	e15b      	b.n	800adc6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab1e:	2104      	movs	r1, #4
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ab24:	2064      	movs	r0, #100	; 0x64
 800ab26:	f004 ff7b 	bl	800fa20 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f004 fe1a 	bl	800f764 <USBH_LL_GetSpeed>
 800ab30:	4603      	mov	r3, r0
 800ab32:	461a      	mov	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2205      	movs	r2, #5
 800ab3e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ab40:	2100      	movs	r1, #0
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f001 f92f 	bl	800bda6 <USBH_AllocPipe>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ab50:	2180      	movs	r1, #128	; 0x80
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f001 f927 	bl	800bda6 <USBH_AllocPipe>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	7919      	ldrb	r1, [r3, #4]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ab74:	b292      	uxth	r2, r2
 800ab76:	9202      	str	r2, [sp, #8]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	9201      	str	r2, [sp, #4]
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2280      	movs	r2, #128	; 0x80
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 f8e0 	bl	800bd48 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7959      	ldrb	r1, [r3, #5]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ab9c:	b292      	uxth	r2, r2
 800ab9e:	9202      	str	r2, [sp, #8]
 800aba0:	2200      	movs	r2, #0
 800aba2:	9201      	str	r2, [sp, #4]
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	4603      	mov	r3, r0
 800aba8:	2200      	movs	r2, #0
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f001 f8cc 	bl	800bd48 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800abb0:	e109      	b.n	800adc6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f90c 	bl	800add0 <USBH_HandleEnum>
 800abb8:	4603      	mov	r3, r0
 800abba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f040 80f3 	bne.w	800adac <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d103      	bne.n	800abe0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2208      	movs	r2, #8
 800abdc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800abde:	e0e5      	b.n	800adac <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2207      	movs	r2, #7
 800abe4:	701a      	strb	r2, [r3, #0]
      break;
 800abe6:	e0e1      	b.n	800adac <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f000 80de 	beq.w	800adb0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abfa:	2101      	movs	r1, #1
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2208      	movs	r2, #8
 800ac04:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ac06:	e0d3      	b.n	800adb0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fc20 	bl	800b458 <USBH_SetCfg>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f040 80ca 	bne.w	800adb4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2209      	movs	r2, #9
 800ac24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac26:	e0c5      	b.n	800adb4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ac2e:	f003 0320 	and.w	r3, r3, #32
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00b      	beq.n	800ac4e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ac36:	2101      	movs	r1, #1
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fc30 	bl	800b49e <USBH_SetFeature>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f040 80b9 	bne.w	800adb8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	220a      	movs	r2, #10
 800ac4a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac4c:	e0b4      	b.n	800adb8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	220a      	movs	r2, #10
 800ac52:	701a      	strb	r2, [r3, #0]
      break;
 800ac54:	e0b0      	b.n	800adb8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 80ad 	beq.w	800adbc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	73fb      	strb	r3, [r7, #15]
 800ac6e:	e016      	b.n	800ac9e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ac70:	7bfa      	ldrb	r2, [r7, #15]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	32de      	adds	r2, #222	; 0xde
 800ac76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7a:	791a      	ldrb	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d108      	bne.n	800ac98 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ac86:	7bfa      	ldrb	r2, [r7, #15]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	32de      	adds	r2, #222	; 0xde
 800ac8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ac96:	e005      	b.n	800aca4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	73fb      	strb	r3, [r7, #15]
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d0e5      	beq.n	800ac70 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d016      	beq.n	800acdc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	4798      	blx	r3
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d109      	bne.n	800acd4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2206      	movs	r2, #6
 800acc4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800accc:	2103      	movs	r1, #3
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800acd2:	e073      	b.n	800adbc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	220d      	movs	r2, #13
 800acd8:	701a      	strb	r2, [r3, #0]
      break;
 800acda:	e06f      	b.n	800adbc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	220d      	movs	r2, #13
 800ace0:	701a      	strb	r2, [r3, #0]
      break;
 800ace2:	e06b      	b.n	800adbc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acea:	2b00      	cmp	r3, #0
 800acec:	d017      	beq.n	800ad1e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	4798      	blx	r3
 800acfa:	4603      	mov	r3, r0
 800acfc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800acfe:	7bbb      	ldrb	r3, [r7, #14]
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d103      	bne.n	800ad0e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	220b      	movs	r2, #11
 800ad0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad0c:	e058      	b.n	800adc0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d154      	bne.n	800adc0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	220d      	movs	r2, #13
 800ad1a:	701a      	strb	r2, [r3, #0]
      break;
 800ad1c:	e050      	b.n	800adc0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	220d      	movs	r2, #13
 800ad22:	701a      	strb	r2, [r3, #0]
      break;
 800ad24:	e04c      	b.n	800adc0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d049      	beq.n	800adc4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	4798      	blx	r3
      }
      break;
 800ad3c:	e042      	b.n	800adc4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7ff fd72 	bl	800a830 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d009      	beq.n	800ad6a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d005      	beq.n	800ad80 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad7a:	2105      	movs	r1, #5
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d107      	bne.n	800ad9c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7ff fe2b 	bl	800a9f0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ad9a:	e014      	b.n	800adc6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f004 fcab 	bl	800f6f8 <USBH_LL_Start>
      break;
 800ada2:	e010      	b.n	800adc6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ada4:	bf00      	nop
 800ada6:	e00e      	b.n	800adc6 <USBH_Process+0x3b6>
      break;
 800ada8:	bf00      	nop
 800adaa:	e00c      	b.n	800adc6 <USBH_Process+0x3b6>
      break;
 800adac:	bf00      	nop
 800adae:	e00a      	b.n	800adc6 <USBH_Process+0x3b6>
    break;
 800adb0:	bf00      	nop
 800adb2:	e008      	b.n	800adc6 <USBH_Process+0x3b6>
      break;
 800adb4:	bf00      	nop
 800adb6:	e006      	b.n	800adc6 <USBH_Process+0x3b6>
      break;
 800adb8:	bf00      	nop
 800adba:	e004      	b.n	800adc6 <USBH_Process+0x3b6>
      break;
 800adbc:	bf00      	nop
 800adbe:	e002      	b.n	800adc6 <USBH_Process+0x3b6>
      break;
 800adc0:	bf00      	nop
 800adc2:	e000      	b.n	800adc6 <USBH_Process+0x3b6>
      break;
 800adc4:	bf00      	nop
  }
  return USBH_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af04      	add	r7, sp, #16
 800add6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800add8:	2301      	movs	r3, #1
 800adda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800addc:	2301      	movs	r3, #1
 800adde:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	785b      	ldrb	r3, [r3, #1]
 800ade4:	2b07      	cmp	r3, #7
 800ade6:	f200 81c1 	bhi.w	800b16c <USBH_HandleEnum+0x39c>
 800adea:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <USBH_HandleEnum+0x20>)
 800adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf0:	0800ae11 	.word	0x0800ae11
 800adf4:	0800aecf 	.word	0x0800aecf
 800adf8:	0800af39 	.word	0x0800af39
 800adfc:	0800afc7 	.word	0x0800afc7
 800ae00:	0800b031 	.word	0x0800b031
 800ae04:	0800b0a1 	.word	0x0800b0a1
 800ae08:	0800b0e7 	.word	0x0800b0e7
 800ae0c:	0800b12d 	.word	0x0800b12d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ae10:	2108      	movs	r1, #8
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fa50 	bl	800b2b8 <USBH_Get_DevDesc>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d130      	bne.n	800ae84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	7919      	ldrb	r1, [r3, #4]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ae46:	b292      	uxth	r2, r2
 800ae48:	9202      	str	r2, [sp, #8]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	9201      	str	r2, [sp, #4]
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	4603      	mov	r3, r0
 800ae52:	2280      	movs	r2, #128	; 0x80
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 ff77 	bl	800bd48 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	7959      	ldrb	r1, [r3, #5]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ae6e:	b292      	uxth	r2, r2
 800ae70:	9202      	str	r2, [sp, #8]
 800ae72:	2200      	movs	r2, #0
 800ae74:	9201      	str	r2, [sp, #4]
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 ff63 	bl	800bd48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ae82:	e175      	b.n	800b170 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	f040 8172 	bne.w	800b170 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae92:	3301      	adds	r3, #1
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d903      	bls.n	800aeae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	220d      	movs	r2, #13
 800aeaa:	701a      	strb	r2, [r3, #0]
      break;
 800aeac:	e160      	b.n	800b170 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	795b      	ldrb	r3, [r3, #5]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 ff97 	bl	800bde8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	791b      	ldrb	r3, [r3, #4]
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 ff91 	bl	800bde8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	701a      	strb	r2, [r3, #0]
      break;
 800aecc:	e150      	b.n	800b170 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aece:	2112      	movs	r1, #18
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f9f1 	bl	800b2b8 <USBH_Get_DevDesc>
 800aed6:	4603      	mov	r3, r0
 800aed8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d103      	bne.n	800aee8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2202      	movs	r2, #2
 800aee4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aee6:	e145      	b.n	800b174 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	f040 8142 	bne.w	800b174 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aef6:	3301      	adds	r3, #1
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af06:	2b03      	cmp	r3, #3
 800af08:	d903      	bls.n	800af12 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	220d      	movs	r2, #13
 800af0e:	701a      	strb	r2, [r3, #0]
      break;
 800af10:	e130      	b.n	800b174 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	795b      	ldrb	r3, [r3, #5]
 800af16:	4619      	mov	r1, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 ff65 	bl	800bde8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	791b      	ldrb	r3, [r3, #4]
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 ff5f 	bl	800bde8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	701a      	strb	r2, [r3, #0]
      break;
 800af36:	e11d      	b.n	800b174 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800af38:	2101      	movs	r1, #1
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa68 	bl	800b410 <USBH_SetAddress>
 800af40:	4603      	mov	r3, r0
 800af42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d132      	bne.n	800afb0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800af4a:	2002      	movs	r0, #2
 800af4c:	f004 fd68 	bl	800fa20 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2203      	movs	r2, #3
 800af5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7919      	ldrb	r1, [r3, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800af72:	b292      	uxth	r2, r2
 800af74:	9202      	str	r2, [sp, #8]
 800af76:	2200      	movs	r2, #0
 800af78:	9201      	str	r2, [sp, #4]
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	4603      	mov	r3, r0
 800af7e:	2280      	movs	r2, #128	; 0x80
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fee1 	bl	800bd48 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	7959      	ldrb	r1, [r3, #5]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af9a:	b292      	uxth	r2, r2
 800af9c:	9202      	str	r2, [sp, #8]
 800af9e:	2200      	movs	r2, #0
 800afa0:	9201      	str	r2, [sp, #4]
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	4603      	mov	r3, r0
 800afa6:	2200      	movs	r2, #0
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fecd 	bl	800bd48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800afae:	e0e3      	b.n	800b178 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afb0:	7bbb      	ldrb	r3, [r7, #14]
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	f040 80e0 	bne.w	800b178 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	220d      	movs	r2, #13
 800afbc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	705a      	strb	r2, [r3, #1]
      break;
 800afc4:	e0d8      	b.n	800b178 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800afc6:	2109      	movs	r1, #9
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f99d 	bl	800b308 <USBH_Get_CfgDesc>
 800afce:	4603      	mov	r3, r0
 800afd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d103      	bne.n	800afe0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2204      	movs	r2, #4
 800afdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800afde:	e0cd      	b.n	800b17c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	f040 80ca 	bne.w	800b17c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afee:	3301      	adds	r3, #1
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800affe:	2b03      	cmp	r3, #3
 800b000:	d903      	bls.n	800b00a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	220d      	movs	r2, #13
 800b006:	701a      	strb	r2, [r3, #0]
      break;
 800b008:	e0b8      	b.n	800b17c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	795b      	ldrb	r3, [r3, #5]
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fee9 	bl	800bde8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	791b      	ldrb	r3, [r3, #4]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fee3 	bl	800bde8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	701a      	strb	r2, [r3, #0]
      break;
 800b02e:	e0a5      	b.n	800b17c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f965 	bl	800b308 <USBH_Get_CfgDesc>
 800b03e:	4603      	mov	r3, r0
 800b040:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d103      	bne.n	800b050 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2205      	movs	r2, #5
 800b04c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b04e:	e097      	b.n	800b180 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	2b03      	cmp	r3, #3
 800b054:	f040 8094 	bne.w	800b180 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b05e:	3301      	adds	r3, #1
 800b060:	b2da      	uxtb	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b06e:	2b03      	cmp	r3, #3
 800b070:	d903      	bls.n	800b07a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	220d      	movs	r2, #13
 800b076:	701a      	strb	r2, [r3, #0]
      break;
 800b078:	e082      	b.n	800b180 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	795b      	ldrb	r3, [r3, #5]
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 feb1 	bl	800bde8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	791b      	ldrb	r3, [r3, #4]
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 feab 	bl	800bde8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	701a      	strb	r2, [r3, #0]
      break;
 800b09e:	e06f      	b.n	800b180 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d019      	beq.n	800b0de <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b0b6:	23ff      	movs	r3, #255	; 0xff
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f949 	bl	800b350 <USBH_Get_StringDesc>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d103      	bne.n	800b0d0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2206      	movs	r2, #6
 800b0cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b0ce:	e059      	b.n	800b184 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d156      	bne.n	800b184 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2206      	movs	r2, #6
 800b0da:	705a      	strb	r2, [r3, #1]
      break;
 800b0dc:	e052      	b.n	800b184 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2206      	movs	r2, #6
 800b0e2:	705a      	strb	r2, [r3, #1]
      break;
 800b0e4:	e04e      	b.n	800b184 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d019      	beq.n	800b124 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b0fc:	23ff      	movs	r3, #255	; 0xff
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f926 	bl	800b350 <USBH_Get_StringDesc>
 800b104:	4603      	mov	r3, r0
 800b106:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b108:	7bbb      	ldrb	r3, [r7, #14]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d103      	bne.n	800b116 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2207      	movs	r2, #7
 800b112:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b114:	e038      	b.n	800b188 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	2b03      	cmp	r3, #3
 800b11a:	d135      	bne.n	800b188 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2207      	movs	r2, #7
 800b120:	705a      	strb	r2, [r3, #1]
      break;
 800b122:	e031      	b.n	800b188 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2207      	movs	r2, #7
 800b128:	705a      	strb	r2, [r3, #1]
      break;
 800b12a:	e02d      	b.n	800b188 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b132:	2b00      	cmp	r3, #0
 800b134:	d017      	beq.n	800b166 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b142:	23ff      	movs	r3, #255	; 0xff
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f903 	bl	800b350 <USBH_Get_StringDesc>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b158:	e018      	b.n	800b18c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	d115      	bne.n	800b18c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	73fb      	strb	r3, [r7, #15]
      break;
 800b164:	e012      	b.n	800b18c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]
      break;
 800b16a:	e00f      	b.n	800b18c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b16c:	bf00      	nop
 800b16e:	e00e      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b170:	bf00      	nop
 800b172:	e00c      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b174:	bf00      	nop
 800b176:	e00a      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b178:	bf00      	nop
 800b17a:	e008      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b17c:	bf00      	nop
 800b17e:	e006      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b180:	bf00      	nop
 800b182:	e004      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b184:	bf00      	nop
 800b186:	e002      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b188:	bf00      	nop
 800b18a:	e000      	b.n	800b18e <USBH_HandleEnum+0x3be>
      break;
 800b18c:	bf00      	nop
  }
  return Status;
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b1aa:	bf00      	nop
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b082      	sub	sp, #8
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f804 	bl	800b1da <USBH_HandleSof>
}
 800b1d2:	bf00      	nop
 800b1d4:	3708      	adds	r7, #8
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b082      	sub	sp, #8
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b0b      	cmp	r3, #11
 800b1ea:	d10a      	bne.n	800b202 <USBH_HandleSof+0x28>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d005      	beq.n	800b202 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
  }
}
 800b202:	bf00      	nop
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b21a:	bf00      	nop
}
 800b21c:	370c      	adds	r7, #12
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b226:	b480      	push	{r7}
 800b228:	b083      	sub	sp, #12
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b236:	bf00      	nop
}
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b242:	b480      	push	{r7}
 800b244:	b083      	sub	sp, #12
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2201      	movs	r2, #1
 800b24e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f004 fa4c 	bl	800f72e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	791b      	ldrb	r3, [r3, #4]
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fda3 	bl	800bde8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	795b      	ldrb	r3, [r3, #5]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fd9d 	bl	800bde8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b2ae:	2300      	movs	r3, #0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af02      	add	r7, sp, #8
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b2ca:	78fb      	ldrb	r3, [r7, #3]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f864 	bl	800b3a6 <USBH_GetDescriptor>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	73fb      	strb	r3, [r7, #15]
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10a      	bne.n	800b2fe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2f4:	78fa      	ldrb	r2, [r7, #3]
 800b2f6:	b292      	uxth	r2, r2
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	f000 f918 	bl	800b52e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	460b      	mov	r3, r1
 800b312:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	331c      	adds	r3, #28
 800b318:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b31a:	887b      	ldrh	r3, [r7, #2]
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b324:	2100      	movs	r1, #0
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f83d 	bl	800b3a6 <USBH_GetDescriptor>
 800b32c:	4603      	mov	r3, r0
 800b32e:	72fb      	strb	r3, [r7, #11]
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d107      	bne.n	800b346 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b33c:	887a      	ldrh	r2, [r7, #2]
 800b33e:	68f9      	ldr	r1, [r7, #12]
 800b340:	4618      	mov	r0, r3
 800b342:	f000 f964 	bl	800b60e <USBH_ParseCfgDesc>
  }

  return status;
 800b346:	7afb      	ldrb	r3, [r7, #11]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af02      	add	r7, sp, #8
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	607a      	str	r2, [r7, #4]
 800b35a:	461a      	mov	r2, r3
 800b35c:	460b      	mov	r3, r1
 800b35e:	72fb      	strb	r3, [r7, #11]
 800b360:	4613      	mov	r3, r2
 800b362:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	b29b      	uxth	r3, r3
 800b368:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b36c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b374:	893b      	ldrh	r3, [r7, #8]
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	460b      	mov	r3, r1
 800b37a:	2100      	movs	r1, #0
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f000 f812 	bl	800b3a6 <USBH_GetDescriptor>
 800b382:	4603      	mov	r3, r0
 800b384:	75fb      	strb	r3, [r7, #23]
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d107      	bne.n	800b39c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b392:	893a      	ldrh	r2, [r7, #8]
 800b394:	6879      	ldr	r1, [r7, #4]
 800b396:	4618      	mov	r0, r3
 800b398:	f000 fa37 	bl	800b80a <USBH_ParseStringDesc>
  }

  return status;
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3718      	adds	r7, #24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b084      	sub	sp, #16
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	607b      	str	r3, [r7, #4]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	72fb      	strb	r3, [r7, #11]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	789b      	ldrb	r3, [r3, #2]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d11c      	bne.n	800b3fa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2206      	movs	r2, #6
 800b3d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	893a      	ldrh	r2, [r7, #8]
 800b3d6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b3d8:	893b      	ldrh	r3, [r7, #8]
 800b3da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b3de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3e2:	d104      	bne.n	800b3ee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f240 4209 	movw	r2, #1033	; 0x409
 800b3ea:	829a      	strh	r2, [r3, #20]
 800b3ec:	e002      	b.n	800b3f4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	8b3a      	ldrh	r2, [r7, #24]
 800b3f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b3fa:	8b3b      	ldrh	r3, [r7, #24]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	6879      	ldr	r1, [r7, #4]
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f000 fa50 	bl	800b8a6 <USBH_CtlReq>
 800b406:	4603      	mov	r3, r0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	460b      	mov	r3, r1
 800b41a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	789b      	ldrb	r3, [r3, #2]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d10f      	bne.n	800b444 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2205      	movs	r2, #5
 800b42e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b430:	78fb      	ldrb	r3, [r7, #3]
 800b432:	b29a      	uxth	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b444:	2200      	movs	r2, #0
 800b446:	2100      	movs	r1, #0
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fa2c 	bl	800b8a6 <USBH_CtlReq>
 800b44e:	4603      	mov	r3, r0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	460b      	mov	r3, r1
 800b462:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	789b      	ldrb	r3, [r3, #2]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d10e      	bne.n	800b48a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2209      	movs	r2, #9
 800b476:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	887a      	ldrh	r2, [r7, #2]
 800b47c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b48a:	2200      	movs	r2, #0
 800b48c:	2100      	movs	r1, #0
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fa09 	bl	800b8a6 <USBH_CtlReq>
 800b494:	4603      	mov	r3, r0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	789b      	ldrb	r3, [r3, #2]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d10f      	bne.n	800b4d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2203      	movs	r2, #3
 800b4bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b4be:	78fb      	ldrb	r3, [r7, #3]
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f9e5 	bl	800b8a6 <USBH_CtlReq>
 800b4dc:	4603      	mov	r3, r0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3708      	adds	r7, #8
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b082      	sub	sp, #8
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	789b      	ldrb	r3, [r3, #2]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d10f      	bne.n	800b51a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b50c:	78fb      	ldrb	r3, [r7, #3]
 800b50e:	b29a      	uxth	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b51a:	2200      	movs	r2, #0
 800b51c:	2100      	movs	r1, #0
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f9c1 	bl	800b8a6 <USBH_CtlReq>
 800b524:	4603      	mov	r3, r0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	60b9      	str	r1, [r7, #8]
 800b538:	4613      	mov	r3, r2
 800b53a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	781a      	ldrb	r2, [r3, #0]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	785a      	ldrb	r2, [r3, #1]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	3302      	adds	r3, #2
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	b29a      	uxth	r2, r3
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	3303      	adds	r3, #3
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	021b      	lsls	r3, r3, #8
 800b55e:	b29b      	uxth	r3, r3
 800b560:	4313      	orrs	r3, r2
 800b562:	b29a      	uxth	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	791a      	ldrb	r2, [r3, #4]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	795a      	ldrb	r2, [r3, #5]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	799a      	ldrb	r2, [r3, #6]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	79da      	ldrb	r2, [r3, #7]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b588:	88fb      	ldrh	r3, [r7, #6]
 800b58a:	2b08      	cmp	r3, #8
 800b58c:	d939      	bls.n	800b602 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	3308      	adds	r3, #8
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	b29a      	uxth	r2, r3
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	3309      	adds	r3, #9
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	021b      	lsls	r3, r3, #8
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	330a      	adds	r3, #10
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	330b      	adds	r3, #11
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	021b      	lsls	r3, r3, #8
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	330c      	adds	r3, #12
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	330d      	adds	r3, #13
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	021b      	lsls	r3, r3, #8
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	7b9a      	ldrb	r2, [r3, #14]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	7bda      	ldrb	r2, [r3, #15]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	7c1a      	ldrb	r2, [r3, #16]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	7c5a      	ldrb	r2, [r3, #17]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	745a      	strb	r2, [r3, #17]
  }
}
 800b602:	bf00      	nop
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b08a      	sub	sp, #40	; 0x28
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	4613      	mov	r3, r2
 800b61a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b620:	2300      	movs	r3, #0
 800b622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b626:	2300      	movs	r3, #0
 800b628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	781a      	ldrb	r2, [r3, #0]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	785a      	ldrb	r2, [r3, #1]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	3302      	adds	r3, #2
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	b29a      	uxth	r2, r3
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	3303      	adds	r3, #3
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	b29b      	uxth	r3, r3
 800b650:	021b      	lsls	r3, r3, #8
 800b652:	b29b      	uxth	r3, r3
 800b654:	4313      	orrs	r3, r2
 800b656:	b29a      	uxth	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	791a      	ldrb	r2, [r3, #4]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	795a      	ldrb	r2, [r3, #5]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	799a      	ldrb	r2, [r3, #6]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	79da      	ldrb	r2, [r3, #7]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	7a1a      	ldrb	r2, [r3, #8]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b684:	88fb      	ldrh	r3, [r7, #6]
 800b686:	2b09      	cmp	r3, #9
 800b688:	d95f      	bls.n	800b74a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b68a:	2309      	movs	r3, #9
 800b68c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b68e:	2300      	movs	r3, #0
 800b690:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b692:	e051      	b.n	800b738 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b694:	f107 0316 	add.w	r3, r7, #22
 800b698:	4619      	mov	r1, r3
 800b69a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b69c:	f000 f8e8 	bl	800b870 <USBH_GetNextDesc>
 800b6a0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	785b      	ldrb	r3, [r3, #1]
 800b6a6:	2b04      	cmp	r3, #4
 800b6a8:	d146      	bne.n	800b738 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b6aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6ae:	221a      	movs	r2, #26
 800b6b0:	fb02 f303 	mul.w	r3, r2, r3
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	3302      	adds	r3, #2
 800b6bc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b6be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b6c0:	69f8      	ldr	r0, [r7, #28]
 800b6c2:	f000 f846 	bl	800b752 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b6d0:	e022      	b.n	800b718 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b6d2:	f107 0316 	add.w	r3, r7, #22
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6da:	f000 f8c9 	bl	800b870 <USBH_GetNextDesc>
 800b6de:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	785b      	ldrb	r3, [r3, #1]
 800b6e4:	2b05      	cmp	r3, #5
 800b6e6:	d117      	bne.n	800b718 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b6e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6ec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b6f0:	3201      	adds	r2, #1
 800b6f2:	00d2      	lsls	r2, r2, #3
 800b6f4:	211a      	movs	r1, #26
 800b6f6:	fb01 f303 	mul.w	r3, r1, r3
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	4413      	add	r3, r2
 800b702:	3304      	adds	r3, #4
 800b704:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b708:	69b8      	ldr	r0, [r7, #24]
 800b70a:	f000 f851 	bl	800b7b0 <USBH_ParseEPDesc>
            ep_ix++;
 800b70e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b712:	3301      	adds	r3, #1
 800b714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	791b      	ldrb	r3, [r3, #4]
 800b71c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b720:	429a      	cmp	r2, r3
 800b722:	d204      	bcs.n	800b72e <USBH_ParseCfgDesc+0x120>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	885a      	ldrh	r2, [r3, #2]
 800b728:	8afb      	ldrh	r3, [r7, #22]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d8d1      	bhi.n	800b6d2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b72e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b732:	3301      	adds	r3, #1
 800b734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d804      	bhi.n	800b74a <USBH_ParseCfgDesc+0x13c>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	885a      	ldrh	r2, [r3, #2]
 800b744:	8afb      	ldrh	r3, [r7, #22]
 800b746:	429a      	cmp	r2, r3
 800b748:	d8a4      	bhi.n	800b694 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b74a:	bf00      	nop
 800b74c:	3728      	adds	r7, #40	; 0x28
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b752:	b480      	push	{r7}
 800b754:	b083      	sub	sp, #12
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	781a      	ldrb	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	785a      	ldrb	r2, [r3, #1]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	789a      	ldrb	r2, [r3, #2]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	78da      	ldrb	r2, [r3, #3]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	791a      	ldrb	r2, [r3, #4]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	795a      	ldrb	r2, [r3, #5]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	799a      	ldrb	r2, [r3, #6]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	79da      	ldrb	r2, [r3, #7]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	7a1a      	ldrb	r2, [r3, #8]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	721a      	strb	r2, [r3, #8]
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	781a      	ldrb	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	785a      	ldrb	r2, [r3, #1]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	789a      	ldrb	r2, [r3, #2]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	78da      	ldrb	r2, [r3, #3]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	3305      	adds	r3, #5
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	021b      	lsls	r3, r3, #8
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	799a      	ldrb	r2, [r3, #6]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	719a      	strb	r2, [r3, #6]
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b087      	sub	sp, #28
 800b80e:	af00      	add	r7, sp, #0
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	60b9      	str	r1, [r7, #8]
 800b814:	4613      	mov	r3, r2
 800b816:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	3301      	adds	r3, #1
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	2b03      	cmp	r3, #3
 800b820:	d120      	bne.n	800b864 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	1e9a      	subs	r2, r3, #2
 800b828:	88fb      	ldrh	r3, [r7, #6]
 800b82a:	4293      	cmp	r3, r2
 800b82c:	bf28      	it	cs
 800b82e:	4613      	movcs	r3, r2
 800b830:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3302      	adds	r3, #2
 800b836:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b838:	2300      	movs	r3, #0
 800b83a:	82fb      	strh	r3, [r7, #22]
 800b83c:	e00b      	b.n	800b856 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b83e:	8afb      	ldrh	r3, [r7, #22]
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	4413      	add	r3, r2
 800b844:	781a      	ldrb	r2, [r3, #0]
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	3301      	adds	r3, #1
 800b84e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b850:	8afb      	ldrh	r3, [r7, #22]
 800b852:	3302      	adds	r3, #2
 800b854:	82fb      	strh	r3, [r7, #22]
 800b856:	8afa      	ldrh	r2, [r7, #22]
 800b858:	8abb      	ldrh	r3, [r7, #20]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d3ef      	bcc.n	800b83e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2200      	movs	r2, #0
 800b862:	701a      	strb	r2, [r3, #0]
  }
}
 800b864:	bf00      	nop
 800b866:	371c      	adds	r7, #28
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	881a      	ldrh	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	b29b      	uxth	r3, r3
 800b884:	4413      	add	r3, r2
 800b886:	b29a      	uxth	r2, r3
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4413      	add	r3, r2
 800b896:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b898:	68fb      	ldr	r3, [r7, #12]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3714      	adds	r7, #20
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b086      	sub	sp, #24
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	60f8      	str	r0, [r7, #12]
 800b8ae:	60b9      	str	r1, [r7, #8]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	789b      	ldrb	r3, [r3, #2]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d002      	beq.n	800b8c6 <USBH_CtlReq+0x20>
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d00f      	beq.n	800b8e4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b8c4:	e027      	b.n	800b916 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	88fa      	ldrh	r2, [r7, #6]
 800b8d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2202      	movs	r2, #2
 800b8dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b8e2:	e018      	b.n	800b916 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b8e4:	68f8      	ldr	r0, [r7, #12]
 800b8e6:	f000 f81b 	bl	800b920 <USBH_HandleControl>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <USBH_CtlReq+0x54>
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	d106      	bne.n	800b908 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2200      	movs	r2, #0
 800b904:	761a      	strb	r2, [r3, #24]
      break;
 800b906:	e005      	b.n	800b914 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b908:	7dfb      	ldrb	r3, [r7, #23]
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d102      	bne.n	800b914 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2201      	movs	r2, #1
 800b912:	709a      	strb	r2, [r3, #2]
      break;
 800b914:	bf00      	nop
  }
  return status;
 800b916:	7dfb      	ldrb	r3, [r7, #23]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af02      	add	r7, sp, #8
 800b926:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b928:	2301      	movs	r3, #1
 800b92a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	7e1b      	ldrb	r3, [r3, #24]
 800b934:	3b01      	subs	r3, #1
 800b936:	2b0a      	cmp	r3, #10
 800b938:	f200 8156 	bhi.w	800bbe8 <USBH_HandleControl+0x2c8>
 800b93c:	a201      	add	r2, pc, #4	; (adr r2, 800b944 <USBH_HandleControl+0x24>)
 800b93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b942:	bf00      	nop
 800b944:	0800b971 	.word	0x0800b971
 800b948:	0800b98b 	.word	0x0800b98b
 800b94c:	0800b9f5 	.word	0x0800b9f5
 800b950:	0800ba1b 	.word	0x0800ba1b
 800b954:	0800ba53 	.word	0x0800ba53
 800b958:	0800ba7d 	.word	0x0800ba7d
 800b95c:	0800bacf 	.word	0x0800bacf
 800b960:	0800baf1 	.word	0x0800baf1
 800b964:	0800bb2d 	.word	0x0800bb2d
 800b968:	0800bb53 	.word	0x0800bb53
 800b96c:	0800bb91 	.word	0x0800bb91
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f103 0110 	add.w	r1, r3, #16
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	795b      	ldrb	r3, [r3, #5]
 800b97a:	461a      	mov	r2, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f943 	bl	800bc08 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2202      	movs	r2, #2
 800b986:	761a      	strb	r2, [r3, #24]
      break;
 800b988:	e139      	b.n	800bbfe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	795b      	ldrb	r3, [r3, #5]
 800b98e:	4619      	mov	r1, r3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f003 ffbb 	bl	800f90c <USBH_LL_GetURBState>
 800b996:	4603      	mov	r3, r0
 800b998:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d11e      	bne.n	800b9de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	7c1b      	ldrb	r3, [r3, #16]
 800b9a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b9a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	8adb      	ldrh	r3, [r3, #22]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00a      	beq.n	800b9c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b9b2:	7b7b      	ldrb	r3, [r7, #13]
 800b9b4:	2b80      	cmp	r3, #128	; 0x80
 800b9b6:	d103      	bne.n	800b9c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2203      	movs	r2, #3
 800b9bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9be:	e115      	b.n	800bbec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2205      	movs	r2, #5
 800b9c4:	761a      	strb	r2, [r3, #24]
      break;
 800b9c6:	e111      	b.n	800bbec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b9c8:	7b7b      	ldrb	r3, [r7, #13]
 800b9ca:	2b80      	cmp	r3, #128	; 0x80
 800b9cc:	d103      	bne.n	800b9d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2209      	movs	r2, #9
 800b9d2:	761a      	strb	r2, [r3, #24]
      break;
 800b9d4:	e10a      	b.n	800bbec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2207      	movs	r2, #7
 800b9da:	761a      	strb	r2, [r3, #24]
      break;
 800b9dc:	e106      	b.n	800bbec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	2b04      	cmp	r3, #4
 800b9e2:	d003      	beq.n	800b9ec <USBH_HandleControl+0xcc>
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	f040 8100 	bne.w	800bbec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	220b      	movs	r2, #11
 800b9f0:	761a      	strb	r2, [r3, #24]
      break;
 800b9f2:	e0fb      	b.n	800bbec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6899      	ldr	r1, [r3, #8]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	899a      	ldrh	r2, [r3, #12]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	791b      	ldrb	r3, [r3, #4]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f93a 	bl	800bc86 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2204      	movs	r2, #4
 800ba16:	761a      	strb	r2, [r3, #24]
      break;
 800ba18:	e0f1      	b.n	800bbfe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	791b      	ldrb	r3, [r3, #4]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f003 ff73 	bl	800f90c <USBH_LL_GetURBState>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d102      	bne.n	800ba36 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2209      	movs	r2, #9
 800ba34:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	2b05      	cmp	r3, #5
 800ba3a:	d102      	bne.n	800ba42 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba40:	e0d6      	b.n	800bbf0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
 800ba44:	2b04      	cmp	r3, #4
 800ba46:	f040 80d3 	bne.w	800bbf0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	220b      	movs	r2, #11
 800ba4e:	761a      	strb	r2, [r3, #24]
      break;
 800ba50:	e0ce      	b.n	800bbf0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6899      	ldr	r1, [r3, #8]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	899a      	ldrh	r2, [r3, #12]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	795b      	ldrb	r3, [r3, #5]
 800ba5e:	2001      	movs	r0, #1
 800ba60:	9000      	str	r0, [sp, #0]
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f8ea 	bl	800bc3c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2206      	movs	r2, #6
 800ba78:	761a      	strb	r2, [r3, #24]
      break;
 800ba7a:	e0c0      	b.n	800bbfe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	795b      	ldrb	r3, [r3, #5]
 800ba80:	4619      	mov	r1, r3
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f003 ff42 	bl	800f90c <USBH_LL_GetURBState>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d103      	bne.n	800ba9a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2207      	movs	r2, #7
 800ba96:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba98:	e0ac      	b.n	800bbf4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
 800ba9c:	2b05      	cmp	r3, #5
 800ba9e:	d105      	bne.n	800baac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	220c      	movs	r2, #12
 800baa4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800baa6:	2303      	movs	r3, #3
 800baa8:	73fb      	strb	r3, [r7, #15]
      break;
 800baaa:	e0a3      	b.n	800bbf4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d103      	bne.n	800baba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2205      	movs	r2, #5
 800bab6:	761a      	strb	r2, [r3, #24]
      break;
 800bab8:	e09c      	b.n	800bbf4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800baba:	7bbb      	ldrb	r3, [r7, #14]
 800babc:	2b04      	cmp	r3, #4
 800babe:	f040 8099 	bne.w	800bbf4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	220b      	movs	r2, #11
 800bac6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bac8:	2302      	movs	r3, #2
 800baca:	73fb      	strb	r3, [r7, #15]
      break;
 800bacc:	e092      	b.n	800bbf4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	791b      	ldrb	r3, [r3, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	2100      	movs	r1, #0
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f8d5 	bl	800bc86 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2208      	movs	r2, #8
 800baec:	761a      	strb	r2, [r3, #24]

      break;
 800baee:	e086      	b.n	800bbfe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	791b      	ldrb	r3, [r3, #4]
 800baf4:	4619      	mov	r1, r3
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f003 ff08 	bl	800f90c <USBH_LL_GetURBState>
 800bafc:	4603      	mov	r3, r0
 800bafe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d105      	bne.n	800bb12 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	220d      	movs	r2, #13
 800bb0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb10:	e072      	b.n	800bbf8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	2b04      	cmp	r3, #4
 800bb16:	d103      	bne.n	800bb20 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	220b      	movs	r2, #11
 800bb1c:	761a      	strb	r2, [r3, #24]
      break;
 800bb1e:	e06b      	b.n	800bbf8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
 800bb22:	2b05      	cmp	r3, #5
 800bb24:	d168      	bne.n	800bbf8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bb26:	2303      	movs	r3, #3
 800bb28:	73fb      	strb	r3, [r7, #15]
      break;
 800bb2a:	e065      	b.n	800bbf8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	795b      	ldrb	r3, [r3, #5]
 800bb30:	2201      	movs	r2, #1
 800bb32:	9200      	str	r2, [sp, #0]
 800bb34:	2200      	movs	r2, #0
 800bb36:	2100      	movs	r1, #0
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 f87f 	bl	800bc3c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	220a      	movs	r2, #10
 800bb4e:	761a      	strb	r2, [r3, #24]
      break;
 800bb50:	e055      	b.n	800bbfe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	795b      	ldrb	r3, [r3, #5]
 800bb56:	4619      	mov	r1, r3
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f003 fed7 	bl	800f90c <USBH_LL_GetURBState>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d105      	bne.n	800bb74 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	220d      	movs	r2, #13
 800bb70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bb72:	e043      	b.n	800bbfc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d103      	bne.n	800bb82 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2209      	movs	r2, #9
 800bb7e:	761a      	strb	r2, [r3, #24]
      break;
 800bb80:	e03c      	b.n	800bbfc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bb82:	7bbb      	ldrb	r3, [r7, #14]
 800bb84:	2b04      	cmp	r3, #4
 800bb86:	d139      	bne.n	800bbfc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	220b      	movs	r2, #11
 800bb8c:	761a      	strb	r2, [r3, #24]
      break;
 800bb8e:	e035      	b.n	800bbfc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7e5b      	ldrb	r3, [r3, #25]
 800bb94:	3301      	adds	r3, #1
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	765a      	strb	r2, [r3, #25]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	7e5b      	ldrb	r3, [r3, #25]
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d806      	bhi.n	800bbb2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bbb0:	e025      	b.n	800bbfe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbb8:	2106      	movs	r1, #6
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	795b      	ldrb	r3, [r3, #5]
 800bbc8:	4619      	mov	r1, r3
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f90c 	bl	800bde8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	791b      	ldrb	r3, [r3, #4]
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f906 	bl	800bde8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bbe2:	2302      	movs	r3, #2
 800bbe4:	73fb      	strb	r3, [r7, #15]
      break;
 800bbe6:	e00a      	b.n	800bbfe <USBH_HandleControl+0x2de>

    default:
      break;
 800bbe8:	bf00      	nop
 800bbea:	e008      	b.n	800bbfe <USBH_HandleControl+0x2de>
      break;
 800bbec:	bf00      	nop
 800bbee:	e006      	b.n	800bbfe <USBH_HandleControl+0x2de>
      break;
 800bbf0:	bf00      	nop
 800bbf2:	e004      	b.n	800bbfe <USBH_HandleControl+0x2de>
      break;
 800bbf4:	bf00      	nop
 800bbf6:	e002      	b.n	800bbfe <USBH_HandleControl+0x2de>
      break;
 800bbf8:	bf00      	nop
 800bbfa:	e000      	b.n	800bbfe <USBH_HandleControl+0x2de>
      break;
 800bbfc:	bf00      	nop
  }

  return status;
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af04      	add	r7, sp, #16
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	4613      	mov	r3, r2
 800bc14:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc16:	79f9      	ldrb	r1, [r7, #7]
 800bc18:	2300      	movs	r3, #0
 800bc1a:	9303      	str	r3, [sp, #12]
 800bc1c:	2308      	movs	r3, #8
 800bc1e:	9302      	str	r3, [sp, #8]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	9301      	str	r3, [sp, #4]
 800bc24:	2300      	movs	r3, #0
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	2300      	movs	r3, #0
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f003 fe3c 	bl	800f8aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b088      	sub	sp, #32
 800bc40:	af04      	add	r7, sp, #16
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	4611      	mov	r1, r2
 800bc48:	461a      	mov	r2, r3
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	80fb      	strh	r3, [r7, #6]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc60:	7979      	ldrb	r1, [r7, #5]
 800bc62:	7e3b      	ldrb	r3, [r7, #24]
 800bc64:	9303      	str	r3, [sp, #12]
 800bc66:	88fb      	ldrh	r3, [r7, #6]
 800bc68:	9302      	str	r3, [sp, #8]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	2301      	movs	r3, #1
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	2300      	movs	r3, #0
 800bc74:	2200      	movs	r2, #0
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f003 fe17 	bl	800f8aa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b088      	sub	sp, #32
 800bc8a:	af04      	add	r7, sp, #16
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	4611      	mov	r1, r2
 800bc92:	461a      	mov	r2, r3
 800bc94:	460b      	mov	r3, r1
 800bc96:	80fb      	strh	r3, [r7, #6]
 800bc98:	4613      	mov	r3, r2
 800bc9a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc9c:	7979      	ldrb	r1, [r7, #5]
 800bc9e:	2300      	movs	r3, #0
 800bca0:	9303      	str	r3, [sp, #12]
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	9302      	str	r3, [sp, #8]
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	9301      	str	r3, [sp, #4]
 800bcaa:	2301      	movs	r3, #1
 800bcac:	9300      	str	r3, [sp, #0]
 800bcae:	2300      	movs	r3, #0
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f003 fdf9 	bl	800f8aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bcb8:	2300      	movs	r3, #0

}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b088      	sub	sp, #32
 800bcc6:	af04      	add	r7, sp, #16
 800bcc8:	60f8      	str	r0, [r7, #12]
 800bcca:	60b9      	str	r1, [r7, #8]
 800bccc:	4611      	mov	r1, r2
 800bcce:	461a      	mov	r2, r3
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	80fb      	strh	r3, [r7, #6]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bce2:	2300      	movs	r3, #0
 800bce4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bce6:	7979      	ldrb	r1, [r7, #5]
 800bce8:	7e3b      	ldrb	r3, [r7, #24]
 800bcea:	9303      	str	r3, [sp, #12]
 800bcec:	88fb      	ldrh	r3, [r7, #6]
 800bcee:	9302      	str	r3, [sp, #8]
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	9301      	str	r3, [sp, #4]
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f003 fdd4 	bl	800f8aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af04      	add	r7, sp, #16
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	4611      	mov	r1, r2
 800bd18:	461a      	mov	r2, r3
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	80fb      	strh	r3, [r7, #6]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bd22:	7979      	ldrb	r1, [r7, #5]
 800bd24:	2300      	movs	r3, #0
 800bd26:	9303      	str	r3, [sp, #12]
 800bd28:	88fb      	ldrh	r3, [r7, #6]
 800bd2a:	9302      	str	r3, [sp, #8]
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	9301      	str	r3, [sp, #4]
 800bd30:	2301      	movs	r3, #1
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	2302      	movs	r3, #2
 800bd36:	2201      	movs	r2, #1
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f003 fdb6 	bl	800f8aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b086      	sub	sp, #24
 800bd4c:	af04      	add	r7, sp, #16
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	4608      	mov	r0, r1
 800bd52:	4611      	mov	r1, r2
 800bd54:	461a      	mov	r2, r3
 800bd56:	4603      	mov	r3, r0
 800bd58:	70fb      	strb	r3, [r7, #3]
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	70bb      	strb	r3, [r7, #2]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bd62:	7878      	ldrb	r0, [r7, #1]
 800bd64:	78ba      	ldrb	r2, [r7, #2]
 800bd66:	78f9      	ldrb	r1, [r7, #3]
 800bd68:	8b3b      	ldrh	r3, [r7, #24]
 800bd6a:	9302      	str	r3, [sp, #8]
 800bd6c:	7d3b      	ldrb	r3, [r7, #20]
 800bd6e:	9301      	str	r3, [sp, #4]
 800bd70:	7c3b      	ldrb	r3, [r7, #16]
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	4603      	mov	r3, r0
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f003 fd49 	bl	800f80e <USBH_LL_OpenPipe>

  return USBH_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bd92:	78fb      	ldrb	r3, [r7, #3]
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f003 fd68 	bl	800f86c <USBH_LL_ClosePipe>

  return USBH_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b084      	sub	sp, #16
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	460b      	mov	r3, r1
 800bdb0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f836 	bl	800be24 <USBH_GetFreePipe>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bdbc:	89fb      	ldrh	r3, [r7, #14]
 800bdbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d00a      	beq.n	800bddc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bdc6:	78fa      	ldrb	r2, [r7, #3]
 800bdc8:	89fb      	ldrh	r3, [r7, #14]
 800bdca:	f003 030f 	and.w	r3, r3, #15
 800bdce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bdd2:	6879      	ldr	r1, [r7, #4]
 800bdd4:	33e0      	adds	r3, #224	; 0xe0
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	440b      	add	r3, r1
 800bdda:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bddc:	89fb      	ldrh	r3, [r7, #14]
 800bdde:	b2db      	uxtb	r3, r3
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bdf4:	78fb      	ldrb	r3, [r7, #3]
 800bdf6:	2b0a      	cmp	r3, #10
 800bdf8:	d80d      	bhi.n	800be16 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bdfa:	78fb      	ldrb	r3, [r7, #3]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	33e0      	adds	r3, #224	; 0xe0
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	78fb      	ldrb	r3, [r7, #3]
 800be08:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	33e0      	adds	r3, #224	; 0xe0
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	440b      	add	r3, r1
 800be14:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800be2c:	2300      	movs	r3, #0
 800be2e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800be30:	2300      	movs	r3, #0
 800be32:	73fb      	strb	r3, [r7, #15]
 800be34:	e00f      	b.n	800be56 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	33e0      	adds	r3, #224	; 0xe0
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4413      	add	r3, r2
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be46:	2b00      	cmp	r3, #0
 800be48:	d102      	bne.n	800be50 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	e007      	b.n	800be60 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800be50:	7bfb      	ldrb	r3, [r7, #15]
 800be52:	3301      	adds	r3, #1
 800be54:	73fb      	strb	r3, [r7, #15]
 800be56:	7bfb      	ldrb	r3, [r7, #15]
 800be58:	2b0a      	cmp	r3, #10
 800be5a:	d9ec      	bls.n	800be36 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800be5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	4603      	mov	r3, r0
 800be74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800be76:	79fb      	ldrb	r3, [r7, #7]
 800be78:	4a08      	ldr	r2, [pc, #32]	; (800be9c <disk_status+0x30>)
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4413      	add	r3, r2
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	79fa      	ldrb	r2, [r7, #7]
 800be84:	4905      	ldr	r1, [pc, #20]	; (800be9c <disk_status+0x30>)
 800be86:	440a      	add	r2, r1
 800be88:	7a12      	ldrb	r2, [r2, #8]
 800be8a:	4610      	mov	r0, r2
 800be8c:	4798      	blx	r3
 800be8e:	4603      	mov	r3, r0
 800be90:	73fb      	strb	r3, [r7, #15]
  return stat;
 800be92:	7bfb      	ldrb	r3, [r7, #15]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	200013e0 	.word	0x200013e0

0800bea0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	4603      	mov	r3, r0
 800bea8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800beae:	79fb      	ldrb	r3, [r7, #7]
 800beb0:	4a0d      	ldr	r2, [pc, #52]	; (800bee8 <disk_initialize+0x48>)
 800beb2:	5cd3      	ldrb	r3, [r2, r3]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d111      	bne.n	800bedc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800beb8:	79fb      	ldrb	r3, [r7, #7]
 800beba:	4a0b      	ldr	r2, [pc, #44]	; (800bee8 <disk_initialize+0x48>)
 800bebc:	2101      	movs	r1, #1
 800bebe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bec0:	79fb      	ldrb	r3, [r7, #7]
 800bec2:	4a09      	ldr	r2, [pc, #36]	; (800bee8 <disk_initialize+0x48>)
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	4413      	add	r3, r2
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	79fa      	ldrb	r2, [r7, #7]
 800bece:	4906      	ldr	r1, [pc, #24]	; (800bee8 <disk_initialize+0x48>)
 800bed0:	440a      	add	r2, r1
 800bed2:	7a12      	ldrb	r2, [r2, #8]
 800bed4:	4610      	mov	r0, r2
 800bed6:	4798      	blx	r3
 800bed8:	4603      	mov	r3, r0
 800beda:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	200013e0 	.word	0x200013e0

0800beec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800beec:	b590      	push	{r4, r7, lr}
 800beee:	b087      	sub	sp, #28
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60b9      	str	r1, [r7, #8]
 800bef4:	607a      	str	r2, [r7, #4]
 800bef6:	603b      	str	r3, [r7, #0]
 800bef8:	4603      	mov	r3, r0
 800befa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800befc:	7bfb      	ldrb	r3, [r7, #15]
 800befe:	4a0a      	ldr	r2, [pc, #40]	; (800bf28 <disk_read+0x3c>)
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	4413      	add	r3, r2
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	689c      	ldr	r4, [r3, #8]
 800bf08:	7bfb      	ldrb	r3, [r7, #15]
 800bf0a:	4a07      	ldr	r2, [pc, #28]	; (800bf28 <disk_read+0x3c>)
 800bf0c:	4413      	add	r3, r2
 800bf0e:	7a18      	ldrb	r0, [r3, #8]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	68b9      	ldr	r1, [r7, #8]
 800bf16:	47a0      	blx	r4
 800bf18:	4603      	mov	r3, r0
 800bf1a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	371c      	adds	r7, #28
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd90      	pop	{r4, r7, pc}
 800bf26:	bf00      	nop
 800bf28:	200013e0 	.word	0x200013e0

0800bf2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bf2c:	b590      	push	{r4, r7, lr}
 800bf2e:	b087      	sub	sp, #28
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60b9      	str	r1, [r7, #8]
 800bf34:	607a      	str	r2, [r7, #4]
 800bf36:	603b      	str	r3, [r7, #0]
 800bf38:	4603      	mov	r3, r0
 800bf3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	4a0a      	ldr	r2, [pc, #40]	; (800bf68 <disk_write+0x3c>)
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	68dc      	ldr	r4, [r3, #12]
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	4a07      	ldr	r2, [pc, #28]	; (800bf68 <disk_write+0x3c>)
 800bf4c:	4413      	add	r3, r2
 800bf4e:	7a18      	ldrb	r0, [r3, #8]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	68b9      	ldr	r1, [r7, #8]
 800bf56:	47a0      	blx	r4
 800bf58:	4603      	mov	r3, r0
 800bf5a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	371c      	adds	r7, #28
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd90      	pop	{r4, r7, pc}
 800bf66:	bf00      	nop
 800bf68:	200013e0 	.word	0x200013e0

0800bf6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	4603      	mov	r3, r0
 800bf74:	603a      	str	r2, [r7, #0]
 800bf76:	71fb      	strb	r3, [r7, #7]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bf7c:	79fb      	ldrb	r3, [r7, #7]
 800bf7e:	4a09      	ldr	r2, [pc, #36]	; (800bfa4 <disk_ioctl+0x38>)
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	79fa      	ldrb	r2, [r7, #7]
 800bf8a:	4906      	ldr	r1, [pc, #24]	; (800bfa4 <disk_ioctl+0x38>)
 800bf8c:	440a      	add	r2, r1
 800bf8e:	7a10      	ldrb	r0, [r2, #8]
 800bf90:	79b9      	ldrb	r1, [r7, #6]
 800bf92:	683a      	ldr	r2, [r7, #0]
 800bf94:	4798      	blx	r3
 800bf96:	4603      	mov	r3, r0
 800bf98:	73fb      	strb	r3, [r7, #15]
  return res;
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	200013e0 	.word	0x200013e0

0800bfa8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bfb8:	89fb      	ldrh	r3, [r7, #14]
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	b21a      	sxth	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	b21b      	sxth	r3, r3
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	b21b      	sxth	r3, r3
 800bfc8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bfca:	89fb      	ldrh	r3, [r7, #14]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3303      	adds	r3, #3
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	021b      	lsls	r3, r3, #8
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	3202      	adds	r2, #2
 800bff0:	7812      	ldrb	r2, [r2, #0]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	021b      	lsls	r3, r3, #8
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	3201      	adds	r2, #1
 800bffe:	7812      	ldrb	r2, [r2, #0]
 800c000:	4313      	orrs	r3, r2
 800c002:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	021b      	lsls	r3, r3, #8
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	7812      	ldrb	r2, [r2, #0]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c010:	68fb      	ldr	r3, [r7, #12]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c01e:	b480      	push	{r7}
 800c020:	b083      	sub	sp, #12
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	460b      	mov	r3, r1
 800c028:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	607a      	str	r2, [r7, #4]
 800c030:	887a      	ldrh	r2, [r7, #2]
 800c032:	b2d2      	uxtb	r2, r2
 800c034:	701a      	strb	r2, [r3, #0]
 800c036:	887b      	ldrh	r3, [r7, #2]
 800c038:	0a1b      	lsrs	r3, r3, #8
 800c03a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	607a      	str	r2, [r7, #4]
 800c042:	887a      	ldrh	r2, [r7, #2]
 800c044:	b2d2      	uxtb	r2, r2
 800c046:	701a      	strb	r2, [r3, #0]
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	b2d2      	uxtb	r2, r2
 800c068:	701a      	strb	r2, [r3, #0]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	0a1b      	lsrs	r3, r3, #8
 800c06e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	607a      	str	r2, [r7, #4]
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	b2d2      	uxtb	r2, r2
 800c07a:	701a      	strb	r2, [r3, #0]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	0a1b      	lsrs	r3, r3, #8
 800c080:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	683a      	ldr	r2, [r7, #0]
 800c08a:	b2d2      	uxtb	r2, r2
 800c08c:	701a      	strb	r2, [r3, #0]
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	0a1b      	lsrs	r3, r3, #8
 800c092:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	607a      	str	r2, [r7, #4]
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	b2d2      	uxtb	r2, r2
 800c09e:	701a      	strb	r2, [r3, #0]
}
 800c0a0:	bf00      	nop
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c0ac:	b480      	push	{r7}
 800c0ae:	b087      	sub	sp, #28
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00d      	beq.n	800c0e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c0c6:	693a      	ldr	r2, [r7, #16]
 800c0c8:	1c53      	adds	r3, r2, #1
 800c0ca:	613b      	str	r3, [r7, #16]
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	1c59      	adds	r1, r3, #1
 800c0d0:	6179      	str	r1, [r7, #20]
 800c0d2:	7812      	ldrb	r2, [r2, #0]
 800c0d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	607b      	str	r3, [r7, #4]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d1f1      	bne.n	800c0c6 <mem_cpy+0x1a>
	}
}
 800c0e2:	bf00      	nop
 800c0e4:	371c      	adds	r7, #28
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c0ee:	b480      	push	{r7}
 800c0f0:	b087      	sub	sp, #28
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	60f8      	str	r0, [r7, #12]
 800c0f6:	60b9      	str	r1, [r7, #8]
 800c0f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	1c5a      	adds	r2, r3, #1
 800c102:	617a      	str	r2, [r7, #20]
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	b2d2      	uxtb	r2, r2
 800c108:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	3b01      	subs	r3, #1
 800c10e:	607b      	str	r3, [r7, #4]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1f3      	bne.n	800c0fe <mem_set+0x10>
}
 800c116:	bf00      	nop
 800c118:	bf00      	nop
 800c11a:	371c      	adds	r7, #28
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c124:	b480      	push	{r7}
 800c126:	b089      	sub	sp, #36	; 0x24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	61fb      	str	r3, [r7, #28]
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	61fa      	str	r2, [r7, #28]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	4619      	mov	r1, r3
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	1c5a      	adds	r2, r3, #1
 800c14a:	61ba      	str	r2, [r7, #24]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	1acb      	subs	r3, r1, r3
 800c150:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	3b01      	subs	r3, #1
 800c156:	607b      	str	r3, [r7, #4]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d002      	beq.n	800c164 <mem_cmp+0x40>
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0eb      	beq.n	800c13c <mem_cmp+0x18>

	return r;
 800c164:	697b      	ldr	r3, [r7, #20]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3724      	adds	r7, #36	; 0x24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c172:	b480      	push	{r7}
 800c174:	b083      	sub	sp, #12
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c17c:	e002      	b.n	800c184 <chk_chr+0x12>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	3301      	adds	r3, #1
 800c182:	607b      	str	r3, [r7, #4]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d005      	beq.n	800c198 <chk_chr+0x26>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	461a      	mov	r2, r3
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	4293      	cmp	r3, r2
 800c196:	d1f2      	bne.n	800c17e <chk_chr+0xc>
	return *str;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	781b      	ldrb	r3, [r3, #0]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	60bb      	str	r3, [r7, #8]
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	e029      	b.n	800c210 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c1bc:	4a27      	ldr	r2, [pc, #156]	; (800c25c <chk_lock+0xb4>)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	011b      	lsls	r3, r3, #4
 800c1c2:	4413      	add	r3, r2
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d01d      	beq.n	800c206 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1ca:	4a24      	ldr	r2, [pc, #144]	; (800c25c <chk_lock+0xb4>)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	011b      	lsls	r3, r3, #4
 800c1d0:	4413      	add	r3, r2
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d116      	bne.n	800c20a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c1dc:	4a1f      	ldr	r2, [pc, #124]	; (800c25c <chk_lock+0xb4>)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	011b      	lsls	r3, r3, #4
 800c1e2:	4413      	add	r3, r2
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d10c      	bne.n	800c20a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1f0:	4a1a      	ldr	r2, [pc, #104]	; (800c25c <chk_lock+0xb4>)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	011b      	lsls	r3, r3, #4
 800c1f6:	4413      	add	r3, r2
 800c1f8:	3308      	adds	r3, #8
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c200:	429a      	cmp	r2, r3
 800c202:	d102      	bne.n	800c20a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c204:	e007      	b.n	800c216 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c206:	2301      	movs	r3, #1
 800c208:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	3301      	adds	r3, #1
 800c20e:	60fb      	str	r3, [r7, #12]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d9d2      	bls.n	800c1bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d109      	bne.n	800c230 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d102      	bne.n	800c228 <chk_lock+0x80>
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2b02      	cmp	r3, #2
 800c226:	d101      	bne.n	800c22c <chk_lock+0x84>
 800c228:	2300      	movs	r3, #0
 800c22a:	e010      	b.n	800c24e <chk_lock+0xa6>
 800c22c:	2312      	movs	r3, #18
 800c22e:	e00e      	b.n	800c24e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d108      	bne.n	800c248 <chk_lock+0xa0>
 800c236:	4a09      	ldr	r2, [pc, #36]	; (800c25c <chk_lock+0xb4>)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	011b      	lsls	r3, r3, #4
 800c23c:	4413      	add	r3, r2
 800c23e:	330c      	adds	r3, #12
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c246:	d101      	bne.n	800c24c <chk_lock+0xa4>
 800c248:	2310      	movs	r3, #16
 800c24a:	e000      	b.n	800c24e <chk_lock+0xa6>
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3714      	adds	r7, #20
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	200011c0 	.word	0x200011c0

0800c260 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c266:	2300      	movs	r3, #0
 800c268:	607b      	str	r3, [r7, #4]
 800c26a:	e002      	b.n	800c272 <enq_lock+0x12>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3301      	adds	r3, #1
 800c270:	607b      	str	r3, [r7, #4]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d806      	bhi.n	800c286 <enq_lock+0x26>
 800c278:	4a09      	ldr	r2, [pc, #36]	; (800c2a0 <enq_lock+0x40>)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	011b      	lsls	r3, r3, #4
 800c27e:	4413      	add	r3, r2
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1f2      	bne.n	800c26c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b02      	cmp	r3, #2
 800c28a:	bf14      	ite	ne
 800c28c:	2301      	movne	r3, #1
 800c28e:	2300      	moveq	r3, #0
 800c290:	b2db      	uxtb	r3, r3
}
 800c292:	4618      	mov	r0, r3
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	200011c0 	.word	0x200011c0

0800c2a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60fb      	str	r3, [r7, #12]
 800c2b2:	e01f      	b.n	800c2f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c2b4:	4a41      	ldr	r2, [pc, #260]	; (800c3bc <inc_lock+0x118>)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	011b      	lsls	r3, r3, #4
 800c2ba:	4413      	add	r3, r2
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d113      	bne.n	800c2ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c2c6:	4a3d      	ldr	r2, [pc, #244]	; (800c3bc <inc_lock+0x118>)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	4413      	add	r3, r2
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d109      	bne.n	800c2ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c2da:	4a38      	ldr	r2, [pc, #224]	; (800c3bc <inc_lock+0x118>)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	011b      	lsls	r3, r3, #4
 800c2e0:	4413      	add	r3, r2
 800c2e2:	3308      	adds	r3, #8
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d006      	beq.n	800c2fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d9dc      	bls.n	800c2b4 <inc_lock+0x10>
 800c2fa:	e000      	b.n	800c2fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c2fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2b02      	cmp	r3, #2
 800c302:	d132      	bne.n	800c36a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c304:	2300      	movs	r3, #0
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	e002      	b.n	800c310 <inc_lock+0x6c>
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	3301      	adds	r3, #1
 800c30e:	60fb      	str	r3, [r7, #12]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d806      	bhi.n	800c324 <inc_lock+0x80>
 800c316:	4a29      	ldr	r2, [pc, #164]	; (800c3bc <inc_lock+0x118>)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	011b      	lsls	r3, r3, #4
 800c31c:	4413      	add	r3, r2
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1f2      	bne.n	800c30a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b02      	cmp	r3, #2
 800c328:	d101      	bne.n	800c32e <inc_lock+0x8a>
 800c32a:	2300      	movs	r3, #0
 800c32c:	e040      	b.n	800c3b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	4922      	ldr	r1, [pc, #136]	; (800c3bc <inc_lock+0x118>)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	011b      	lsls	r3, r3, #4
 800c338:	440b      	add	r3, r1
 800c33a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	689a      	ldr	r2, [r3, #8]
 800c340:	491e      	ldr	r1, [pc, #120]	; (800c3bc <inc_lock+0x118>)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	011b      	lsls	r3, r3, #4
 800c346:	440b      	add	r3, r1
 800c348:	3304      	adds	r3, #4
 800c34a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	695a      	ldr	r2, [r3, #20]
 800c350:	491a      	ldr	r1, [pc, #104]	; (800c3bc <inc_lock+0x118>)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	011b      	lsls	r3, r3, #4
 800c356:	440b      	add	r3, r1
 800c358:	3308      	adds	r3, #8
 800c35a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c35c:	4a17      	ldr	r2, [pc, #92]	; (800c3bc <inc_lock+0x118>)
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	011b      	lsls	r3, r3, #4
 800c362:	4413      	add	r3, r2
 800c364:	330c      	adds	r3, #12
 800c366:	2200      	movs	r2, #0
 800c368:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d009      	beq.n	800c384 <inc_lock+0xe0>
 800c370:	4a12      	ldr	r2, [pc, #72]	; (800c3bc <inc_lock+0x118>)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	011b      	lsls	r3, r3, #4
 800c376:	4413      	add	r3, r2
 800c378:	330c      	adds	r3, #12
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <inc_lock+0xe0>
 800c380:	2300      	movs	r3, #0
 800c382:	e015      	b.n	800c3b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d108      	bne.n	800c39c <inc_lock+0xf8>
 800c38a:	4a0c      	ldr	r2, [pc, #48]	; (800c3bc <inc_lock+0x118>)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	011b      	lsls	r3, r3, #4
 800c390:	4413      	add	r3, r2
 800c392:	330c      	adds	r3, #12
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	3301      	adds	r3, #1
 800c398:	b29a      	uxth	r2, r3
 800c39a:	e001      	b.n	800c3a0 <inc_lock+0xfc>
 800c39c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3a0:	4906      	ldr	r1, [pc, #24]	; (800c3bc <inc_lock+0x118>)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	011b      	lsls	r3, r3, #4
 800c3a6:	440b      	add	r3, r1
 800c3a8:	330c      	adds	r3, #12
 800c3aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3301      	adds	r3, #1
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	200011c0 	.word	0x200011c0

0800c3c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	607b      	str	r3, [r7, #4]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d825      	bhi.n	800c420 <dec_lock+0x60>
		n = Files[i].ctr;
 800c3d4:	4a17      	ldr	r2, [pc, #92]	; (800c434 <dec_lock+0x74>)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	011b      	lsls	r3, r3, #4
 800c3da:	4413      	add	r3, r2
 800c3dc:	330c      	adds	r3, #12
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c3e2:	89fb      	ldrh	r3, [r7, #14]
 800c3e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3e8:	d101      	bne.n	800c3ee <dec_lock+0x2e>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c3ee:	89fb      	ldrh	r3, [r7, #14]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <dec_lock+0x3a>
 800c3f4:	89fb      	ldrh	r3, [r7, #14]
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c3fa:	4a0e      	ldr	r2, [pc, #56]	; (800c434 <dec_lock+0x74>)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	4413      	add	r3, r2
 800c402:	330c      	adds	r3, #12
 800c404:	89fa      	ldrh	r2, [r7, #14]
 800c406:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c408:	89fb      	ldrh	r3, [r7, #14]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d105      	bne.n	800c41a <dec_lock+0x5a>
 800c40e:	4a09      	ldr	r2, [pc, #36]	; (800c434 <dec_lock+0x74>)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	011b      	lsls	r3, r3, #4
 800c414:	4413      	add	r3, r2
 800c416:	2200      	movs	r2, #0
 800c418:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	737b      	strb	r3, [r7, #13]
 800c41e:	e001      	b.n	800c424 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c420:	2302      	movs	r3, #2
 800c422:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c424:	7b7b      	ldrb	r3, [r7, #13]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	200011c0 	.word	0x200011c0

0800c438 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c440:	2300      	movs	r3, #0
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	e010      	b.n	800c468 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c446:	4a0d      	ldr	r2, [pc, #52]	; (800c47c <clear_lock+0x44>)
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	011b      	lsls	r3, r3, #4
 800c44c:	4413      	add	r3, r2
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	429a      	cmp	r2, r3
 800c454:	d105      	bne.n	800c462 <clear_lock+0x2a>
 800c456:	4a09      	ldr	r2, [pc, #36]	; (800c47c <clear_lock+0x44>)
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	011b      	lsls	r3, r3, #4
 800c45c:	4413      	add	r3, r2
 800c45e:	2200      	movs	r2, #0
 800c460:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3301      	adds	r3, #1
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d9eb      	bls.n	800c446 <clear_lock+0xe>
	}
}
 800c46e:	bf00      	nop
 800c470:	bf00      	nop
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	200011c0 	.word	0x200011c0

0800c480 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c488:	2300      	movs	r3, #0
 800c48a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	78db      	ldrb	r3, [r3, #3]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d034      	beq.n	800c4fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c498:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	7858      	ldrb	r0, [r3, #1]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	f7ff fd40 	bl	800bf2c <disk_write>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d002      	beq.n	800c4b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	73fb      	strb	r3, [r7, #15]
 800c4b6:	e022      	b.n	800c4fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c2:	697a      	ldr	r2, [r7, #20]
 800c4c4:	1ad2      	subs	r2, r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	69db      	ldr	r3, [r3, #28]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d217      	bcs.n	800c4fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	789b      	ldrb	r3, [r3, #2]
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	e010      	b.n	800c4f8 <sync_window+0x78>
					wsect += fs->fsize;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	69db      	ldr	r3, [r3, #28]
 800c4da:	697a      	ldr	r2, [r7, #20]
 800c4dc:	4413      	add	r3, r2
 800c4de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	7858      	ldrb	r0, [r3, #1]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	697a      	ldr	r2, [r7, #20]
 800c4ee:	f7ff fd1d 	bl	800bf2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	613b      	str	r3, [r7, #16]
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d8eb      	bhi.n	800c4d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c512:	2300      	movs	r3, #0
 800c514:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d01b      	beq.n	800c558 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff ffad 	bl	800c480 <sync_window>
 800c526:	4603      	mov	r3, r0
 800c528:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c52a:	7bfb      	ldrb	r3, [r7, #15]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d113      	bne.n	800c558 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	7858      	ldrb	r0, [r3, #1]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c53a:	2301      	movs	r3, #1
 800c53c:	683a      	ldr	r2, [r7, #0]
 800c53e:	f7ff fcd5 	bl	800beec <disk_read>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d004      	beq.n	800c552 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c548:	f04f 33ff 	mov.w	r3, #4294967295
 800c54c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c54e:	2301      	movs	r3, #1
 800c550:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c558:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
	...

0800c564 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7ff ff87 	bl	800c480 <sync_window>
 800c572:	4603      	mov	r3, r0
 800c574:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c576:	7bfb      	ldrb	r3, [r7, #15]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d158      	bne.n	800c62e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	2b03      	cmp	r3, #3
 800c582:	d148      	bne.n	800c616 <sync_fs+0xb2>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	791b      	ldrb	r3, [r3, #4]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d144      	bne.n	800c616 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	3334      	adds	r3, #52	; 0x34
 800c590:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c594:	2100      	movs	r1, #0
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff fda9 	bl	800c0ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	3334      	adds	r3, #52	; 0x34
 800c5a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5a4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7ff fd38 	bl	800c01e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	3334      	adds	r3, #52	; 0x34
 800c5b2:	4921      	ldr	r1, [pc, #132]	; (800c638 <sync_fs+0xd4>)
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7ff fd4d 	bl	800c054 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	3334      	adds	r3, #52	; 0x34
 800c5be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c5c2:	491e      	ldr	r1, [pc, #120]	; (800c63c <sync_fs+0xd8>)
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff fd45 	bl	800c054 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	3334      	adds	r3, #52	; 0x34
 800c5ce:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4610      	mov	r0, r2
 800c5da:	f7ff fd3b 	bl	800c054 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3334      	adds	r3, #52	; 0x34
 800c5e2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	f7ff fd31 	bl	800c054 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	1c5a      	adds	r2, r3, #1
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	7858      	ldrb	r0, [r3, #1]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c60a:	2301      	movs	r3, #1
 800c60c:	f7ff fc8e 	bl	800bf2c <disk_write>
			fs->fsi_flag = 0;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	785b      	ldrb	r3, [r3, #1]
 800c61a:	2200      	movs	r2, #0
 800c61c:	2100      	movs	r1, #0
 800c61e:	4618      	mov	r0, r3
 800c620:	f7ff fca4 	bl	800bf6c <disk_ioctl>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d001      	beq.n	800c62e <sync_fs+0xca>
 800c62a:	2301      	movs	r3, #1
 800c62c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	41615252 	.word	0x41615252
 800c63c:	61417272 	.word	0x61417272

0800c640 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	3b02      	subs	r3, #2
 800c64e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	3b02      	subs	r3, #2
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d301      	bcc.n	800c660 <clust2sect+0x20>
 800c65c:	2300      	movs	r3, #0
 800c65e:	e008      	b.n	800c672 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	895b      	ldrh	r3, [r3, #10]
 800c664:	461a      	mov	r2, r3
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	fb03 f202 	mul.w	r2, r3, r2
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c670:	4413      	add	r3, r2
}
 800c672:	4618      	mov	r0, r3
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b086      	sub	sp, #24
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
 800c686:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d904      	bls.n	800c69e <get_fat+0x20>
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d302      	bcc.n	800c6a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c69e:	2301      	movs	r3, #1
 800c6a0:	617b      	str	r3, [r7, #20]
 800c6a2:	e08f      	b.n	800c7c4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	2b03      	cmp	r3, #3
 800c6b0:	d062      	beq.n	800c778 <get_fat+0xfa>
 800c6b2:	2b03      	cmp	r3, #3
 800c6b4:	dc7c      	bgt.n	800c7b0 <get_fat+0x132>
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d002      	beq.n	800c6c0 <get_fat+0x42>
 800c6ba:	2b02      	cmp	r3, #2
 800c6bc:	d042      	beq.n	800c744 <get_fat+0xc6>
 800c6be:	e077      	b.n	800c7b0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	085b      	lsrs	r3, r3, #1
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	0a5b      	lsrs	r3, r3, #9
 800c6d6:	4413      	add	r3, r2
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6938      	ldr	r0, [r7, #16]
 800c6dc:	f7ff ff14 	bl	800c508 <move_window>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d167      	bne.n	800c7b6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	1c5a      	adds	r2, r3, #1
 800c6ea:	60fa      	str	r2, [r7, #12]
 800c6ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	0a5b      	lsrs	r3, r3, #9
 800c702:	4413      	add	r3, r2
 800c704:	4619      	mov	r1, r3
 800c706:	6938      	ldr	r0, [r7, #16]
 800c708:	f7ff fefe 	bl	800c508 <move_window>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d153      	bne.n	800c7ba <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	4413      	add	r3, r2
 800c71c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c720:	021b      	lsls	r3, r3, #8
 800c722:	461a      	mov	r2, r3
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	4313      	orrs	r3, r2
 800c728:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	f003 0301 	and.w	r3, r3, #1
 800c730:	2b00      	cmp	r3, #0
 800c732:	d002      	beq.n	800c73a <get_fat+0xbc>
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	091b      	lsrs	r3, r3, #4
 800c738:	e002      	b.n	800c740 <get_fat+0xc2>
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c740:	617b      	str	r3, [r7, #20]
			break;
 800c742:	e03f      	b.n	800c7c4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	0a1b      	lsrs	r3, r3, #8
 800c74c:	4413      	add	r3, r2
 800c74e:	4619      	mov	r1, r3
 800c750:	6938      	ldr	r0, [r7, #16]
 800c752:	f7ff fed9 	bl	800c508 <move_window>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d130      	bne.n	800c7be <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c76a:	4413      	add	r3, r2
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7ff fc1b 	bl	800bfa8 <ld_word>
 800c772:	4603      	mov	r3, r0
 800c774:	617b      	str	r3, [r7, #20]
			break;
 800c776:	e025      	b.n	800c7c4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	09db      	lsrs	r3, r3, #7
 800c780:	4413      	add	r3, r2
 800c782:	4619      	mov	r1, r3
 800c784:	6938      	ldr	r0, [r7, #16]
 800c786:	f7ff febf 	bl	800c508 <move_window>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d118      	bne.n	800c7c2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c79e:	4413      	add	r3, r2
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff fc19 	bl	800bfd8 <ld_dword>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c7ac:	617b      	str	r3, [r7, #20]
			break;
 800c7ae:	e009      	b.n	800c7c4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	617b      	str	r3, [r7, #20]
 800c7b4:	e006      	b.n	800c7c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7b6:	bf00      	nop
 800c7b8:	e004      	b.n	800c7c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7ba:	bf00      	nop
 800c7bc:	e002      	b.n	800c7c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7be:	bf00      	nop
 800c7c0:	e000      	b.n	800c7c4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7c2:	bf00      	nop
		}
	}

	return val;
 800c7c4:	697b      	ldr	r3, [r7, #20]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3718      	adds	r7, #24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c7ce:	b590      	push	{r4, r7, lr}
 800c7d0:	b089      	sub	sp, #36	; 0x24
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	60f8      	str	r0, [r7, #12]
 800c7d6:	60b9      	str	r1, [r7, #8]
 800c7d8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c7da:	2302      	movs	r3, #2
 800c7dc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	f240 80d2 	bls.w	800c98a <put_fat+0x1bc>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	f080 80cc 	bcs.w	800c98a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	f000 8096 	beq.w	800c928 <put_fat+0x15a>
 800c7fc:	2b03      	cmp	r3, #3
 800c7fe:	f300 80cd 	bgt.w	800c99c <put_fat+0x1ce>
 800c802:	2b01      	cmp	r3, #1
 800c804:	d002      	beq.n	800c80c <put_fat+0x3e>
 800c806:	2b02      	cmp	r3, #2
 800c808:	d06e      	beq.n	800c8e8 <put_fat+0x11a>
 800c80a:	e0c7      	b.n	800c99c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	61bb      	str	r3, [r7, #24]
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	085b      	lsrs	r3, r3, #1
 800c814:	69ba      	ldr	r2, [r7, #24]
 800c816:	4413      	add	r3, r2
 800c818:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	0a5b      	lsrs	r3, r3, #9
 800c822:	4413      	add	r3, r2
 800c824:	4619      	mov	r1, r3
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f7ff fe6e 	bl	800c508 <move_window>
 800c82c:	4603      	mov	r3, r0
 800c82e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c830:	7ffb      	ldrb	r3, [r7, #31]
 800c832:	2b00      	cmp	r3, #0
 800c834:	f040 80ab 	bne.w	800c98e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c83e:	69bb      	ldr	r3, [r7, #24]
 800c840:	1c59      	adds	r1, r3, #1
 800c842:	61b9      	str	r1, [r7, #24]
 800c844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c848:	4413      	add	r3, r2
 800c84a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f003 0301 	and.w	r3, r3, #1
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00d      	beq.n	800c872 <put_fat+0xa4>
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	b25b      	sxtb	r3, r3
 800c85c:	f003 030f 	and.w	r3, r3, #15
 800c860:	b25a      	sxtb	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	b2db      	uxtb	r3, r3
 800c866:	011b      	lsls	r3, r3, #4
 800c868:	b25b      	sxtb	r3, r3
 800c86a:	4313      	orrs	r3, r2
 800c86c:	b25b      	sxtb	r3, r3
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	e001      	b.n	800c876 <put_fat+0xa8>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	b2db      	uxtb	r3, r3
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2201      	movs	r2, #1
 800c87e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	0a5b      	lsrs	r3, r3, #9
 800c888:	4413      	add	r3, r2
 800c88a:	4619      	mov	r1, r3
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f7ff fe3b 	bl	800c508 <move_window>
 800c892:	4603      	mov	r3, r0
 800c894:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c896:	7ffb      	ldrb	r3, [r7, #31]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d17a      	bne.n	800c992 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8a8:	4413      	add	r3, r2
 800c8aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f003 0301 	and.w	r3, r3, #1
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <put_fat+0xf0>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	091b      	lsrs	r3, r3, #4
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	e00e      	b.n	800c8dc <put_fat+0x10e>
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	b25b      	sxtb	r3, r3
 800c8c4:	f023 030f 	bic.w	r3, r3, #15
 800c8c8:	b25a      	sxtb	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	0a1b      	lsrs	r3, r3, #8
 800c8ce:	b25b      	sxtb	r3, r3
 800c8d0:	f003 030f 	and.w	r3, r3, #15
 800c8d4:	b25b      	sxtb	r3, r3
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	b25b      	sxtb	r3, r3
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	70da      	strb	r2, [r3, #3]
			break;
 800c8e6:	e059      	b.n	800c99c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	0a1b      	lsrs	r3, r3, #8
 800c8f0:	4413      	add	r3, r2
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f7ff fe07 	bl	800c508 <move_window>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8fe:	7ffb      	ldrb	r3, [r7, #31]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d148      	bne.n	800c996 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c912:	4413      	add	r3, r2
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	b292      	uxth	r2, r2
 800c918:	4611      	mov	r1, r2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff fb7f 	bl	800c01e <st_word>
			fs->wflag = 1;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2201      	movs	r2, #1
 800c924:	70da      	strb	r2, [r3, #3]
			break;
 800c926:	e039      	b.n	800c99c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	09db      	lsrs	r3, r3, #7
 800c930:	4413      	add	r3, r2
 800c932:	4619      	mov	r1, r3
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f7ff fde7 	bl	800c508 <move_window>
 800c93a:	4603      	mov	r3, r0
 800c93c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c93e:	7ffb      	ldrb	r3, [r7, #31]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d12a      	bne.n	800c99a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c958:	4413      	add	r3, r2
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7ff fb3c 	bl	800bfd8 <ld_dword>
 800c960:	4603      	mov	r3, r0
 800c962:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c966:	4323      	orrs	r3, r4
 800c968:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c978:	4413      	add	r3, r2
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7ff fb69 	bl	800c054 <st_dword>
			fs->wflag = 1;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2201      	movs	r2, #1
 800c986:	70da      	strb	r2, [r3, #3]
			break;
 800c988:	e008      	b.n	800c99c <put_fat+0x1ce>
		}
	}
 800c98a:	bf00      	nop
 800c98c:	e006      	b.n	800c99c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c98e:	bf00      	nop
 800c990:	e004      	b.n	800c99c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c992:	bf00      	nop
 800c994:	e002      	b.n	800c99c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c996:	bf00      	nop
 800c998:	e000      	b.n	800c99c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c99a:	bf00      	nop
	return res;
 800c99c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3724      	adds	r7, #36	; 0x24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd90      	pop	{r4, r7, pc}

0800c9a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b088      	sub	sp, #32
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	60f8      	str	r0, [r7, #12]
 800c9ae:	60b9      	str	r1, [r7, #8]
 800c9b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d904      	bls.n	800c9cc <remove_chain+0x26>
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d301      	bcc.n	800c9d0 <remove_chain+0x2a>
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	e04b      	b.n	800ca68 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00c      	beq.n	800c9f0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9da:	6879      	ldr	r1, [r7, #4]
 800c9dc:	69b8      	ldr	r0, [r7, #24]
 800c9de:	f7ff fef6 	bl	800c7ce <put_fat>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c9e6:	7ffb      	ldrb	r3, [r7, #31]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <remove_chain+0x4a>
 800c9ec:	7ffb      	ldrb	r3, [r7, #31]
 800c9ee:	e03b      	b.n	800ca68 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c9f0:	68b9      	ldr	r1, [r7, #8]
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f7ff fe43 	bl	800c67e <get_fat>
 800c9f8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d031      	beq.n	800ca64 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d101      	bne.n	800ca0a <remove_chain+0x64>
 800ca06:	2302      	movs	r3, #2
 800ca08:	e02e      	b.n	800ca68 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca10:	d101      	bne.n	800ca16 <remove_chain+0x70>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e028      	b.n	800ca68 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ca16:	2200      	movs	r2, #0
 800ca18:	68b9      	ldr	r1, [r7, #8]
 800ca1a:	69b8      	ldr	r0, [r7, #24]
 800ca1c:	f7ff fed7 	bl	800c7ce <put_fat>
 800ca20:	4603      	mov	r3, r0
 800ca22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ca24:	7ffb      	ldrb	r3, [r7, #31]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d001      	beq.n	800ca2e <remove_chain+0x88>
 800ca2a:	7ffb      	ldrb	r3, [r7, #31]
 800ca2c:	e01c      	b.n	800ca68 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	695a      	ldr	r2, [r3, #20]
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	3b02      	subs	r3, #2
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d20b      	bcs.n	800ca54 <remove_chain+0xae>
			fs->free_clst++;
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	695b      	ldr	r3, [r3, #20]
 800ca40:	1c5a      	adds	r2, r3, #1
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	791b      	ldrb	r3, [r3, #4]
 800ca4a:	f043 0301 	orr.w	r3, r3, #1
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	699b      	ldr	r3, [r3, #24]
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d3c6      	bcc.n	800c9f0 <remove_chain+0x4a>
 800ca62:	e000      	b.n	800ca66 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ca64:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3720      	adds	r7, #32
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b088      	sub	sp, #32
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10d      	bne.n	800caa2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d004      	beq.n	800ca9c <create_chain+0x2c>
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d31b      	bcc.n	800cad4 <create_chain+0x64>
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	61bb      	str	r3, [r7, #24]
 800caa0:	e018      	b.n	800cad4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff fdea 	bl	800c67e <get_fat>
 800caaa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d801      	bhi.n	800cab6 <create_chain+0x46>
 800cab2:	2301      	movs	r3, #1
 800cab4:	e070      	b.n	800cb98 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cabc:	d101      	bne.n	800cac2 <create_chain+0x52>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	e06a      	b.n	800cb98 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d201      	bcs.n	800cad0 <create_chain+0x60>
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	e063      	b.n	800cb98 <create_chain+0x128>
		scl = clst;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	3301      	adds	r3, #1
 800cadc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	699b      	ldr	r3, [r3, #24]
 800cae2:	69fa      	ldr	r2, [r7, #28]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d307      	bcc.n	800caf8 <create_chain+0x88>
				ncl = 2;
 800cae8:	2302      	movs	r3, #2
 800caea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800caec:	69fa      	ldr	r2, [r7, #28]
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d901      	bls.n	800caf8 <create_chain+0x88>
 800caf4:	2300      	movs	r3, #0
 800caf6:	e04f      	b.n	800cb98 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800caf8:	69f9      	ldr	r1, [r7, #28]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7ff fdbf 	bl	800c67e <get_fat>
 800cb00:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00e      	beq.n	800cb26 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d003      	beq.n	800cb16 <create_chain+0xa6>
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb14:	d101      	bne.n	800cb1a <create_chain+0xaa>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	e03e      	b.n	800cb98 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cb1a:	69fa      	ldr	r2, [r7, #28]
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d1da      	bne.n	800cad8 <create_chain+0x68>
 800cb22:	2300      	movs	r3, #0
 800cb24:	e038      	b.n	800cb98 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cb26:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cb28:	f04f 32ff 	mov.w	r2, #4294967295
 800cb2c:	69f9      	ldr	r1, [r7, #28]
 800cb2e:	6938      	ldr	r0, [r7, #16]
 800cb30:	f7ff fe4d 	bl	800c7ce <put_fat>
 800cb34:	4603      	mov	r3, r0
 800cb36:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d109      	bne.n	800cb52 <create_chain+0xe2>
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d006      	beq.n	800cb52 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cb44:	69fa      	ldr	r2, [r7, #28]
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6938      	ldr	r0, [r7, #16]
 800cb4a:	f7ff fe40 	bl	800c7ce <put_fat>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cb52:	7dfb      	ldrb	r3, [r7, #23]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d116      	bne.n	800cb86 <create_chain+0x116>
		fs->last_clst = ncl;
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	69fa      	ldr	r2, [r7, #28]
 800cb5c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	695a      	ldr	r2, [r3, #20]
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	699b      	ldr	r3, [r3, #24]
 800cb66:	3b02      	subs	r3, #2
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d804      	bhi.n	800cb76 <create_chain+0x106>
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	695b      	ldr	r3, [r3, #20]
 800cb70:	1e5a      	subs	r2, r3, #1
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	791b      	ldrb	r3, [r3, #4]
 800cb7a:	f043 0301 	orr.w	r3, r3, #1
 800cb7e:	b2da      	uxtb	r2, r3
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	711a      	strb	r2, [r3, #4]
 800cb84:	e007      	b.n	800cb96 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cb86:	7dfb      	ldrb	r3, [r7, #23]
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d102      	bne.n	800cb92 <create_chain+0x122>
 800cb8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb90:	e000      	b.n	800cb94 <create_chain+0x124>
 800cb92:	2301      	movs	r3, #1
 800cb94:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cb96:	69fb      	ldr	r3, [r7, #28]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3720      	adds	r7, #32
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b087      	sub	sp, #28
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb4:	3304      	adds	r3, #4
 800cbb6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	0a5b      	lsrs	r3, r3, #9
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	8952      	ldrh	r2, [r2, #10]
 800cbc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	1d1a      	adds	r2, r3, #4
 800cbca:	613a      	str	r2, [r7, #16]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <clmt_clust+0x3a>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	e010      	b.n	800cbfc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d307      	bcc.n	800cbf2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	1ad3      	subs	r3, r2, r3
 800cbe8:	617b      	str	r3, [r7, #20]
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	3304      	adds	r3, #4
 800cbee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cbf0:	e7e9      	b.n	800cbc6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cbf2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	4413      	add	r3, r2
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	371c      	adds	r7, #28
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc1e:	d204      	bcs.n	800cc2a <dir_sdi+0x22>
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	f003 031f 	and.w	r3, r3, #31
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <dir_sdi+0x26>
		return FR_INT_ERR;
 800cc2a:	2302      	movs	r3, #2
 800cc2c:	e063      	b.n	800ccf6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d106      	bne.n	800cc4e <dir_sdi+0x46>
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d902      	bls.n	800cc4e <dir_sdi+0x46>
		clst = fs->dirbase;
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc4c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10c      	bne.n	800cc6e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	095b      	lsrs	r3, r3, #5
 800cc58:	693a      	ldr	r2, [r7, #16]
 800cc5a:	8912      	ldrh	r2, [r2, #8]
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d301      	bcc.n	800cc64 <dir_sdi+0x5c>
 800cc60:	2302      	movs	r3, #2
 800cc62:	e048      	b.n	800ccf6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	61da      	str	r2, [r3, #28]
 800cc6c:	e029      	b.n	800ccc2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	895b      	ldrh	r3, [r3, #10]
 800cc72:	025b      	lsls	r3, r3, #9
 800cc74:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cc76:	e019      	b.n	800ccac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6979      	ldr	r1, [r7, #20]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff fcfe 	bl	800c67e <get_fat>
 800cc82:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc8a:	d101      	bne.n	800cc90 <dir_sdi+0x88>
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e032      	b.n	800ccf6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d904      	bls.n	800cca0 <dir_sdi+0x98>
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	699b      	ldr	r3, [r3, #24]
 800cc9a:	697a      	ldr	r2, [r7, #20]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d301      	bcc.n	800cca4 <dir_sdi+0x9c>
 800cca0:	2302      	movs	r3, #2
 800cca2:	e028      	b.n	800ccf6 <dir_sdi+0xee>
			ofs -= csz;
 800cca4:	683a      	ldr	r2, [r7, #0]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d2e1      	bcs.n	800cc78 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ccb4:	6979      	ldr	r1, [r7, #20]
 800ccb6:	6938      	ldr	r0, [r7, #16]
 800ccb8:	f7ff fcc2 	bl	800c640 <clust2sect>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	697a      	ldr	r2, [r7, #20]
 800ccc6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	69db      	ldr	r3, [r3, #28]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d101      	bne.n	800ccd4 <dir_sdi+0xcc>
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	e010      	b.n	800ccf6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	69da      	ldr	r2, [r3, #28]
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	0a5b      	lsrs	r3, r3, #9
 800ccdc:	441a      	add	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccee:	441a      	add	r2, r3
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b086      	sub	sp, #24
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	695b      	ldr	r3, [r3, #20]
 800cd12:	3320      	adds	r3, #32
 800cd14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	69db      	ldr	r3, [r3, #28]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d003      	beq.n	800cd26 <dir_next+0x28>
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd24:	d301      	bcc.n	800cd2a <dir_next+0x2c>
 800cd26:	2304      	movs	r3, #4
 800cd28:	e0aa      	b.n	800ce80 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f040 8098 	bne.w	800ce66 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	69db      	ldr	r3, [r3, #28]
 800cd3a:	1c5a      	adds	r2, r3, #1
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	699b      	ldr	r3, [r3, #24]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10b      	bne.n	800cd60 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	095b      	lsrs	r3, r3, #5
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	8912      	ldrh	r2, [r2, #8]
 800cd50:	4293      	cmp	r3, r2
 800cd52:	f0c0 8088 	bcc.w	800ce66 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	61da      	str	r2, [r3, #28]
 800cd5c:	2304      	movs	r3, #4
 800cd5e:	e08f      	b.n	800ce80 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	0a5b      	lsrs	r3, r3, #9
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	8952      	ldrh	r2, [r2, #10]
 800cd68:	3a01      	subs	r2, #1
 800cd6a:	4013      	ands	r3, r2
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d17a      	bne.n	800ce66 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	699b      	ldr	r3, [r3, #24]
 800cd76:	4619      	mov	r1, r3
 800cd78:	4610      	mov	r0, r2
 800cd7a:	f7ff fc80 	bl	800c67e <get_fat>
 800cd7e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d801      	bhi.n	800cd8a <dir_next+0x8c>
 800cd86:	2302      	movs	r3, #2
 800cd88:	e07a      	b.n	800ce80 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd90:	d101      	bne.n	800cd96 <dir_next+0x98>
 800cd92:	2301      	movs	r3, #1
 800cd94:	e074      	b.n	800ce80 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	697a      	ldr	r2, [r7, #20]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d358      	bcc.n	800ce52 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d104      	bne.n	800cdb0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	61da      	str	r2, [r3, #28]
 800cdac:	2304      	movs	r3, #4
 800cdae:	e067      	b.n	800ce80 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	4610      	mov	r0, r2
 800cdba:	f7ff fe59 	bl	800ca70 <create_chain>
 800cdbe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <dir_next+0xcc>
 800cdc6:	2307      	movs	r3, #7
 800cdc8:	e05a      	b.n	800ce80 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d101      	bne.n	800cdd4 <dir_next+0xd6>
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	e055      	b.n	800ce80 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdda:	d101      	bne.n	800cde0 <dir_next+0xe2>
 800cddc:	2301      	movs	r3, #1
 800cdde:	e04f      	b.n	800ce80 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cde0:	68f8      	ldr	r0, [r7, #12]
 800cde2:	f7ff fb4d 	bl	800c480 <sync_window>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <dir_next+0xf2>
 800cdec:	2301      	movs	r3, #1
 800cdee:	e047      	b.n	800ce80 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3334      	adds	r3, #52	; 0x34
 800cdf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7ff f977 	bl	800c0ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce00:	2300      	movs	r3, #0
 800ce02:	613b      	str	r3, [r7, #16]
 800ce04:	6979      	ldr	r1, [r7, #20]
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f7ff fc1a 	bl	800c640 <clust2sect>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	631a      	str	r2, [r3, #48]	; 0x30
 800ce12:	e012      	b.n	800ce3a <dir_next+0x13c>
						fs->wflag = 1;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2201      	movs	r2, #1
 800ce18:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f7ff fb30 	bl	800c480 <sync_window>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d001      	beq.n	800ce2a <dir_next+0x12c>
 800ce26:	2301      	movs	r3, #1
 800ce28:	e02a      	b.n	800ce80 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	613b      	str	r3, [r7, #16]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce34:	1c5a      	adds	r2, r3, #1
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	631a      	str	r2, [r3, #48]	; 0x30
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	895b      	ldrh	r3, [r3, #10]
 800ce3e:	461a      	mov	r2, r3
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d3e6      	bcc.n	800ce14 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	1ad2      	subs	r2, r2, r3
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	697a      	ldr	r2, [r7, #20]
 800ce56:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ce58:	6979      	ldr	r1, [r7, #20]
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f7ff fbf0 	bl	800c640 <clust2sect>
 800ce60:	4602      	mov	r2, r0
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce78:	441a      	add	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3718      	adds	r7, #24
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ce98:	2100      	movs	r1, #0
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7ff feb4 	bl	800cc08 <dir_sdi>
 800cea0:	4603      	mov	r3, r0
 800cea2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cea4:	7dfb      	ldrb	r3, [r7, #23]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d12b      	bne.n	800cf02 <dir_alloc+0x7a>
		n = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	69db      	ldr	r3, [r3, #28]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f7ff fb27 	bl	800c508 <move_window>
 800ceba:	4603      	mov	r3, r0
 800cebc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d11d      	bne.n	800cf00 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6a1b      	ldr	r3, [r3, #32]
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	2be5      	cmp	r3, #229	; 0xe5
 800cecc:	d004      	beq.n	800ced8 <dir_alloc+0x50>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a1b      	ldr	r3, [r3, #32]
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d107      	bne.n	800cee8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	3301      	adds	r3, #1
 800cedc:	613b      	str	r3, [r7, #16]
 800cede:	693a      	ldr	r2, [r7, #16]
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d102      	bne.n	800ceec <dir_alloc+0x64>
 800cee6:	e00c      	b.n	800cf02 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cee8:	2300      	movs	r3, #0
 800ceea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ceec:	2101      	movs	r1, #1
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7ff ff05 	bl	800ccfe <dir_next>
 800cef4:	4603      	mov	r3, r0
 800cef6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cef8:	7dfb      	ldrb	r3, [r7, #23]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d0d7      	beq.n	800ceae <dir_alloc+0x26>
 800cefe:	e000      	b.n	800cf02 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cf00:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
 800cf04:	2b04      	cmp	r3, #4
 800cf06:	d101      	bne.n	800cf0c <dir_alloc+0x84>
 800cf08:	2307      	movs	r3, #7
 800cf0a:	75fb      	strb	r3, [r7, #23]
	return res;
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b084      	sub	sp, #16
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	331a      	adds	r3, #26
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7ff f83f 	bl	800bfa8 <ld_word>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	2b03      	cmp	r3, #3
 800cf34:	d109      	bne.n	800cf4a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	3314      	adds	r3, #20
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7ff f834 	bl	800bfa8 <ld_word>
 800cf40:	4603      	mov	r3, r0
 800cf42:	041b      	lsls	r3, r3, #16
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	331a      	adds	r3, #26
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	b292      	uxth	r2, r2
 800cf68:	4611      	mov	r1, r2
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7ff f857 	bl	800c01e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	2b03      	cmp	r3, #3
 800cf76:	d109      	bne.n	800cf8c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	f103 0214 	add.w	r2, r3, #20
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	0c1b      	lsrs	r3, r3, #16
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	4619      	mov	r1, r3
 800cf86:	4610      	mov	r0, r2
 800cf88:	f7ff f849 	bl	800c01e <st_word>
	}
}
 800cf8c:	bf00      	nop
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cf94:	b590      	push	{r4, r7, lr}
 800cf96:	b087      	sub	sp, #28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	331a      	adds	r3, #26
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7ff f800 	bl	800bfa8 <ld_word>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d001      	beq.n	800cfb2 <cmp_lfn+0x1e>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	e059      	b.n	800d066 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfba:	1e5a      	subs	r2, r3, #1
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	4413      	add	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cfc8:	2301      	movs	r3, #1
 800cfca:	81fb      	strh	r3, [r7, #14]
 800cfcc:	2300      	movs	r3, #0
 800cfce:	613b      	str	r3, [r7, #16]
 800cfd0:	e033      	b.n	800d03a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cfd2:	4a27      	ldr	r2, [pc, #156]	; (800d070 <cmp_lfn+0xdc>)
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	4413      	add	r3, r2
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	4413      	add	r3, r2
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fe ffe1 	bl	800bfa8 <ld_word>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cfea:	89fb      	ldrh	r3, [r7, #14]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d01a      	beq.n	800d026 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	2bfe      	cmp	r3, #254	; 0xfe
 800cff4:	d812      	bhi.n	800d01c <cmp_lfn+0x88>
 800cff6:	89bb      	ldrh	r3, [r7, #12]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f002 f9a3 	bl	800f344 <ff_wtoupper>
 800cffe:	4603      	mov	r3, r0
 800d000:	461c      	mov	r4, r3
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	1c5a      	adds	r2, r3, #1
 800d006:	617a      	str	r2, [r7, #20]
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	4413      	add	r3, r2
 800d00e:	881b      	ldrh	r3, [r3, #0]
 800d010:	4618      	mov	r0, r3
 800d012:	f002 f997 	bl	800f344 <ff_wtoupper>
 800d016:	4603      	mov	r3, r0
 800d018:	429c      	cmp	r4, r3
 800d01a:	d001      	beq.n	800d020 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d01c:	2300      	movs	r3, #0
 800d01e:	e022      	b.n	800d066 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d020:	89bb      	ldrh	r3, [r7, #12]
 800d022:	81fb      	strh	r3, [r7, #14]
 800d024:	e006      	b.n	800d034 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d026:	89bb      	ldrh	r3, [r7, #12]
 800d028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d001      	beq.n	800d034 <cmp_lfn+0xa0>
 800d030:	2300      	movs	r3, #0
 800d032:	e018      	b.n	800d066 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	3301      	adds	r3, #1
 800d038:	613b      	str	r3, [r7, #16]
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	2b0c      	cmp	r3, #12
 800d03e:	d9c8      	bls.n	800cfd2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00b      	beq.n	800d064 <cmp_lfn+0xd0>
 800d04c:	89fb      	ldrh	r3, [r7, #14]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d008      	beq.n	800d064 <cmp_lfn+0xd0>
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	005b      	lsls	r3, r3, #1
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	4413      	add	r3, r2
 800d05a:	881b      	ldrh	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d001      	beq.n	800d064 <cmp_lfn+0xd0>
 800d060:	2300      	movs	r3, #0
 800d062:	e000      	b.n	800d066 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d064:	2301      	movs	r3, #1
}
 800d066:	4618      	mov	r0, r3
 800d068:	371c      	adds	r7, #28
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd90      	pop	{r4, r7, pc}
 800d06e:	bf00      	nop
 800d070:	0800fecc 	.word	0x0800fecc

0800d074 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	331a      	adds	r3, #26
 800d082:	4618      	mov	r0, r3
 800d084:	f7fe ff90 	bl	800bfa8 <ld_word>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d001      	beq.n	800d092 <pick_lfn+0x1e>
 800d08e:	2300      	movs	r3, #0
 800d090:	e04d      	b.n	800d12e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d09a:	1e5a      	subs	r2, r3, #1
 800d09c:	4613      	mov	r3, r2
 800d09e:	005b      	lsls	r3, r3, #1
 800d0a0:	4413      	add	r3, r2
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	4413      	add	r3, r2
 800d0a6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	81fb      	strh	r3, [r7, #14]
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	613b      	str	r3, [r7, #16]
 800d0b0:	e028      	b.n	800d104 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d0b2:	4a21      	ldr	r2, [pc, #132]	; (800d138 <pick_lfn+0xc4>)
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	4413      	add	r3, r2
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fe ff71 	bl	800bfa8 <ld_word>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d0ca:	89fb      	ldrh	r3, [r7, #14]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00f      	beq.n	800d0f0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	2bfe      	cmp	r3, #254	; 0xfe
 800d0d4:	d901      	bls.n	800d0da <pick_lfn+0x66>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	e029      	b.n	800d12e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d0da:	89bb      	ldrh	r3, [r7, #12]
 800d0dc:	81fb      	strh	r3, [r7, #14]
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	617a      	str	r2, [r7, #20]
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	89fa      	ldrh	r2, [r7, #14]
 800d0ec:	801a      	strh	r2, [r3, #0]
 800d0ee:	e006      	b.n	800d0fe <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d0f0:	89bb      	ldrh	r3, [r7, #12]
 800d0f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d001      	beq.n	800d0fe <pick_lfn+0x8a>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	e017      	b.n	800d12e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	3301      	adds	r3, #1
 800d102:	613b      	str	r3, [r7, #16]
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	2b0c      	cmp	r3, #12
 800d108:	d9d3      	bls.n	800d0b2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00a      	beq.n	800d12c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	2bfe      	cmp	r3, #254	; 0xfe
 800d11a:	d901      	bls.n	800d120 <pick_lfn+0xac>
 800d11c:	2300      	movs	r3, #0
 800d11e:	e006      	b.n	800d12e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	005b      	lsls	r3, r3, #1
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	4413      	add	r3, r2
 800d128:	2200      	movs	r2, #0
 800d12a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d12c:	2301      	movs	r3, #1
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3718      	adds	r7, #24
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	0800fecc 	.word	0x0800fecc

0800d13c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b088      	sub	sp, #32
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	4611      	mov	r1, r2
 800d148:	461a      	mov	r2, r3
 800d14a:	460b      	mov	r3, r1
 800d14c:	71fb      	strb	r3, [r7, #7]
 800d14e:	4613      	mov	r3, r2
 800d150:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	330d      	adds	r3, #13
 800d156:	79ba      	ldrb	r2, [r7, #6]
 800d158:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	330b      	adds	r3, #11
 800d15e:	220f      	movs	r2, #15
 800d160:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	330c      	adds	r3, #12
 800d166:	2200      	movs	r2, #0
 800d168:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	331a      	adds	r3, #26
 800d16e:	2100      	movs	r1, #0
 800d170:	4618      	mov	r0, r3
 800d172:	f7fe ff54 	bl	800c01e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	1e5a      	subs	r2, r3, #1
 800d17a:	4613      	mov	r3, r2
 800d17c:	005b      	lsls	r3, r3, #1
 800d17e:	4413      	add	r3, r2
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	4413      	add	r3, r2
 800d184:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d186:	2300      	movs	r3, #0
 800d188:	82fb      	strh	r3, [r7, #22]
 800d18a:	2300      	movs	r3, #0
 800d18c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d18e:	8afb      	ldrh	r3, [r7, #22]
 800d190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d194:	4293      	cmp	r3, r2
 800d196:	d007      	beq.n	800d1a8 <put_lfn+0x6c>
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	61fa      	str	r2, [r7, #28]
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	881b      	ldrh	r3, [r3, #0]
 800d1a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d1a8:	4a17      	ldr	r2, [pc, #92]	; (800d208 <put_lfn+0xcc>)
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	8afa      	ldrh	r2, [r7, #22]
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fe ff2f 	bl	800c01e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d1c0:	8afb      	ldrh	r3, [r7, #22]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d102      	bne.n	800d1cc <put_lfn+0x90>
 800d1c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	61bb      	str	r3, [r7, #24]
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	2b0c      	cmp	r3, #12
 800d1d6:	d9da      	bls.n	800d18e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d1d8:	8afb      	ldrh	r3, [r7, #22]
 800d1da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d006      	beq.n	800d1f0 <put_lfn+0xb4>
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	005b      	lsls	r3, r3, #1
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	881b      	ldrh	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d103      	bne.n	800d1f8 <put_lfn+0xbc>
 800d1f0:	79fb      	ldrb	r3, [r7, #7]
 800d1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	79fa      	ldrb	r2, [r7, #7]
 800d1fc:	701a      	strb	r2, [r3, #0]
}
 800d1fe:	bf00      	nop
 800d200:	3720      	adds	r7, #32
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	0800fecc 	.word	0x0800fecc

0800d20c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b08c      	sub	sp, #48	; 0x30
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
 800d218:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d21a:	220b      	movs	r2, #11
 800d21c:	68b9      	ldr	r1, [r7, #8]
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f7fe ff44 	bl	800c0ac <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2b05      	cmp	r3, #5
 800d228:	d92b      	bls.n	800d282 <gen_numname+0x76>
		sr = seq;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d22e:	e022      	b.n	800d276 <gen_numname+0x6a>
			wc = *lfn++;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	1c9a      	adds	r2, r3, #2
 800d234:	607a      	str	r2, [r7, #4]
 800d236:	881b      	ldrh	r3, [r3, #0]
 800d238:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d23a:	2300      	movs	r3, #0
 800d23c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d23e:	e017      	b.n	800d270 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	005a      	lsls	r2, r3, #1
 800d244:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d246:	f003 0301 	and.w	r3, r3, #1
 800d24a:	4413      	add	r3, r2
 800d24c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d24e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d250:	085b      	lsrs	r3, r3, #1
 800d252:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d005      	beq.n	800d26a <gen_numname+0x5e>
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d264:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d268:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26c:	3301      	adds	r3, #1
 800d26e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	2b0f      	cmp	r3, #15
 800d274:	d9e4      	bls.n	800d240 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1d8      	bne.n	800d230 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d27e:	69fb      	ldr	r3, [r7, #28]
 800d280:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d282:	2307      	movs	r3, #7
 800d284:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	f003 030f 	and.w	r3, r3, #15
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	3330      	adds	r3, #48	; 0x30
 800d292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d29a:	2b39      	cmp	r3, #57	; 0x39
 800d29c:	d904      	bls.n	800d2a8 <gen_numname+0x9c>
 800d29e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2a2:	3307      	adds	r3, #7
 800d2a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2aa:	1e5a      	subs	r2, r3, #1
 800d2ac:	62ba      	str	r2, [r7, #40]	; 0x28
 800d2ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d2b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	091b      	lsrs	r3, r3, #4
 800d2c0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1de      	bne.n	800d286 <gen_numname+0x7a>
	ns[i] = '~';
 800d2c8:	f107 0214 	add.w	r2, r7, #20
 800d2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ce:	4413      	add	r3, r2
 800d2d0:	227e      	movs	r2, #126	; 0x7e
 800d2d2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d2d8:	e002      	b.n	800d2e0 <gen_numname+0xd4>
 800d2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2dc:	3301      	adds	r3, #1
 800d2de:	627b      	str	r3, [r7, #36]	; 0x24
 800d2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d205      	bcs.n	800d2f4 <gen_numname+0xe8>
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	4413      	add	r3, r2
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b20      	cmp	r3, #32
 800d2f2:	d1f2      	bne.n	800d2da <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	2b07      	cmp	r3, #7
 800d2f8:	d808      	bhi.n	800d30c <gen_numname+0x100>
 800d2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	62ba      	str	r2, [r7, #40]	; 0x28
 800d300:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d304:	4413      	add	r3, r2
 800d306:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d30a:	e000      	b.n	800d30e <gen_numname+0x102>
 800d30c:	2120      	movs	r1, #32
 800d30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d310:	1c5a      	adds	r2, r3, #1
 800d312:	627a      	str	r2, [r7, #36]	; 0x24
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	4413      	add	r3, r2
 800d318:	460a      	mov	r2, r1
 800d31a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31e:	2b07      	cmp	r3, #7
 800d320:	d9e8      	bls.n	800d2f4 <gen_numname+0xe8>
}
 800d322:	bf00      	nop
 800d324:	bf00      	nop
 800d326:	3730      	adds	r7, #48	; 0x30
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d334:	2300      	movs	r3, #0
 800d336:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d338:	230b      	movs	r3, #11
 800d33a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d33c:	7bfb      	ldrb	r3, [r7, #15]
 800d33e:	b2da      	uxtb	r2, r3
 800d340:	0852      	lsrs	r2, r2, #1
 800d342:	01db      	lsls	r3, r3, #7
 800d344:	4313      	orrs	r3, r2
 800d346:	b2da      	uxtb	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	1c59      	adds	r1, r3, #1
 800d34c:	6079      	str	r1, [r7, #4]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	4413      	add	r3, r2
 800d352:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	3b01      	subs	r3, #1
 800d358:	60bb      	str	r3, [r7, #8]
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1ed      	bne.n	800d33c <sum_sfn+0x10>
	return sum;
 800d360:	7bfb      	ldrb	r3, [r7, #15]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b086      	sub	sp, #24
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d378:	2304      	movs	r3, #4
 800d37a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d382:	23ff      	movs	r3, #255	; 0xff
 800d384:	757b      	strb	r3, [r7, #21]
 800d386:	23ff      	movs	r3, #255	; 0xff
 800d388:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d38a:	e081      	b.n	800d490 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	69db      	ldr	r3, [r3, #28]
 800d390:	4619      	mov	r1, r3
 800d392:	6938      	ldr	r0, [r7, #16]
 800d394:	f7ff f8b8 	bl	800c508 <move_window>
 800d398:	4603      	mov	r3, r0
 800d39a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d39c:	7dfb      	ldrb	r3, [r7, #23]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d17c      	bne.n	800d49c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d3aa:	7dbb      	ldrb	r3, [r7, #22]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d102      	bne.n	800d3b6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d3b0:	2304      	movs	r3, #4
 800d3b2:	75fb      	strb	r3, [r7, #23]
 800d3b4:	e077      	b.n	800d4a6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6a1b      	ldr	r3, [r3, #32]
 800d3ba:	330b      	adds	r3, #11
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3c2:	73fb      	strb	r3, [r7, #15]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	7bfa      	ldrb	r2, [r7, #15]
 800d3c8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d3ca:	7dbb      	ldrb	r3, [r7, #22]
 800d3cc:	2be5      	cmp	r3, #229	; 0xe5
 800d3ce:	d00e      	beq.n	800d3ee <dir_read+0x80>
 800d3d0:	7dbb      	ldrb	r3, [r7, #22]
 800d3d2:	2b2e      	cmp	r3, #46	; 0x2e
 800d3d4:	d00b      	beq.n	800d3ee <dir_read+0x80>
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
 800d3d8:	f023 0320 	bic.w	r3, r3, #32
 800d3dc:	2b08      	cmp	r3, #8
 800d3de:	bf0c      	ite	eq
 800d3e0:	2301      	moveq	r3, #1
 800d3e2:	2300      	movne	r3, #0
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d002      	beq.n	800d3f4 <dir_read+0x86>
				ord = 0xFF;
 800d3ee:	23ff      	movs	r3, #255	; 0xff
 800d3f0:	757b      	strb	r3, [r7, #21]
 800d3f2:	e044      	b.n	800d47e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
 800d3f6:	2b0f      	cmp	r3, #15
 800d3f8:	d12f      	bne.n	800d45a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d3fa:	7dbb      	ldrb	r3, [r7, #22]
 800d3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00d      	beq.n	800d420 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6a1b      	ldr	r3, [r3, #32]
 800d408:	7b5b      	ldrb	r3, [r3, #13]
 800d40a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d40c:	7dbb      	ldrb	r3, [r7, #22]
 800d40e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d412:	75bb      	strb	r3, [r7, #22]
 800d414:	7dbb      	ldrb	r3, [r7, #22]
 800d416:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	695a      	ldr	r2, [r3, #20]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d420:	7dba      	ldrb	r2, [r7, #22]
 800d422:	7d7b      	ldrb	r3, [r7, #21]
 800d424:	429a      	cmp	r2, r3
 800d426:	d115      	bne.n	800d454 <dir_read+0xe6>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6a1b      	ldr	r3, [r3, #32]
 800d42c:	330d      	adds	r3, #13
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	7d3a      	ldrb	r2, [r7, #20]
 800d432:	429a      	cmp	r2, r3
 800d434:	d10e      	bne.n	800d454 <dir_read+0xe6>
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	68da      	ldr	r2, [r3, #12]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	4619      	mov	r1, r3
 800d440:	4610      	mov	r0, r2
 800d442:	f7ff fe17 	bl	800d074 <pick_lfn>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d003      	beq.n	800d454 <dir_read+0xe6>
 800d44c:	7d7b      	ldrb	r3, [r7, #21]
 800d44e:	3b01      	subs	r3, #1
 800d450:	b2db      	uxtb	r3, r3
 800d452:	e000      	b.n	800d456 <dir_read+0xe8>
 800d454:	23ff      	movs	r3, #255	; 0xff
 800d456:	757b      	strb	r3, [r7, #21]
 800d458:	e011      	b.n	800d47e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d45a:	7d7b      	ldrb	r3, [r7, #21]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d109      	bne.n	800d474 <dir_read+0x106>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a1b      	ldr	r3, [r3, #32]
 800d464:	4618      	mov	r0, r3
 800d466:	f7ff ff61 	bl	800d32c <sum_sfn>
 800d46a:	4603      	mov	r3, r0
 800d46c:	461a      	mov	r2, r3
 800d46e:	7d3b      	ldrb	r3, [r7, #20]
 800d470:	4293      	cmp	r3, r2
 800d472:	d015      	beq.n	800d4a0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f04f 32ff 	mov.w	r2, #4294967295
 800d47a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d47c:	e010      	b.n	800d4a0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d47e:	2100      	movs	r1, #0
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7ff fc3c 	bl	800ccfe <dir_next>
 800d486:	4603      	mov	r3, r0
 800d488:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d109      	bne.n	800d4a4 <dir_read+0x136>
	while (dp->sect) {
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	69db      	ldr	r3, [r3, #28]
 800d494:	2b00      	cmp	r3, #0
 800d496:	f47f af79 	bne.w	800d38c <dir_read+0x1e>
 800d49a:	e004      	b.n	800d4a6 <dir_read+0x138>
		if (res != FR_OK) break;
 800d49c:	bf00      	nop
 800d49e:	e002      	b.n	800d4a6 <dir_read+0x138>
					break;
 800d4a0:	bf00      	nop
 800d4a2:	e000      	b.n	800d4a6 <dir_read+0x138>
		if (res != FR_OK) break;
 800d4a4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d4a6:	7dfb      	ldrb	r3, [r7, #23]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d002      	beq.n	800d4b2 <dir_read+0x144>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	61da      	str	r2, [r3, #28]
	return res;
 800d4b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3718      	adds	r7, #24
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f7ff fb9b 	bl	800cc08 <dir_sdi>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d4d6:	7dfb      	ldrb	r3, [r7, #23]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d001      	beq.n	800d4e0 <dir_find+0x24>
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	e0a9      	b.n	800d634 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d4e0:	23ff      	movs	r3, #255	; 0xff
 800d4e2:	753b      	strb	r3, [r7, #20]
 800d4e4:	7d3b      	ldrb	r3, [r7, #20]
 800d4e6:	757b      	strb	r3, [r7, #21]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	69db      	ldr	r3, [r3, #28]
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	6938      	ldr	r0, [r7, #16]
 800d4f8:	f7ff f806 	bl	800c508 <move_window>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d500:	7dfb      	ldrb	r3, [r7, #23]
 800d502:	2b00      	cmp	r3, #0
 800d504:	f040 8090 	bne.w	800d628 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6a1b      	ldr	r3, [r3, #32]
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d510:	7dbb      	ldrb	r3, [r7, #22]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d102      	bne.n	800d51c <dir_find+0x60>
 800d516:	2304      	movs	r3, #4
 800d518:	75fb      	strb	r3, [r7, #23]
 800d51a:	e08a      	b.n	800d632 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6a1b      	ldr	r3, [r3, #32]
 800d520:	330b      	adds	r3, #11
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d528:	73fb      	strb	r3, [r7, #15]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	7bfa      	ldrb	r2, [r7, #15]
 800d52e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d530:	7dbb      	ldrb	r3, [r7, #22]
 800d532:	2be5      	cmp	r3, #229	; 0xe5
 800d534:	d007      	beq.n	800d546 <dir_find+0x8a>
 800d536:	7bfb      	ldrb	r3, [r7, #15]
 800d538:	f003 0308 	and.w	r3, r3, #8
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d009      	beq.n	800d554 <dir_find+0x98>
 800d540:	7bfb      	ldrb	r3, [r7, #15]
 800d542:	2b0f      	cmp	r3, #15
 800d544:	d006      	beq.n	800d554 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d546:	23ff      	movs	r3, #255	; 0xff
 800d548:	757b      	strb	r3, [r7, #21]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f04f 32ff 	mov.w	r2, #4294967295
 800d550:	631a      	str	r2, [r3, #48]	; 0x30
 800d552:	e05e      	b.n	800d612 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d554:	7bfb      	ldrb	r3, [r7, #15]
 800d556:	2b0f      	cmp	r3, #15
 800d558:	d136      	bne.n	800d5c8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d564:	2b00      	cmp	r3, #0
 800d566:	d154      	bne.n	800d612 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d568:	7dbb      	ldrb	r3, [r7, #22]
 800d56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00d      	beq.n	800d58e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	7b5b      	ldrb	r3, [r3, #13]
 800d578:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d57a:	7dbb      	ldrb	r3, [r7, #22]
 800d57c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d580:	75bb      	strb	r3, [r7, #22]
 800d582:	7dbb      	ldrb	r3, [r7, #22]
 800d584:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	695a      	ldr	r2, [r3, #20]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d58e:	7dba      	ldrb	r2, [r7, #22]
 800d590:	7d7b      	ldrb	r3, [r7, #21]
 800d592:	429a      	cmp	r2, r3
 800d594:	d115      	bne.n	800d5c2 <dir_find+0x106>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a1b      	ldr	r3, [r3, #32]
 800d59a:	330d      	adds	r3, #13
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	7d3a      	ldrb	r2, [r7, #20]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d10e      	bne.n	800d5c2 <dir_find+0x106>
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	68da      	ldr	r2, [r3, #12]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6a1b      	ldr	r3, [r3, #32]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	f7ff fcf0 	bl	800cf94 <cmp_lfn>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d003      	beq.n	800d5c2 <dir_find+0x106>
 800d5ba:	7d7b      	ldrb	r3, [r7, #21]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	e000      	b.n	800d5c4 <dir_find+0x108>
 800d5c2:	23ff      	movs	r3, #255	; 0xff
 800d5c4:	757b      	strb	r3, [r7, #21]
 800d5c6:	e024      	b.n	800d612 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d5c8:	7d7b      	ldrb	r3, [r7, #21]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d109      	bne.n	800d5e2 <dir_find+0x126>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a1b      	ldr	r3, [r3, #32]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7ff feaa 	bl	800d32c <sum_sfn>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	461a      	mov	r2, r3
 800d5dc:	7d3b      	ldrb	r3, [r7, #20]
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d024      	beq.n	800d62c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10a      	bne.n	800d606 <dir_find+0x14a>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6a18      	ldr	r0, [r3, #32]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	3324      	adds	r3, #36	; 0x24
 800d5f8:	220b      	movs	r2, #11
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	f7fe fd92 	bl	800c124 <mem_cmp>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d014      	beq.n	800d630 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d606:	23ff      	movs	r3, #255	; 0xff
 800d608:	757b      	strb	r3, [r7, #21]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f04f 32ff 	mov.w	r2, #4294967295
 800d610:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d612:	2100      	movs	r1, #0
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff fb72 	bl	800ccfe <dir_next>
 800d61a:	4603      	mov	r3, r0
 800d61c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d61e:	7dfb      	ldrb	r3, [r7, #23]
 800d620:	2b00      	cmp	r3, #0
 800d622:	f43f af65 	beq.w	800d4f0 <dir_find+0x34>
 800d626:	e004      	b.n	800d632 <dir_find+0x176>
		if (res != FR_OK) break;
 800d628:	bf00      	nop
 800d62a:	e002      	b.n	800d632 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d62c:	bf00      	nop
 800d62e:	e000      	b.n	800d632 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d630:	bf00      	nop

	return res;
 800d632:	7dfb      	ldrb	r3, [r7, #23]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3718      	adds	r7, #24
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08c      	sub	sp, #48	; 0x30
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d650:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <dir_register+0x20>
 800d658:	2306      	movs	r3, #6
 800d65a:	e0e0      	b.n	800d81e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d65c:	2300      	movs	r3, #0
 800d65e:	627b      	str	r3, [r7, #36]	; 0x24
 800d660:	e002      	b.n	800d668 <dir_register+0x2c>
 800d662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d664:	3301      	adds	r3, #1
 800d666:	627b      	str	r3, [r7, #36]	; 0x24
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	68da      	ldr	r2, [r3, #12]
 800d66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	4413      	add	r3, r2
 800d672:	881b      	ldrh	r3, [r3, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1f4      	bne.n	800d662 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d67e:	f107 030c 	add.w	r3, r7, #12
 800d682:	220c      	movs	r2, #12
 800d684:	4618      	mov	r0, r3
 800d686:	f7fe fd11 	bl	800c0ac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d68a:	7dfb      	ldrb	r3, [r7, #23]
 800d68c:	f003 0301 	and.w	r3, r3, #1
 800d690:	2b00      	cmp	r3, #0
 800d692:	d032      	beq.n	800d6fa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2240      	movs	r2, #64	; 0x40
 800d698:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d69c:	2301      	movs	r3, #1
 800d69e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6a0:	e016      	b.n	800d6d0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	68da      	ldr	r2, [r3, #12]
 800d6ac:	f107 010c 	add.w	r1, r7, #12
 800d6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b2:	f7ff fdab 	bl	800d20c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7ff ff00 	bl	800d4bc <dir_find>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d6c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d106      	bne.n	800d6d8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	2b63      	cmp	r3, #99	; 0x63
 800d6d4:	d9e5      	bls.n	800d6a2 <dir_register+0x66>
 800d6d6:	e000      	b.n	800d6da <dir_register+0x9e>
			if (res != FR_OK) break;
 800d6d8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6dc:	2b64      	cmp	r3, #100	; 0x64
 800d6de:	d101      	bne.n	800d6e4 <dir_register+0xa8>
 800d6e0:	2307      	movs	r3, #7
 800d6e2:	e09c      	b.n	800d81e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d6e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6e8:	2b04      	cmp	r3, #4
 800d6ea:	d002      	beq.n	800d6f2 <dir_register+0xb6>
 800d6ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6f0:	e095      	b.n	800d81e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d6f2:	7dfa      	ldrb	r2, [r7, #23]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d6fa:	7dfb      	ldrb	r3, [r7, #23]
 800d6fc:	f003 0302 	and.w	r3, r3, #2
 800d700:	2b00      	cmp	r3, #0
 800d702:	d007      	beq.n	800d714 <dir_register+0xd8>
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	330c      	adds	r3, #12
 800d708:	4a47      	ldr	r2, [pc, #284]	; (800d828 <dir_register+0x1ec>)
 800d70a:	fba2 2303 	umull	r2, r3, r2, r3
 800d70e:	089b      	lsrs	r3, r3, #2
 800d710:	3301      	adds	r3, #1
 800d712:	e000      	b.n	800d716 <dir_register+0xda>
 800d714:	2301      	movs	r3, #1
 800d716:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d718:	6a39      	ldr	r1, [r7, #32]
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff fbb4 	bl	800ce88 <dir_alloc>
 800d720:	4603      	mov	r3, r0
 800d722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d148      	bne.n	800d7c0 <dir_register+0x184>
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	3b01      	subs	r3, #1
 800d732:	623b      	str	r3, [r7, #32]
 800d734:	6a3b      	ldr	r3, [r7, #32]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d042      	beq.n	800d7c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	695a      	ldr	r2, [r3, #20]
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	015b      	lsls	r3, r3, #5
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff fa5e 	bl	800cc08 <dir_sdi>
 800d74c:	4603      	mov	r3, r0
 800d74e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d756:	2b00      	cmp	r3, #0
 800d758:	d132      	bne.n	800d7c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	3324      	adds	r3, #36	; 0x24
 800d75e:	4618      	mov	r0, r3
 800d760:	f7ff fde4 	bl	800d32c <sum_sfn>
 800d764:	4603      	mov	r3, r0
 800d766:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	69db      	ldr	r3, [r3, #28]
 800d76c:	4619      	mov	r1, r3
 800d76e:	69f8      	ldr	r0, [r7, #28]
 800d770:	f7fe feca 	bl	800c508 <move_window>
 800d774:	4603      	mov	r3, r0
 800d776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d77a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d11d      	bne.n	800d7be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	68d8      	ldr	r0, [r3, #12]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6a19      	ldr	r1, [r3, #32]
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	7efb      	ldrb	r3, [r7, #27]
 800d790:	f7ff fcd4 	bl	800d13c <put_lfn>
				fs->wflag = 1;
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	2201      	movs	r2, #1
 800d798:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d79a:	2100      	movs	r1, #0
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7ff faae 	bl	800ccfe <dir_next>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d7a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d107      	bne.n	800d7c0 <dir_register+0x184>
 800d7b0:	6a3b      	ldr	r3, [r7, #32]
 800d7b2:	3b01      	subs	r3, #1
 800d7b4:	623b      	str	r3, [r7, #32]
 800d7b6:	6a3b      	ldr	r3, [r7, #32]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1d5      	bne.n	800d768 <dir_register+0x12c>
 800d7bc:	e000      	b.n	800d7c0 <dir_register+0x184>
				if (res != FR_OK) break;
 800d7be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d7c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d128      	bne.n	800d81a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	69db      	ldr	r3, [r3, #28]
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	69f8      	ldr	r0, [r7, #28]
 800d7d0:	f7fe fe9a 	bl	800c508 <move_window>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d7da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d11b      	bne.n	800d81a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6a1b      	ldr	r3, [r3, #32]
 800d7e6:	2220      	movs	r2, #32
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fe fc7f 	bl	800c0ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6a18      	ldr	r0, [r3, #32]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	3324      	adds	r3, #36	; 0x24
 800d7f8:	220b      	movs	r2, #11
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	f7fe fc56 	bl	800c0ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a1b      	ldr	r3, [r3, #32]
 800d80a:	330c      	adds	r3, #12
 800d80c:	f002 0218 	and.w	r2, r2, #24
 800d810:	b2d2      	uxtb	r2, r2
 800d812:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	2201      	movs	r2, #1
 800d818:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d81a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3730      	adds	r7, #48	; 0x30
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	4ec4ec4f 	.word	0x4ec4ec4f

0800d82c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b088      	sub	sp, #32
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	2200      	movs	r2, #0
 800d840:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	69db      	ldr	r3, [r3, #28]
 800d846:	2b00      	cmp	r3, #0
 800d848:	f000 80c9 	beq.w	800d9de <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d854:	d032      	beq.n	800d8bc <get_fileinfo+0x90>
			i = j = 0;
 800d856:	2300      	movs	r3, #0
 800d858:	61bb      	str	r3, [r7, #24]
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d85e:	e01b      	b.n	800d898 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d860:	89fb      	ldrh	r3, [r7, #14]
 800d862:	2100      	movs	r1, #0
 800d864:	4618      	mov	r0, r3
 800d866:	f001 fd31 	bl	800f2cc <ff_convert>
 800d86a:	4603      	mov	r3, r0
 800d86c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d86e:	89fb      	ldrh	r3, [r7, #14]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d102      	bne.n	800d87a <get_fileinfo+0x4e>
 800d874:	2300      	movs	r3, #0
 800d876:	61fb      	str	r3, [r7, #28]
 800d878:	e01a      	b.n	800d8b0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	2bfe      	cmp	r3, #254	; 0xfe
 800d87e:	d902      	bls.n	800d886 <get_fileinfo+0x5a>
 800d880:	2300      	movs	r3, #0
 800d882:	61fb      	str	r3, [r7, #28]
 800d884:	e014      	b.n	800d8b0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	1c5a      	adds	r2, r3, #1
 800d88a:	61fa      	str	r2, [r7, #28]
 800d88c:	89fa      	ldrh	r2, [r7, #14]
 800d88e:	b2d1      	uxtb	r1, r2
 800d890:	683a      	ldr	r2, [r7, #0]
 800d892:	4413      	add	r3, r2
 800d894:	460a      	mov	r2, r1
 800d896:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	68da      	ldr	r2, [r3, #12]
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	1c59      	adds	r1, r3, #1
 800d8a0:	61b9      	str	r1, [r7, #24]
 800d8a2:	005b      	lsls	r3, r3, #1
 800d8a4:	4413      	add	r3, r2
 800d8a6:	881b      	ldrh	r3, [r3, #0]
 800d8a8:	81fb      	strh	r3, [r7, #14]
 800d8aa:	89fb      	ldrh	r3, [r7, #14]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1d7      	bne.n	800d860 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d8b0:	683a      	ldr	r2, [r7, #0]
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	3316      	adds	r3, #22
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	61bb      	str	r3, [r7, #24]
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d8c4:	683a      	ldr	r2, [r7, #0]
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	3316      	adds	r3, #22
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d8d0:	e04c      	b.n	800d96c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6a1a      	ldr	r2, [r3, #32]
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	1c59      	adds	r1, r3, #1
 800d8da:	61f9      	str	r1, [r7, #28]
 800d8dc:	4413      	add	r3, r2
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d8e2:	7dfb      	ldrb	r3, [r7, #23]
 800d8e4:	2b20      	cmp	r3, #32
 800d8e6:	d100      	bne.n	800d8ea <get_fileinfo+0xbe>
 800d8e8:	e040      	b.n	800d96c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d8ea:	7dfb      	ldrb	r3, [r7, #23]
 800d8ec:	2b05      	cmp	r3, #5
 800d8ee:	d101      	bne.n	800d8f4 <get_fileinfo+0xc8>
 800d8f0:	23e5      	movs	r3, #229	; 0xe5
 800d8f2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	2b09      	cmp	r3, #9
 800d8f8:	d10f      	bne.n	800d91a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d8fa:	89bb      	ldrh	r3, [r7, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d105      	bne.n	800d90c <get_fileinfo+0xe0>
 800d900:	683a      	ldr	r2, [r7, #0]
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	4413      	add	r3, r2
 800d906:	3316      	adds	r3, #22
 800d908:	222e      	movs	r2, #46	; 0x2e
 800d90a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	1c5a      	adds	r2, r3, #1
 800d910:	61ba      	str	r2, [r7, #24]
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	4413      	add	r3, r2
 800d916:	222e      	movs	r2, #46	; 0x2e
 800d918:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d91a:	683a      	ldr	r2, [r7, #0]
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	4413      	add	r3, r2
 800d920:	3309      	adds	r3, #9
 800d922:	7dfa      	ldrb	r2, [r7, #23]
 800d924:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d926:	89bb      	ldrh	r3, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d11c      	bne.n	800d966 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d92c:	7dfb      	ldrb	r3, [r7, #23]
 800d92e:	2b40      	cmp	r3, #64	; 0x40
 800d930:	d913      	bls.n	800d95a <get_fileinfo+0x12e>
 800d932:	7dfb      	ldrb	r3, [r7, #23]
 800d934:	2b5a      	cmp	r3, #90	; 0x5a
 800d936:	d810      	bhi.n	800d95a <get_fileinfo+0x12e>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a1b      	ldr	r3, [r3, #32]
 800d93c:	330c      	adds	r3, #12
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	461a      	mov	r2, r3
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	2b08      	cmp	r3, #8
 800d946:	d901      	bls.n	800d94c <get_fileinfo+0x120>
 800d948:	2310      	movs	r3, #16
 800d94a:	e000      	b.n	800d94e <get_fileinfo+0x122>
 800d94c:	2308      	movs	r3, #8
 800d94e:	4013      	ands	r3, r2
 800d950:	2b00      	cmp	r3, #0
 800d952:	d002      	beq.n	800d95a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d954:	7dfb      	ldrb	r3, [r7, #23]
 800d956:	3320      	adds	r3, #32
 800d958:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	4413      	add	r3, r2
 800d960:	3316      	adds	r3, #22
 800d962:	7dfa      	ldrb	r2, [r7, #23]
 800d964:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	3301      	adds	r3, #1
 800d96a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	2b0a      	cmp	r3, #10
 800d970:	d9af      	bls.n	800d8d2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d972:	89bb      	ldrh	r3, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10d      	bne.n	800d994 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d978:	683a      	ldr	r2, [r7, #0]
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	4413      	add	r3, r2
 800d97e:	3316      	adds	r3, #22
 800d980:	2200      	movs	r2, #0
 800d982:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6a1b      	ldr	r3, [r3, #32]
 800d988:	330c      	adds	r3, #12
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <get_fileinfo+0x168>
 800d990:	2300      	movs	r3, #0
 800d992:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d994:	683a      	ldr	r2, [r7, #0]
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	4413      	add	r3, r2
 800d99a:	3309      	adds	r3, #9
 800d99c:	2200      	movs	r2, #0
 800d99e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a1b      	ldr	r3, [r3, #32]
 800d9a4:	7ada      	ldrb	r2, [r3, #11]
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a1b      	ldr	r3, [r3, #32]
 800d9ae:	331c      	adds	r3, #28
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fe fb11 	bl	800bfd8 <ld_dword>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6a1b      	ldr	r3, [r3, #32]
 800d9c0:	3316      	adds	r3, #22
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fe fb08 	bl	800bfd8 <ld_dword>
 800d9c8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	b29a      	uxth	r2, r3
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	80da      	strh	r2, [r3, #6]
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	0c1b      	lsrs	r3, r3, #16
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	809a      	strh	r2, [r3, #4]
 800d9dc:	e000      	b.n	800d9e0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d9de:	bf00      	nop
}
 800d9e0:	3720      	adds	r7, #32
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
	...

0800d9e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b08a      	sub	sp, #40	; 0x28
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	613b      	str	r3, [r7, #16]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	60fb      	str	r3, [r7, #12]
 800da00:	2300      	movs	r3, #0
 800da02:	617b      	str	r3, [r7, #20]
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	1c5a      	adds	r2, r3, #1
 800da0c:	61ba      	str	r2, [r7, #24]
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	4413      	add	r3, r2
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800da16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da18:	2b1f      	cmp	r3, #31
 800da1a:	d940      	bls.n	800da9e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800da1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da1e:	2b2f      	cmp	r3, #47	; 0x2f
 800da20:	d006      	beq.n	800da30 <create_name+0x48>
 800da22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da24:	2b5c      	cmp	r3, #92	; 0x5c
 800da26:	d110      	bne.n	800da4a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800da28:	e002      	b.n	800da30 <create_name+0x48>
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	3301      	adds	r3, #1
 800da2e:	61bb      	str	r3, [r7, #24]
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	4413      	add	r3, r2
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	2b2f      	cmp	r3, #47	; 0x2f
 800da3a:	d0f6      	beq.n	800da2a <create_name+0x42>
 800da3c:	693a      	ldr	r2, [r7, #16]
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	4413      	add	r3, r2
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	2b5c      	cmp	r3, #92	; 0x5c
 800da46:	d0f0      	beq.n	800da2a <create_name+0x42>
			break;
 800da48:	e02a      	b.n	800daa0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2bfe      	cmp	r3, #254	; 0xfe
 800da4e:	d901      	bls.n	800da54 <create_name+0x6c>
 800da50:	2306      	movs	r3, #6
 800da52:	e177      	b.n	800dd44 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800da54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da56:	b2db      	uxtb	r3, r3
 800da58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800da5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da5c:	2101      	movs	r1, #1
 800da5e:	4618      	mov	r0, r3
 800da60:	f001 fc34 	bl	800f2cc <ff_convert>
 800da64:	4603      	mov	r3, r0
 800da66:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800da68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d101      	bne.n	800da72 <create_name+0x8a>
 800da6e:	2306      	movs	r3, #6
 800da70:	e168      	b.n	800dd44 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800da72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da74:	2b7f      	cmp	r3, #127	; 0x7f
 800da76:	d809      	bhi.n	800da8c <create_name+0xa4>
 800da78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da7a:	4619      	mov	r1, r3
 800da7c:	48b3      	ldr	r0, [pc, #716]	; (800dd4c <create_name+0x364>)
 800da7e:	f7fe fb78 	bl	800c172 <chk_chr>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d001      	beq.n	800da8c <create_name+0xa4>
 800da88:	2306      	movs	r3, #6
 800da8a:	e15b      	b.n	800dd44 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	1c5a      	adds	r2, r3, #1
 800da90:	617a      	str	r2, [r7, #20]
 800da92:	005b      	lsls	r3, r3, #1
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	4413      	add	r3, r2
 800da98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da9a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800da9c:	e7b4      	b.n	800da08 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800da9e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800daa0:	693a      	ldr	r2, [r7, #16]
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	441a      	add	r2, r3
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800daaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daac:	2b1f      	cmp	r3, #31
 800daae:	d801      	bhi.n	800dab4 <create_name+0xcc>
 800dab0:	2304      	movs	r3, #4
 800dab2:	e000      	b.n	800dab6 <create_name+0xce>
 800dab4:	2300      	movs	r3, #0
 800dab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800daba:	e011      	b.n	800dae0 <create_name+0xf8>
		w = lfn[di - 1];
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dac2:	3b01      	subs	r3, #1
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	4413      	add	r3, r2
 800daca:	881b      	ldrh	r3, [r3, #0]
 800dacc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dad0:	2b20      	cmp	r3, #32
 800dad2:	d002      	beq.n	800dada <create_name+0xf2>
 800dad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dad6:	2b2e      	cmp	r3, #46	; 0x2e
 800dad8:	d106      	bne.n	800dae8 <create_name+0x100>
		di--;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	3b01      	subs	r3, #1
 800dade:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1ea      	bne.n	800dabc <create_name+0xd4>
 800dae6:	e000      	b.n	800daea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dae8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	005b      	lsls	r3, r3, #1
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	4413      	add	r3, r2
 800daf2:	2200      	movs	r2, #0
 800daf4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d101      	bne.n	800db00 <create_name+0x118>
 800dafc:	2306      	movs	r3, #6
 800dafe:	e121      	b.n	800dd44 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3324      	adds	r3, #36	; 0x24
 800db04:	220b      	movs	r2, #11
 800db06:	2120      	movs	r1, #32
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe faf0 	bl	800c0ee <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800db0e:	2300      	movs	r3, #0
 800db10:	61bb      	str	r3, [r7, #24]
 800db12:	e002      	b.n	800db1a <create_name+0x132>
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	3301      	adds	r3, #1
 800db18:	61bb      	str	r3, [r7, #24]
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	005b      	lsls	r3, r3, #1
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	4413      	add	r3, r2
 800db22:	881b      	ldrh	r3, [r3, #0]
 800db24:	2b20      	cmp	r3, #32
 800db26:	d0f5      	beq.n	800db14 <create_name+0x12c>
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	005b      	lsls	r3, r3, #1
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	4413      	add	r3, r2
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	2b2e      	cmp	r3, #46	; 0x2e
 800db34:	d0ee      	beq.n	800db14 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d009      	beq.n	800db50 <create_name+0x168>
 800db3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db40:	f043 0303 	orr.w	r3, r3, #3
 800db44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800db48:	e002      	b.n	800db50 <create_name+0x168>
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	3b01      	subs	r3, #1
 800db4e:	617b      	str	r3, [r7, #20]
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d009      	beq.n	800db6a <create_name+0x182>
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db5c:	3b01      	subs	r3, #1
 800db5e:	005b      	lsls	r3, r3, #1
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	4413      	add	r3, r2
 800db64:	881b      	ldrh	r3, [r3, #0]
 800db66:	2b2e      	cmp	r3, #46	; 0x2e
 800db68:	d1ef      	bne.n	800db4a <create_name+0x162>

	i = b = 0; ni = 8;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db70:	2300      	movs	r3, #0
 800db72:	623b      	str	r3, [r7, #32]
 800db74:	2308      	movs	r3, #8
 800db76:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	61ba      	str	r2, [r7, #24]
 800db7e:	005b      	lsls	r3, r3, #1
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	4413      	add	r3, r2
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800db88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f000 8090 	beq.w	800dcb0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800db90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db92:	2b20      	cmp	r3, #32
 800db94:	d006      	beq.n	800dba4 <create_name+0x1bc>
 800db96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db98:	2b2e      	cmp	r3, #46	; 0x2e
 800db9a:	d10a      	bne.n	800dbb2 <create_name+0x1ca>
 800db9c:	69ba      	ldr	r2, [r7, #24]
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d006      	beq.n	800dbb2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800dba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dba8:	f043 0303 	orr.w	r3, r3, #3
 800dbac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbb0:	e07d      	b.n	800dcae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dbb2:	6a3a      	ldr	r2, [r7, #32]
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d203      	bcs.n	800dbc2 <create_name+0x1da>
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d123      	bne.n	800dc0a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dbc2:	69fb      	ldr	r3, [r7, #28]
 800dbc4:	2b0b      	cmp	r3, #11
 800dbc6:	d106      	bne.n	800dbd6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dbc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbcc:	f043 0303 	orr.w	r3, r3, #3
 800dbd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbd4:	e06f      	b.n	800dcb6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dbd6:	69ba      	ldr	r2, [r7, #24]
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d005      	beq.n	800dbea <create_name+0x202>
 800dbde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbe2:	f043 0303 	orr.w	r3, r3, #3
 800dbe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dbea:	69ba      	ldr	r2, [r7, #24]
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d860      	bhi.n	800dcb4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	61bb      	str	r3, [r7, #24]
 800dbf6:	2308      	movs	r3, #8
 800dbf8:	623b      	str	r3, [r7, #32]
 800dbfa:	230b      	movs	r3, #11
 800dbfc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dbfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc08:	e051      	b.n	800dcae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dc0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc0c:	2b7f      	cmp	r3, #127	; 0x7f
 800dc0e:	d914      	bls.n	800dc3a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dc10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc12:	2100      	movs	r1, #0
 800dc14:	4618      	mov	r0, r3
 800dc16:	f001 fb59 	bl	800f2cc <ff_convert>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dc1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d004      	beq.n	800dc2e <create_name+0x246>
 800dc24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc26:	3b80      	subs	r3, #128	; 0x80
 800dc28:	4a49      	ldr	r2, [pc, #292]	; (800dd50 <create_name+0x368>)
 800dc2a:	5cd3      	ldrb	r3, [r2, r3]
 800dc2c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dc2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc32:	f043 0302 	orr.w	r3, r3, #2
 800dc36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dc3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d007      	beq.n	800dc50 <create_name+0x268>
 800dc40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc42:	4619      	mov	r1, r3
 800dc44:	4843      	ldr	r0, [pc, #268]	; (800dd54 <create_name+0x36c>)
 800dc46:	f7fe fa94 	bl	800c172 <chk_chr>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d008      	beq.n	800dc62 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dc50:	235f      	movs	r3, #95	; 0x5f
 800dc52:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dc54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc58:	f043 0303 	orr.w	r3, r3, #3
 800dc5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc60:	e01b      	b.n	800dc9a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dc62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc64:	2b40      	cmp	r3, #64	; 0x40
 800dc66:	d909      	bls.n	800dc7c <create_name+0x294>
 800dc68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc6a:	2b5a      	cmp	r3, #90	; 0x5a
 800dc6c:	d806      	bhi.n	800dc7c <create_name+0x294>
					b |= 2;
 800dc6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc72:	f043 0302 	orr.w	r3, r3, #2
 800dc76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc7a:	e00e      	b.n	800dc9a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dc7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc7e:	2b60      	cmp	r3, #96	; 0x60
 800dc80:	d90b      	bls.n	800dc9a <create_name+0x2b2>
 800dc82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc84:	2b7a      	cmp	r3, #122	; 0x7a
 800dc86:	d808      	bhi.n	800dc9a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dc88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc8c:	f043 0301 	orr.w	r3, r3, #1
 800dc90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc96:	3b20      	subs	r3, #32
 800dc98:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dc9a:	6a3b      	ldr	r3, [r7, #32]
 800dc9c:	1c5a      	adds	r2, r3, #1
 800dc9e:	623a      	str	r2, [r7, #32]
 800dca0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dca2:	b2d1      	uxtb	r1, r2
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	4413      	add	r3, r2
 800dca8:	460a      	mov	r2, r1
 800dcaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dcae:	e763      	b.n	800db78 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dcb0:	bf00      	nop
 800dcb2:	e000      	b.n	800dcb6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800dcb4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dcbc:	2be5      	cmp	r3, #229	; 0xe5
 800dcbe:	d103      	bne.n	800dcc8 <create_name+0x2e0>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2205      	movs	r2, #5
 800dcc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	2b08      	cmp	r3, #8
 800dccc:	d104      	bne.n	800dcd8 <create_name+0x2f0>
 800dcce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dcd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcdc:	f003 030c 	and.w	r3, r3, #12
 800dce0:	2b0c      	cmp	r3, #12
 800dce2:	d005      	beq.n	800dcf0 <create_name+0x308>
 800dce4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dce8:	f003 0303 	and.w	r3, r3, #3
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d105      	bne.n	800dcfc <create_name+0x314>
 800dcf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcf4:	f043 0302 	orr.w	r3, r3, #2
 800dcf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd00:	f003 0302 	and.w	r3, r3, #2
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d117      	bne.n	800dd38 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dd08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd0c:	f003 0303 	and.w	r3, r3, #3
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d105      	bne.n	800dd20 <create_name+0x338>
 800dd14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd18:	f043 0310 	orr.w	r3, r3, #16
 800dd1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dd20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd24:	f003 030c 	and.w	r3, r3, #12
 800dd28:	2b04      	cmp	r3, #4
 800dd2a:	d105      	bne.n	800dd38 <create_name+0x350>
 800dd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd30:	f043 0308 	orr.w	r3, r3, #8
 800dd34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dd3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dd42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3728      	adds	r7, #40	; 0x28
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	0800fd70 	.word	0x0800fd70
 800dd50:	0800fe4c 	.word	0x0800fe4c
 800dd54:	0800fd7c 	.word	0x0800fd7c

0800dd58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dd6c:	e002      	b.n	800dd74 <follow_path+0x1c>
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	3301      	adds	r3, #1
 800dd72:	603b      	str	r3, [r7, #0]
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b2f      	cmp	r3, #47	; 0x2f
 800dd7a:	d0f8      	beq.n	800dd6e <follow_path+0x16>
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	2b5c      	cmp	r3, #92	; 0x5c
 800dd82:	d0f4      	beq.n	800dd6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	2200      	movs	r2, #0
 800dd88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	2b1f      	cmp	r3, #31
 800dd90:	d80a      	bhi.n	800dda8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2280      	movs	r2, #128	; 0x80
 800dd96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7fe ff33 	bl	800cc08 <dir_sdi>
 800dda2:	4603      	mov	r3, r0
 800dda4:	75fb      	strb	r3, [r7, #23]
 800dda6:	e043      	b.n	800de30 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dda8:	463b      	mov	r3, r7
 800ddaa:	4619      	mov	r1, r3
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff fe1b 	bl	800d9e8 <create_name>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d134      	bne.n	800de26 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fb7d 	bl	800d4bc <dir_find>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ddcc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00a      	beq.n	800ddea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ddd4:	7dfb      	ldrb	r3, [r7, #23]
 800ddd6:	2b04      	cmp	r3, #4
 800ddd8:	d127      	bne.n	800de2a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ddda:	7afb      	ldrb	r3, [r7, #11]
 800dddc:	f003 0304 	and.w	r3, r3, #4
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d122      	bne.n	800de2a <follow_path+0xd2>
 800dde4:	2305      	movs	r3, #5
 800dde6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dde8:	e01f      	b.n	800de2a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ddea:	7afb      	ldrb	r3, [r7, #11]
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d11c      	bne.n	800de2e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	799b      	ldrb	r3, [r3, #6]
 800ddf8:	f003 0310 	and.w	r3, r3, #16
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d102      	bne.n	800de06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800de00:	2305      	movs	r3, #5
 800de02:	75fb      	strb	r3, [r7, #23]
 800de04:	e014      	b.n	800de30 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	695b      	ldr	r3, [r3, #20]
 800de10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de14:	4413      	add	r3, r2
 800de16:	4619      	mov	r1, r3
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f7ff f87c 	bl	800cf16 <ld_clust>
 800de1e:	4602      	mov	r2, r0
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de24:	e7c0      	b.n	800dda8 <follow_path+0x50>
			if (res != FR_OK) break;
 800de26:	bf00      	nop
 800de28:	e002      	b.n	800de30 <follow_path+0xd8>
				break;
 800de2a:	bf00      	nop
 800de2c:	e000      	b.n	800de30 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de2e:	bf00      	nop
			}
		}
	}

	return res;
 800de30:	7dfb      	ldrb	r3, [r7, #23]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b087      	sub	sp, #28
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de42:	f04f 33ff 	mov.w	r3, #4294967295
 800de46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d031      	beq.n	800deb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	e002      	b.n	800de5e <get_ldnumber+0x24>
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	3301      	adds	r3, #1
 800de5c:	617b      	str	r3, [r7, #20]
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	2b1f      	cmp	r3, #31
 800de64:	d903      	bls.n	800de6e <get_ldnumber+0x34>
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	2b3a      	cmp	r3, #58	; 0x3a
 800de6c:	d1f4      	bne.n	800de58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	2b3a      	cmp	r3, #58	; 0x3a
 800de74:	d11c      	bne.n	800deb0 <get_ldnumber+0x76>
			tp = *path;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	1c5a      	adds	r2, r3, #1
 800de80:	60fa      	str	r2, [r7, #12]
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	3b30      	subs	r3, #48	; 0x30
 800de86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	2b09      	cmp	r3, #9
 800de8c:	d80e      	bhi.n	800deac <get_ldnumber+0x72>
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	429a      	cmp	r2, r3
 800de94:	d10a      	bne.n	800deac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d107      	bne.n	800deac <get_ldnumber+0x72>
					vol = (int)i;
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	3301      	adds	r3, #1
 800dea4:	617b      	str	r3, [r7, #20]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	697a      	ldr	r2, [r7, #20]
 800deaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	e002      	b.n	800deb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800deb0:	2300      	movs	r3, #0
 800deb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800deb4:	693b      	ldr	r3, [r7, #16]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	371c      	adds	r7, #28
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
	...

0800dec4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	70da      	strb	r2, [r3, #3]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f04f 32ff 	mov.w	r2, #4294967295
 800deda:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7fe fb12 	bl	800c508 <move_window>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d001      	beq.n	800deee <check_fs+0x2a>
 800deea:	2304      	movs	r3, #4
 800deec:	e038      	b.n	800df60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	3334      	adds	r3, #52	; 0x34
 800def2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800def6:	4618      	mov	r0, r3
 800def8:	f7fe f856 	bl	800bfa8 <ld_word>
 800defc:	4603      	mov	r3, r0
 800defe:	461a      	mov	r2, r3
 800df00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800df04:	429a      	cmp	r2, r3
 800df06:	d001      	beq.n	800df0c <check_fs+0x48>
 800df08:	2303      	movs	r3, #3
 800df0a:	e029      	b.n	800df60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df12:	2be9      	cmp	r3, #233	; 0xe9
 800df14:	d009      	beq.n	800df2a <check_fs+0x66>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df1c:	2beb      	cmp	r3, #235	; 0xeb
 800df1e:	d11e      	bne.n	800df5e <check_fs+0x9a>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800df26:	2b90      	cmp	r3, #144	; 0x90
 800df28:	d119      	bne.n	800df5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	3334      	adds	r3, #52	; 0x34
 800df2e:	3336      	adds	r3, #54	; 0x36
 800df30:	4618      	mov	r0, r3
 800df32:	f7fe f851 	bl	800bfd8 <ld_dword>
 800df36:	4603      	mov	r3, r0
 800df38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800df3c:	4a0a      	ldr	r2, [pc, #40]	; (800df68 <check_fs+0xa4>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d101      	bne.n	800df46 <check_fs+0x82>
 800df42:	2300      	movs	r3, #0
 800df44:	e00c      	b.n	800df60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	3334      	adds	r3, #52	; 0x34
 800df4a:	3352      	adds	r3, #82	; 0x52
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe f843 	bl	800bfd8 <ld_dword>
 800df52:	4603      	mov	r3, r0
 800df54:	4a05      	ldr	r2, [pc, #20]	; (800df6c <check_fs+0xa8>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d101      	bne.n	800df5e <check_fs+0x9a>
 800df5a:	2300      	movs	r3, #0
 800df5c:	e000      	b.n	800df60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800df5e:	2302      	movs	r3, #2
}
 800df60:	4618      	mov	r0, r3
 800df62:	3708      	adds	r7, #8
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	00544146 	.word	0x00544146
 800df6c:	33544146 	.word	0x33544146

0800df70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b096      	sub	sp, #88	; 0x58
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	4613      	mov	r3, r2
 800df7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	2200      	movs	r2, #0
 800df82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f7ff ff58 	bl	800de3a <get_ldnumber>
 800df8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800df8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df8e:	2b00      	cmp	r3, #0
 800df90:	da01      	bge.n	800df96 <find_volume+0x26>
 800df92:	230b      	movs	r3, #11
 800df94:	e231      	b.n	800e3fa <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800df96:	4aa8      	ldr	r2, [pc, #672]	; (800e238 <find_volume+0x2c8>)
 800df98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <find_volume+0x3a>
 800dfa6:	230c      	movs	r3, #12
 800dfa8:	e227      	b.n	800e3fa <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dfb0:	79fb      	ldrb	r3, [r7, #7]
 800dfb2:	f023 0301 	bic.w	r3, r3, #1
 800dfb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d01a      	beq.n	800dff6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	785b      	ldrb	r3, [r3, #1]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fd ff51 	bl	800be6c <disk_status>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dfd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfd4:	f003 0301 	and.w	r3, r3, #1
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d10c      	bne.n	800dff6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dfdc:	79fb      	ldrb	r3, [r7, #7]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d007      	beq.n	800dff2 <find_volume+0x82>
 800dfe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfe6:	f003 0304 	and.w	r3, r3, #4
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dfee:	230a      	movs	r3, #10
 800dff0:	e203      	b.n	800e3fa <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800dff2:	2300      	movs	r3, #0
 800dff4:	e201      	b.n	800e3fa <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff8:	2200      	movs	r2, #0
 800dffa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e002:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e006:	785b      	ldrb	r3, [r3, #1]
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fd ff49 	bl	800bea0 <disk_initialize>
 800e00e:	4603      	mov	r3, r0
 800e010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e018:	f003 0301 	and.w	r3, r3, #1
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e020:	2303      	movs	r3, #3
 800e022:	e1ea      	b.n	800e3fa <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e024:	79fb      	ldrb	r3, [r7, #7]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d007      	beq.n	800e03a <find_volume+0xca>
 800e02a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e02e:	f003 0304 	and.w	r3, r3, #4
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e036:	230a      	movs	r3, #10
 800e038:	e1df      	b.n	800e3fa <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e03e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e040:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e042:	f7ff ff3f 	bl	800dec4 <check_fs>
 800e046:	4603      	mov	r3, r0
 800e048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e04c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e050:	2b02      	cmp	r3, #2
 800e052:	d14b      	bne.n	800e0ec <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e054:	2300      	movs	r3, #0
 800e056:	643b      	str	r3, [r7, #64]	; 0x40
 800e058:	e01f      	b.n	800e09a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e062:	011b      	lsls	r3, r3, #4
 800e064:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e068:	4413      	add	r3, r2
 800e06a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	3304      	adds	r3, #4
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d006      	beq.n	800e084 <find_volume+0x114>
 800e076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e078:	3308      	adds	r3, #8
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fd ffac 	bl	800bfd8 <ld_dword>
 800e080:	4602      	mov	r2, r0
 800e082:	e000      	b.n	800e086 <find_volume+0x116>
 800e084:	2200      	movs	r2, #0
 800e086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e08e:	440b      	add	r3, r1
 800e090:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e096:	3301      	adds	r3, #1
 800e098:	643b      	str	r3, [r7, #64]	; 0x40
 800e09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e09c:	2b03      	cmp	r3, #3
 800e09e:	d9dc      	bls.n	800e05a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <find_volume+0x140>
 800e0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e0be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d005      	beq.n	800e0d2 <find_volume+0x162>
 800e0c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0ca:	f7ff fefb 	bl	800dec4 <check_fs>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	e000      	b.n	800e0d4 <find_volume+0x164>
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d905      	bls.n	800e0ec <find_volume+0x17c>
 800e0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	643b      	str	r3, [r7, #64]	; 0x40
 800e0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d9e1      	bls.n	800e0b0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e0ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0f0:	2b04      	cmp	r3, #4
 800e0f2:	d101      	bne.n	800e0f8 <find_volume+0x188>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e180      	b.n	800e3fa <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e0f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d901      	bls.n	800e104 <find_volume+0x194>
 800e100:	230d      	movs	r3, #13
 800e102:	e17a      	b.n	800e3fa <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	3334      	adds	r3, #52	; 0x34
 800e108:	330b      	adds	r3, #11
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fd ff4c 	bl	800bfa8 <ld_word>
 800e110:	4603      	mov	r3, r0
 800e112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e116:	d001      	beq.n	800e11c <find_volume+0x1ac>
 800e118:	230d      	movs	r3, #13
 800e11a:	e16e      	b.n	800e3fa <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11e:	3334      	adds	r3, #52	; 0x34
 800e120:	3316      	adds	r3, #22
 800e122:	4618      	mov	r0, r3
 800e124:	f7fd ff40 	bl	800bfa8 <ld_word>
 800e128:	4603      	mov	r3, r0
 800e12a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e12c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d106      	bne.n	800e140 <find_volume+0x1d0>
 800e132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e134:	3334      	adds	r3, #52	; 0x34
 800e136:	3324      	adds	r3, #36	; 0x24
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fd ff4d 	bl	800bfd8 <ld_dword>
 800e13e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e144:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e148:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e152:	789b      	ldrb	r3, [r3, #2]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d005      	beq.n	800e164 <find_volume+0x1f4>
 800e158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15a:	789b      	ldrb	r3, [r3, #2]
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d001      	beq.n	800e164 <find_volume+0x1f4>
 800e160:	230d      	movs	r3, #13
 800e162:	e14a      	b.n	800e3fa <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e166:	789b      	ldrb	r3, [r3, #2]
 800e168:	461a      	mov	r2, r3
 800e16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e16c:	fb02 f303 	mul.w	r3, r2, r3
 800e170:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e178:	b29a      	uxth	r2, r3
 800e17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e180:	895b      	ldrh	r3, [r3, #10]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d008      	beq.n	800e198 <find_volume+0x228>
 800e186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e188:	895b      	ldrh	r3, [r3, #10]
 800e18a:	461a      	mov	r2, r3
 800e18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18e:	895b      	ldrh	r3, [r3, #10]
 800e190:	3b01      	subs	r3, #1
 800e192:	4013      	ands	r3, r2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <find_volume+0x22c>
 800e198:	230d      	movs	r3, #13
 800e19a:	e12e      	b.n	800e3fa <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	3334      	adds	r3, #52	; 0x34
 800e1a0:	3311      	adds	r3, #17
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fd ff00 	bl	800bfa8 <ld_word>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b2:	891b      	ldrh	r3, [r3, #8]
 800e1b4:	f003 030f 	and.w	r3, r3, #15
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d001      	beq.n	800e1c2 <find_volume+0x252>
 800e1be:	230d      	movs	r3, #13
 800e1c0:	e11b      	b.n	800e3fa <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c4:	3334      	adds	r3, #52	; 0x34
 800e1c6:	3313      	adds	r3, #19
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7fd feed 	bl	800bfa8 <ld_word>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d106      	bne.n	800e1e6 <find_volume+0x276>
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1da:	3334      	adds	r3, #52	; 0x34
 800e1dc:	3320      	adds	r3, #32
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fd fefa 	bl	800bfd8 <ld_dword>
 800e1e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e8:	3334      	adds	r3, #52	; 0x34
 800e1ea:	330e      	adds	r3, #14
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fd fedb 	bl	800bfa8 <ld_word>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d101      	bne.n	800e200 <find_volume+0x290>
 800e1fc:	230d      	movs	r3, #13
 800e1fe:	e0fc      	b.n	800e3fa <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e200:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e204:	4413      	add	r3, r2
 800e206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e208:	8912      	ldrh	r2, [r2, #8]
 800e20a:	0912      	lsrs	r2, r2, #4
 800e20c:	b292      	uxth	r2, r2
 800e20e:	4413      	add	r3, r2
 800e210:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e216:	429a      	cmp	r2, r3
 800e218:	d201      	bcs.n	800e21e <find_volume+0x2ae>
 800e21a:	230d      	movs	r3, #13
 800e21c:	e0ed      	b.n	800e3fa <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e21e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e222:	1ad3      	subs	r3, r2, r3
 800e224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e226:	8952      	ldrh	r2, [r2, #10]
 800e228:	fbb3 f3f2 	udiv	r3, r3, r2
 800e22c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e230:	2b00      	cmp	r3, #0
 800e232:	d103      	bne.n	800e23c <find_volume+0x2cc>
 800e234:	230d      	movs	r3, #13
 800e236:	e0e0      	b.n	800e3fa <find_volume+0x48a>
 800e238:	200011b8 	.word	0x200011b8
		fmt = FS_FAT32;
 800e23c:	2303      	movs	r3, #3
 800e23e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e248:	4293      	cmp	r3, r2
 800e24a:	d802      	bhi.n	800e252 <find_volume+0x2e2>
 800e24c:	2302      	movs	r3, #2
 800e24e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e254:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e258:	4293      	cmp	r3, r2
 800e25a:	d802      	bhi.n	800e262 <find_volume+0x2f2>
 800e25c:	2301      	movs	r3, #1
 800e25e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	1c9a      	adds	r2, r3, #2
 800e266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e268:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e26e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e270:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e274:	441a      	add	r2, r3
 800e276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e278:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e27a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27e:	441a      	add	r2, r3
 800e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e282:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e288:	2b03      	cmp	r3, #3
 800e28a:	d11e      	bne.n	800e2ca <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28e:	3334      	adds	r3, #52	; 0x34
 800e290:	332a      	adds	r3, #42	; 0x2a
 800e292:	4618      	mov	r0, r3
 800e294:	f7fd fe88 	bl	800bfa8 <ld_word>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d001      	beq.n	800e2a2 <find_volume+0x332>
 800e29e:	230d      	movs	r3, #13
 800e2a0:	e0ab      	b.n	800e3fa <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a4:	891b      	ldrh	r3, [r3, #8]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d001      	beq.n	800e2ae <find_volume+0x33e>
 800e2aa:	230d      	movs	r3, #13
 800e2ac:	e0a5      	b.n	800e3fa <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b0:	3334      	adds	r3, #52	; 0x34
 800e2b2:	332c      	adds	r3, #44	; 0x2c
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fd fe8f 	bl	800bfd8 <ld_dword>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2be:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	699b      	ldr	r3, [r3, #24]
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e2c8:	e01f      	b.n	800e30a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2cc:	891b      	ldrh	r3, [r3, #8]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d101      	bne.n	800e2d6 <find_volume+0x366>
 800e2d2:	230d      	movs	r3, #13
 800e2d4:	e091      	b.n	800e3fa <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2dc:	441a      	add	r2, r3
 800e2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e2e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d103      	bne.n	800e2f2 <find_volume+0x382>
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ec:	699b      	ldr	r3, [r3, #24]
 800e2ee:	005b      	lsls	r3, r3, #1
 800e2f0:	e00a      	b.n	800e308 <find_volume+0x398>
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f4:	699a      	ldr	r2, [r3, #24]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	4413      	add	r3, r2
 800e2fc:	085a      	lsrs	r2, r3, #1
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e300:	699b      	ldr	r3, [r3, #24]
 800e302:	f003 0301 	and.w	r3, r3, #1
 800e306:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e308:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30c:	69da      	ldr	r2, [r3, #28]
 800e30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e310:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e314:	0a5b      	lsrs	r3, r3, #9
 800e316:	429a      	cmp	r2, r3
 800e318:	d201      	bcs.n	800e31e <find_volume+0x3ae>
 800e31a:	230d      	movs	r3, #13
 800e31c:	e06d      	b.n	800e3fa <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e320:	f04f 32ff 	mov.w	r2, #4294967295
 800e324:	615a      	str	r2, [r3, #20]
 800e326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e328:	695a      	ldr	r2, [r3, #20]
 800e32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e330:	2280      	movs	r2, #128	; 0x80
 800e332:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e338:	2b03      	cmp	r3, #3
 800e33a:	d149      	bne.n	800e3d0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33e:	3334      	adds	r3, #52	; 0x34
 800e340:	3330      	adds	r3, #48	; 0x30
 800e342:	4618      	mov	r0, r3
 800e344:	f7fd fe30 	bl	800bfa8 <ld_word>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d140      	bne.n	800e3d0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e34e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e350:	3301      	adds	r3, #1
 800e352:	4619      	mov	r1, r3
 800e354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e356:	f7fe f8d7 	bl	800c508 <move_window>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d137      	bne.n	800e3d0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e362:	2200      	movs	r2, #0
 800e364:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e368:	3334      	adds	r3, #52	; 0x34
 800e36a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fd fe1a 	bl	800bfa8 <ld_word>
 800e374:	4603      	mov	r3, r0
 800e376:	461a      	mov	r2, r3
 800e378:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d127      	bne.n	800e3d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e382:	3334      	adds	r3, #52	; 0x34
 800e384:	4618      	mov	r0, r3
 800e386:	f7fd fe27 	bl	800bfd8 <ld_dword>
 800e38a:	4603      	mov	r3, r0
 800e38c:	4a1d      	ldr	r2, [pc, #116]	; (800e404 <find_volume+0x494>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d11e      	bne.n	800e3d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e394:	3334      	adds	r3, #52	; 0x34
 800e396:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fd fe1c 	bl	800bfd8 <ld_dword>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	4a19      	ldr	r2, [pc, #100]	; (800e408 <find_volume+0x498>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d113      	bne.n	800e3d0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3aa:	3334      	adds	r3, #52	; 0x34
 800e3ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fd fe11 	bl	800bfd8 <ld_dword>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ba:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3be:	3334      	adds	r3, #52	; 0x34
 800e3c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fd fe07 	bl	800bfd8 <ld_dword>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ce:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e3d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e3d8:	4b0c      	ldr	r3, [pc, #48]	; (800e40c <find_volume+0x49c>)
 800e3da:	881b      	ldrh	r3, [r3, #0]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	4b0a      	ldr	r3, [pc, #40]	; (800e40c <find_volume+0x49c>)
 800e3e2:	801a      	strh	r2, [r3, #0]
 800e3e4:	4b09      	ldr	r3, [pc, #36]	; (800e40c <find_volume+0x49c>)
 800e3e6:	881a      	ldrh	r2, [r3, #0]
 800e3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ea:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ee:	4a08      	ldr	r2, [pc, #32]	; (800e410 <find_volume+0x4a0>)
 800e3f0:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e3f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3f4:	f7fe f820 	bl	800c438 <clear_lock>
#endif
	return FR_OK;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3758      	adds	r7, #88	; 0x58
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	41615252 	.word	0x41615252
 800e408:	61417272 	.word	0x61417272
 800e40c:	200011bc 	.word	0x200011bc
 800e410:	200011e0 	.word	0x200011e0

0800e414 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e41e:	2309      	movs	r3, #9
 800e420:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d01c      	beq.n	800e462 <validate+0x4e>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d018      	beq.n	800e462 <validate+0x4e>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d013      	beq.n	800e462 <validate+0x4e>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	889a      	ldrh	r2, [r3, #4]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	88db      	ldrh	r3, [r3, #6]
 800e444:	429a      	cmp	r2, r3
 800e446:	d10c      	bne.n	800e462 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	785b      	ldrb	r3, [r3, #1]
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fd fd0c 	bl	800be6c <disk_status>
 800e454:	4603      	mov	r3, r0
 800e456:	f003 0301 	and.w	r3, r3, #1
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <validate+0x4e>
			res = FR_OK;
 800e45e:	2300      	movs	r3, #0
 800e460:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e462:	7bfb      	ldrb	r3, [r7, #15]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d102      	bne.n	800e46e <validate+0x5a>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	e000      	b.n	800e470 <validate+0x5c>
 800e46e:	2300      	movs	r3, #0
 800e470:	683a      	ldr	r2, [r7, #0]
 800e472:	6013      	str	r3, [r2, #0]
	return res;
 800e474:	7bfb      	ldrb	r3, [r7, #15]
}
 800e476:	4618      	mov	r0, r3
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
	...

0800e480 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b088      	sub	sp, #32
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	4613      	mov	r3, r2
 800e48c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e492:	f107 0310 	add.w	r3, r7, #16
 800e496:	4618      	mov	r0, r3
 800e498:	f7ff fccf 	bl	800de3a <get_ldnumber>
 800e49c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	da01      	bge.n	800e4a8 <f_mount+0x28>
 800e4a4:	230b      	movs	r3, #11
 800e4a6:	e02b      	b.n	800e500 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e4a8:	4a17      	ldr	r2, [pc, #92]	; (800e508 <f_mount+0x88>)
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d005      	beq.n	800e4c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e4b8:	69b8      	ldr	r0, [r7, #24]
 800e4ba:	f7fd ffbd 	bl	800c438 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d002      	beq.n	800e4d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	490d      	ldr	r1, [pc, #52]	; (800e508 <f_mount+0x88>)
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d002      	beq.n	800e4e6 <f_mount+0x66>
 800e4e0:	79fb      	ldrb	r3, [r7, #7]
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d001      	beq.n	800e4ea <f_mount+0x6a>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	e00a      	b.n	800e500 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e4ea:	f107 010c 	add.w	r1, r7, #12
 800e4ee:	f107 0308 	add.w	r3, r7, #8
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7ff fd3b 	bl	800df70 <find_volume>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e500:	4618      	mov	r0, r3
 800e502:	3720      	adds	r7, #32
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	200011b8 	.word	0x200011b8

0800e50c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b09a      	sub	sp, #104	; 0x68
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	4613      	mov	r3, r2
 800e518:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d101      	bne.n	800e524 <f_open+0x18>
 800e520:	2309      	movs	r3, #9
 800e522:	e1ad      	b.n	800e880 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e524:	79fb      	ldrb	r3, [r7, #7]
 800e526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e52a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e52c:	79fa      	ldrb	r2, [r7, #7]
 800e52e:	f107 0114 	add.w	r1, r7, #20
 800e532:	f107 0308 	add.w	r3, r7, #8
 800e536:	4618      	mov	r0, r3
 800e538:	f7ff fd1a 	bl	800df70 <find_volume>
 800e53c:	4603      	mov	r3, r0
 800e53e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e542:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e546:	2b00      	cmp	r3, #0
 800e548:	f040 8191 	bne.w	800e86e <f_open+0x362>
		dj.obj.fs = fs;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e550:	68ba      	ldr	r2, [r7, #8]
 800e552:	f107 0318 	add.w	r3, r7, #24
 800e556:	4611      	mov	r1, r2
 800e558:	4618      	mov	r0, r3
 800e55a:	f7ff fbfd 	bl	800dd58 <follow_path>
 800e55e:	4603      	mov	r3, r0
 800e560:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e564:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d11a      	bne.n	800e5a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e56c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e570:	b25b      	sxtb	r3, r3
 800e572:	2b00      	cmp	r3, #0
 800e574:	da03      	bge.n	800e57e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e576:	2306      	movs	r3, #6
 800e578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e57c:	e011      	b.n	800e5a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e57e:	79fb      	ldrb	r3, [r7, #7]
 800e580:	f023 0301 	bic.w	r3, r3, #1
 800e584:	2b00      	cmp	r3, #0
 800e586:	bf14      	ite	ne
 800e588:	2301      	movne	r3, #1
 800e58a:	2300      	moveq	r3, #0
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	461a      	mov	r2, r3
 800e590:	f107 0318 	add.w	r3, r7, #24
 800e594:	4611      	mov	r1, r2
 800e596:	4618      	mov	r0, r3
 800e598:	f7fd fe06 	bl	800c1a8 <chk_lock>
 800e59c:	4603      	mov	r3, r0
 800e59e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e5a2:	79fb      	ldrb	r3, [r7, #7]
 800e5a4:	f003 031c 	and.w	r3, r3, #28
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d07f      	beq.n	800e6ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e5ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d017      	beq.n	800e5e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e5b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5b8:	2b04      	cmp	r3, #4
 800e5ba:	d10e      	bne.n	800e5da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e5bc:	f7fd fe50 	bl	800c260 <enq_lock>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d006      	beq.n	800e5d4 <f_open+0xc8>
 800e5c6:	f107 0318 	add.w	r3, r7, #24
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7ff f836 	bl	800d63c <dir_register>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	e000      	b.n	800e5d6 <f_open+0xca>
 800e5d4:	2312      	movs	r3, #18
 800e5d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e5da:	79fb      	ldrb	r3, [r7, #7]
 800e5dc:	f043 0308 	orr.w	r3, r3, #8
 800e5e0:	71fb      	strb	r3, [r7, #7]
 800e5e2:	e010      	b.n	800e606 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e5e4:	7fbb      	ldrb	r3, [r7, #30]
 800e5e6:	f003 0311 	and.w	r3, r3, #17
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d003      	beq.n	800e5f6 <f_open+0xea>
					res = FR_DENIED;
 800e5ee:	2307      	movs	r3, #7
 800e5f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e5f4:	e007      	b.n	800e606 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e5f6:	79fb      	ldrb	r3, [r7, #7]
 800e5f8:	f003 0304 	and.w	r3, r3, #4
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <f_open+0xfa>
 800e600:	2308      	movs	r3, #8
 800e602:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e606:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d168      	bne.n	800e6e0 <f_open+0x1d4>
 800e60e:	79fb      	ldrb	r3, [r7, #7]
 800e610:	f003 0308 	and.w	r3, r3, #8
 800e614:	2b00      	cmp	r3, #0
 800e616:	d063      	beq.n	800e6e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e618:	f7fa fc2c 	bl	8008e74 <get_fattime>
 800e61c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e620:	330e      	adds	r3, #14
 800e622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e624:	4618      	mov	r0, r3
 800e626:	f7fd fd15 	bl	800c054 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62c:	3316      	adds	r3, #22
 800e62e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e630:	4618      	mov	r0, r3
 800e632:	f7fd fd0f 	bl	800c054 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e638:	330b      	adds	r3, #11
 800e63a:	2220      	movs	r2, #32
 800e63c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e642:	4611      	mov	r1, r2
 800e644:	4618      	mov	r0, r3
 800e646:	f7fe fc66 	bl	800cf16 <ld_clust>
 800e64a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e650:	2200      	movs	r2, #0
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe fc7e 	bl	800cf54 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65a:	331c      	adds	r3, #28
 800e65c:	2100      	movs	r1, #0
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fd fcf8 	bl	800c054 <st_dword>
					fs->wflag = 1;
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	2201      	movs	r2, #1
 800e668:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e66a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d037      	beq.n	800e6e0 <f_open+0x1d4>
						dw = fs->winsect;
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e674:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e676:	f107 0318 	add.w	r3, r7, #24
 800e67a:	2200      	movs	r2, #0
 800e67c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fe f991 	bl	800c9a6 <remove_chain>
 800e684:	4603      	mov	r3, r0
 800e686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e68a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d126      	bne.n	800e6e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e696:	4618      	mov	r0, r3
 800e698:	f7fd ff36 	bl	800c508 <move_window>
 800e69c:	4603      	mov	r3, r0
 800e69e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e6a6:	3a01      	subs	r2, #1
 800e6a8:	611a      	str	r2, [r3, #16]
 800e6aa:	e019      	b.n	800e6e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e6ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d115      	bne.n	800e6e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e6b4:	7fbb      	ldrb	r3, [r7, #30]
 800e6b6:	f003 0310 	and.w	r3, r3, #16
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d003      	beq.n	800e6c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e6be:	2304      	movs	r3, #4
 800e6c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e6c4:	e00c      	b.n	800e6e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e6c6:	79fb      	ldrb	r3, [r7, #7]
 800e6c8:	f003 0302 	and.w	r3, r3, #2
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d007      	beq.n	800e6e0 <f_open+0x1d4>
 800e6d0:	7fbb      	ldrb	r3, [r7, #30]
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d002      	beq.n	800e6e0 <f_open+0x1d4>
						res = FR_DENIED;
 800e6da:	2307      	movs	r3, #7
 800e6dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e6e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d128      	bne.n	800e73a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e6e8:	79fb      	ldrb	r3, [r7, #7]
 800e6ea:	f003 0308 	and.w	r3, r3, #8
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d003      	beq.n	800e6fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e6f2:	79fb      	ldrb	r3, [r7, #7]
 800e6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e708:	79fb      	ldrb	r3, [r7, #7]
 800e70a:	f023 0301 	bic.w	r3, r3, #1
 800e70e:	2b00      	cmp	r3, #0
 800e710:	bf14      	ite	ne
 800e712:	2301      	movne	r3, #1
 800e714:	2300      	moveq	r3, #0
 800e716:	b2db      	uxtb	r3, r3
 800e718:	461a      	mov	r2, r3
 800e71a:	f107 0318 	add.w	r3, r7, #24
 800e71e:	4611      	mov	r1, r2
 800e720:	4618      	mov	r0, r3
 800e722:	f7fd fdbf 	bl	800c2a4 <inc_lock>
 800e726:	4602      	mov	r2, r0
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d102      	bne.n	800e73a <f_open+0x22e>
 800e734:	2302      	movs	r3, #2
 800e736:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e73a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e73e:	2b00      	cmp	r3, #0
 800e740:	f040 8095 	bne.w	800e86e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e748:	4611      	mov	r1, r2
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fe fbe3 	bl	800cf16 <ld_clust>
 800e750:	4602      	mov	r2, r0
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	331c      	adds	r3, #28
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fd fc3c 	bl	800bfd8 <ld_dword>
 800e760:	4602      	mov	r2, r0
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2200      	movs	r2, #0
 800e76a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e76c:	697a      	ldr	r2, [r7, #20]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	88da      	ldrh	r2, [r3, #6]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	79fa      	ldrb	r2, [r7, #7]
 800e77e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2200      	movs	r2, #0
 800e78a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2200      	movs	r2, #0
 800e790:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	3330      	adds	r3, #48	; 0x30
 800e796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e79a:	2100      	movs	r1, #0
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7fd fca6 	bl	800c0ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
 800e7a4:	f003 0320 	and.w	r3, r3, #32
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d060      	beq.n	800e86e <f_open+0x362>
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d05c      	beq.n	800e86e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	68da      	ldr	r2, [r3, #12]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	895b      	ldrh	r3, [r3, #10]
 800e7c0:	025b      	lsls	r3, r3, #9
 800e7c2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7d0:	e016      	b.n	800e800 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fd ff51 	bl	800c67e <get_fat>
 800e7dc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e7de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d802      	bhi.n	800e7ea <f_open+0x2de>
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e7ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f0:	d102      	bne.n	800e7f8 <f_open+0x2ec>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7fc:	1ad3      	subs	r3, r2, r3
 800e7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e800:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e804:	2b00      	cmp	r3, #0
 800e806:	d103      	bne.n	800e810 <f_open+0x304>
 800e808:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e80a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d8e0      	bhi.n	800e7d2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e814:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e816:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d127      	bne.n	800e86e <f_open+0x362>
 800e81e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e824:	2b00      	cmp	r3, #0
 800e826:	d022      	beq.n	800e86e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fd ff07 	bl	800c640 <clust2sect>
 800e832:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e836:	2b00      	cmp	r3, #0
 800e838:	d103      	bne.n	800e842 <f_open+0x336>
						res = FR_INT_ERR;
 800e83a:	2302      	movs	r3, #2
 800e83c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e840:	e015      	b.n	800e86e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e844:	0a5a      	lsrs	r2, r3, #9
 800e846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e848:	441a      	add	r2, r3
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	7858      	ldrb	r0, [r3, #1]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6a1a      	ldr	r2, [r3, #32]
 800e85c:	2301      	movs	r3, #1
 800e85e:	f7fd fb45 	bl	800beec <disk_read>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d002      	beq.n	800e86e <f_open+0x362>
 800e868:	2301      	movs	r3, #1
 800e86a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e86e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e872:	2b00      	cmp	r3, #0
 800e874:	d002      	beq.n	800e87c <f_open+0x370>
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2200      	movs	r2, #0
 800e87a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e87c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e880:	4618      	mov	r0, r3
 800e882:	3768      	adds	r7, #104	; 0x68
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b08e      	sub	sp, #56	; 0x38
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2200      	movs	r2, #0
 800e89e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f107 0214 	add.w	r2, r7, #20
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7ff fdb3 	bl	800e414 <validate>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e8b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d107      	bne.n	800e8cc <f_read+0x44>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	7d5b      	ldrb	r3, [r3, #21]
 800e8c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e8c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d002      	beq.n	800e8d2 <f_read+0x4a>
 800e8cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8d0:	e115      	b.n	800eafe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	7d1b      	ldrb	r3, [r3, #20]
 800e8d6:	f003 0301 	and.w	r3, r3, #1
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d101      	bne.n	800e8e2 <f_read+0x5a>
 800e8de:	2307      	movs	r3, #7
 800e8e0:	e10d      	b.n	800eafe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	68da      	ldr	r2, [r3, #12]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	699b      	ldr	r3, [r3, #24]
 800e8ea:	1ad3      	subs	r3, r2, r3
 800e8ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	6a3b      	ldr	r3, [r7, #32]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	f240 80fe 	bls.w	800eaf4 <f_read+0x26c>
 800e8f8:	6a3b      	ldr	r3, [r7, #32]
 800e8fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e8fc:	e0fa      	b.n	800eaf4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e906:	2b00      	cmp	r3, #0
 800e908:	f040 80c6 	bne.w	800ea98 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	699b      	ldr	r3, [r3, #24]
 800e910:	0a5b      	lsrs	r3, r3, #9
 800e912:	697a      	ldr	r2, [r7, #20]
 800e914:	8952      	ldrh	r2, [r2, #10]
 800e916:	3a01      	subs	r2, #1
 800e918:	4013      	ands	r3, r2
 800e91a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d12f      	bne.n	800e982 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	699b      	ldr	r3, [r3, #24]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d103      	bne.n	800e932 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	633b      	str	r3, [r7, #48]	; 0x30
 800e930:	e013      	b.n	800e95a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e936:	2b00      	cmp	r3, #0
 800e938:	d007      	beq.n	800e94a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	699b      	ldr	r3, [r3, #24]
 800e93e:	4619      	mov	r1, r3
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f7fe f92d 	bl	800cba0 <clmt_clust>
 800e946:	6338      	str	r0, [r7, #48]	; 0x30
 800e948:	e007      	b.n	800e95a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e94a:	68fa      	ldr	r2, [r7, #12]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	69db      	ldr	r3, [r3, #28]
 800e950:	4619      	mov	r1, r3
 800e952:	4610      	mov	r0, r2
 800e954:	f7fd fe93 	bl	800c67e <get_fat>
 800e958:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d804      	bhi.n	800e96a <f_read+0xe2>
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2202      	movs	r2, #2
 800e964:	755a      	strb	r2, [r3, #21]
 800e966:	2302      	movs	r3, #2
 800e968:	e0c9      	b.n	800eafe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e970:	d104      	bne.n	800e97c <f_read+0xf4>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2201      	movs	r2, #1
 800e976:	755a      	strb	r2, [r3, #21]
 800e978:	2301      	movs	r3, #1
 800e97a:	e0c0      	b.n	800eafe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e980:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e982:	697a      	ldr	r2, [r7, #20]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	69db      	ldr	r3, [r3, #28]
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f7fd fe58 	bl	800c640 <clust2sect>
 800e990:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d104      	bne.n	800e9a2 <f_read+0x11a>
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2202      	movs	r2, #2
 800e99c:	755a      	strb	r2, [r3, #21]
 800e99e:	2302      	movs	r3, #2
 800e9a0:	e0ad      	b.n	800eafe <f_read+0x276>
			sect += csect;
 800e9a2:	69ba      	ldr	r2, [r7, #24]
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	4413      	add	r3, r2
 800e9a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	0a5b      	lsrs	r3, r3, #9
 800e9ae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d039      	beq.n	800ea2a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e9b6:	69fa      	ldr	r2, [r7, #28]
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	4413      	add	r3, r2
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	8952      	ldrh	r2, [r2, #10]
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d905      	bls.n	800e9d0 <f_read+0x148>
					cc = fs->csize - csect;
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	895b      	ldrh	r3, [r3, #10]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	7858      	ldrb	r0, [r3, #1]
 800e9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d6:	69ba      	ldr	r2, [r7, #24]
 800e9d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9da:	f7fd fa87 	bl	800beec <disk_read>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d004      	beq.n	800e9ee <f_read+0x166>
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	755a      	strb	r2, [r3, #21]
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e087      	b.n	800eafe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	7d1b      	ldrb	r3, [r3, #20]
 800e9f2:	b25b      	sxtb	r3, r3
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	da14      	bge.n	800ea22 <f_read+0x19a>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	6a1a      	ldr	r2, [r3, #32]
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	1ad3      	subs	r3, r2, r3
 800ea00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d90d      	bls.n	800ea22 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	6a1a      	ldr	r2, [r3, #32]
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	025b      	lsls	r3, r3, #9
 800ea10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea12:	18d0      	adds	r0, r2, r3
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3330      	adds	r3, #48	; 0x30
 800ea18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	f7fd fb45 	bl	800c0ac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ea22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea24:	025b      	lsls	r3, r3, #9
 800ea26:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ea28:	e050      	b.n	800eacc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	69ba      	ldr	r2, [r7, #24]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d02e      	beq.n	800ea92 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	7d1b      	ldrb	r3, [r3, #20]
 800ea38:	b25b      	sxtb	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	da18      	bge.n	800ea70 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	7858      	ldrb	r0, [r3, #1]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6a1a      	ldr	r2, [r3, #32]
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	f7fd fa6d 	bl	800bf2c <disk_write>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d004      	beq.n	800ea62 <f_read+0x1da>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	755a      	strb	r2, [r3, #21]
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e04d      	b.n	800eafe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	7d1b      	ldrb	r3, [r3, #20]
 800ea66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	7858      	ldrb	r0, [r3, #1]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	69ba      	ldr	r2, [r7, #24]
 800ea7e:	f7fd fa35 	bl	800beec <disk_read>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d004      	beq.n	800ea92 <f_read+0x20a>
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	755a      	strb	r2, [r3, #21]
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e035      	b.n	800eafe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	69ba      	ldr	r2, [r7, #24]
 800ea96:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	699b      	ldr	r3, [r3, #24]
 800ea9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaa0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800eaa4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eaa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d901      	bls.n	800eab2 <f_read+0x22a>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac0:	4413      	add	r3, r2
 800eac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eac4:	4619      	mov	r1, r3
 800eac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eac8:	f7fd faf0 	bl	800c0ac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eacc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead0:	4413      	add	r3, r2
 800ead2:	627b      	str	r3, [r7, #36]	; 0x24
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	699a      	ldr	r2, [r3, #24]
 800ead8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eada:	441a      	add	r2, r3
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	619a      	str	r2, [r3, #24]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae6:	441a      	add	r2, r3
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f47f af01 	bne.w	800e8fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3738      	adds	r7, #56	; 0x38
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b086      	sub	sp, #24
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f107 0208 	add.w	r2, r7, #8
 800eb14:	4611      	mov	r1, r2
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7ff fc7c 	bl	800e414 <validate>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb20:	7dfb      	ldrb	r3, [r7, #23]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d168      	bne.n	800ebf8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	7d1b      	ldrb	r3, [r3, #20]
 800eb2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d062      	beq.n	800ebf8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	7d1b      	ldrb	r3, [r3, #20]
 800eb36:	b25b      	sxtb	r3, r3
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	da15      	bge.n	800eb68 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	7858      	ldrb	r0, [r3, #1]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a1a      	ldr	r2, [r3, #32]
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	f7fd f9ee 	bl	800bf2c <disk_write>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d001      	beq.n	800eb5a <f_sync+0x54>
 800eb56:	2301      	movs	r3, #1
 800eb58:	e04f      	b.n	800ebfa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	7d1b      	ldrb	r3, [r3, #20]
 800eb5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb62:	b2da      	uxtb	r2, r3
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eb68:	f7fa f984 	bl	8008e74 <get_fattime>
 800eb6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eb6e:	68ba      	ldr	r2, [r7, #8]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb74:	4619      	mov	r1, r3
 800eb76:	4610      	mov	r0, r2
 800eb78:	f7fd fcc6 	bl	800c508 <move_window>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d138      	bne.n	800ebf8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	330b      	adds	r3, #11
 800eb90:	781a      	ldrb	r2, [r3, #0]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	330b      	adds	r3, #11
 800eb96:	f042 0220 	orr.w	r2, r2, #32
 800eb9a:	b2d2      	uxtb	r2, r2
 800eb9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6818      	ldr	r0, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	689b      	ldr	r3, [r3, #8]
 800eba6:	461a      	mov	r2, r3
 800eba8:	68f9      	ldr	r1, [r7, #12]
 800ebaa:	f7fe f9d3 	bl	800cf54 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f103 021c 	add.w	r2, r3, #28
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	4619      	mov	r1, r3
 800ebba:	4610      	mov	r0, r2
 800ebbc:	f7fd fa4a 	bl	800c054 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	3316      	adds	r3, #22
 800ebc4:	6939      	ldr	r1, [r7, #16]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fd fa44 	bl	800c054 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	3312      	adds	r3, #18
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fd fa23 	bl	800c01e <st_word>
					fs->wflag = 1;
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	2201      	movs	r2, #1
 800ebdc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7fd fcbf 	bl	800c564 <sync_fs>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	7d1b      	ldrb	r3, [r3, #20]
 800ebee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ebf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3718      	adds	r7, #24
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ec02:	b580      	push	{r7, lr}
 800ec04:	b084      	sub	sp, #16
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7ff ff7b 	bl	800eb06 <f_sync>
 800ec10:	4603      	mov	r3, r0
 800ec12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ec14:	7bfb      	ldrb	r3, [r7, #15]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d118      	bne.n	800ec4c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f107 0208 	add.w	r2, r7, #8
 800ec20:	4611      	mov	r1, r2
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7ff fbf6 	bl	800e414 <validate>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec2c:	7bfb      	ldrb	r3, [r7, #15]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10c      	bne.n	800ec4c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	691b      	ldr	r3, [r3, #16]
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fd fbc2 	bl	800c3c0 <dec_lock>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d102      	bne.n	800ec4c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b090      	sub	sp, #64	; 0x40
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f107 0208 	add.w	r2, r7, #8
 800ec66:	4611      	mov	r1, r2
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7ff fbd3 	bl	800e414 <validate>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ec74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d103      	bne.n	800ec84 <f_lseek+0x2e>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	7d5b      	ldrb	r3, [r3, #21]
 800ec80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ec84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d002      	beq.n	800ec92 <f_lseek+0x3c>
 800ec8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ec90:	e1e6      	b.n	800f060 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	f000 80d1 	beq.w	800ee3e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca2:	d15a      	bne.n	800ed5a <f_lseek+0x104>
			tbl = fp->cltbl;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecac:	1d1a      	adds	r2, r3, #4
 800ecae:	627a      	str	r2, [r7, #36]	; 0x24
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	617b      	str	r3, [r7, #20]
 800ecb4:	2302      	movs	r3, #2
 800ecb6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	689b      	ldr	r3, [r3, #8]
 800ecbc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ecbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d03a      	beq.n	800ed3a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ecc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc6:	613b      	str	r3, [r7, #16]
 800ecc8:	2300      	movs	r3, #0
 800ecca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecce:	3302      	adds	r3, #2
 800ecd0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd4:	60fb      	str	r3, [r7, #12]
 800ecd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd8:	3301      	adds	r3, #1
 800ecda:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fd fccc 	bl	800c67e <get_fat>
 800ece6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ece8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d804      	bhi.n	800ecf8 <f_lseek+0xa2>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	755a      	strb	r2, [r3, #21]
 800ecf4:	2302      	movs	r3, #2
 800ecf6:	e1b3      	b.n	800f060 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ecf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfe:	d104      	bne.n	800ed0a <f_lseek+0xb4>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2201      	movs	r2, #1
 800ed04:	755a      	strb	r2, [r3, #21]
 800ed06:	2301      	movs	r3, #1
 800ed08:	e1aa      	b.n	800f060 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d0de      	beq.n	800ecd2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ed14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d809      	bhi.n	800ed30 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ed1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1e:	1d1a      	adds	r2, r3, #4
 800ed20:	627a      	str	r2, [r7, #36]	; 0x24
 800ed22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed24:	601a      	str	r2, [r3, #0]
 800ed26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed28:	1d1a      	adds	r2, r3, #4
 800ed2a:	627a      	str	r2, [r7, #36]	; 0x24
 800ed2c:	693a      	ldr	r2, [r7, #16]
 800ed2e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	699b      	ldr	r3, [r3, #24]
 800ed34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d3c4      	bcc.n	800ecc4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed40:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ed42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d803      	bhi.n	800ed52 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ed4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	601a      	str	r2, [r3, #0]
 800ed50:	e184      	b.n	800f05c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ed52:	2311      	movs	r3, #17
 800ed54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ed58:	e180      	b.n	800f05c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	683a      	ldr	r2, [r7, #0]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d902      	bls.n	800ed6a <f_lseek+0x114>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	683a      	ldr	r2, [r7, #0]
 800ed6e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	f000 8172 	beq.w	800f05c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7fd ff0e 	bl	800cba0 <clmt_clust>
 800ed84:	4602      	mov	r2, r0
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	69db      	ldr	r3, [r3, #28]
 800ed90:	4619      	mov	r1, r3
 800ed92:	4610      	mov	r0, r2
 800ed94:	f7fd fc54 	bl	800c640 <clust2sect>
 800ed98:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d104      	bne.n	800edaa <f_lseek+0x154>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2202      	movs	r2, #2
 800eda4:	755a      	strb	r2, [r3, #21]
 800eda6:	2302      	movs	r3, #2
 800eda8:	e15a      	b.n	800f060 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	3b01      	subs	r3, #1
 800edae:	0a5b      	lsrs	r3, r3, #9
 800edb0:	68ba      	ldr	r2, [r7, #8]
 800edb2:	8952      	ldrh	r2, [r2, #10]
 800edb4:	3a01      	subs	r2, #1
 800edb6:	4013      	ands	r3, r2
 800edb8:	69ba      	ldr	r2, [r7, #24]
 800edba:	4413      	add	r3, r2
 800edbc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f000 8148 	beq.w	800f05c <f_lseek+0x406>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6a1b      	ldr	r3, [r3, #32]
 800edd0:	69ba      	ldr	r2, [r7, #24]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	f000 8142 	beq.w	800f05c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	7d1b      	ldrb	r3, [r3, #20]
 800eddc:	b25b      	sxtb	r3, r3
 800edde:	2b00      	cmp	r3, #0
 800ede0:	da18      	bge.n	800ee14 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	7858      	ldrb	r0, [r3, #1]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6a1a      	ldr	r2, [r3, #32]
 800edf0:	2301      	movs	r3, #1
 800edf2:	f7fd f89b 	bl	800bf2c <disk_write>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d004      	beq.n	800ee06 <f_lseek+0x1b0>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	755a      	strb	r2, [r3, #21]
 800ee02:	2301      	movs	r3, #1
 800ee04:	e12c      	b.n	800f060 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	7d1b      	ldrb	r3, [r3, #20]
 800ee0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee0e:	b2da      	uxtb	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	7858      	ldrb	r0, [r3, #1]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee1e:	2301      	movs	r3, #1
 800ee20:	69ba      	ldr	r2, [r7, #24]
 800ee22:	f7fd f863 	bl	800beec <disk_read>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d004      	beq.n	800ee36 <f_lseek+0x1e0>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	755a      	strb	r2, [r3, #21]
 800ee32:	2301      	movs	r3, #1
 800ee34:	e114      	b.n	800f060 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	69ba      	ldr	r2, [r7, #24]
 800ee3a:	621a      	str	r2, [r3, #32]
 800ee3c:	e10e      	b.n	800f05c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	683a      	ldr	r2, [r7, #0]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d908      	bls.n	800ee5a <f_lseek+0x204>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	7d1b      	ldrb	r3, [r3, #20]
 800ee4c:	f003 0302 	and.w	r3, r3, #2
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d102      	bne.n	800ee5a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	699b      	ldr	r3, [r3, #24]
 800ee5e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ee60:	2300      	movs	r3, #0
 800ee62:	637b      	str	r3, [r7, #52]	; 0x34
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee68:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f000 80a7 	beq.w	800efc0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	895b      	ldrh	r3, [r3, #10]
 800ee76:	025b      	lsls	r3, r3, #9
 800ee78:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ee7a:	6a3b      	ldr	r3, [r7, #32]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d01b      	beq.n	800eeb8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	1e5a      	subs	r2, r3, #1
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	fbb2 f2f3 	udiv	r2, r2, r3
 800ee8a:	6a3b      	ldr	r3, [r7, #32]
 800ee8c:	1e59      	subs	r1, r3, #1
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d30f      	bcc.n	800eeb8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ee98:	6a3b      	ldr	r3, [r7, #32]
 800ee9a:	1e5a      	subs	r2, r3, #1
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	425b      	negs	r3, r3
 800eea0:	401a      	ands	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	699b      	ldr	r3, [r3, #24]
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	69db      	ldr	r3, [r3, #28]
 800eeb4:	63bb      	str	r3, [r7, #56]	; 0x38
 800eeb6:	e022      	b.n	800eefe <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800eebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d119      	bne.n	800eef8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2100      	movs	r1, #0
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fd fdd1 	bl	800ca70 <create_chain>
 800eece:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d104      	bne.n	800eee0 <f_lseek+0x28a>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2202      	movs	r2, #2
 800eeda:	755a      	strb	r2, [r3, #21]
 800eedc:	2302      	movs	r3, #2
 800eede:	e0bf      	b.n	800f060 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee6:	d104      	bne.n	800eef2 <f_lseek+0x29c>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	755a      	strb	r2, [r3, #21]
 800eeee:	2301      	movs	r3, #1
 800eef0:	e0b6      	b.n	800f060 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eef6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eefc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800eefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d05d      	beq.n	800efc0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ef04:	e03a      	b.n	800ef7c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ef06:	683a      	ldr	r2, [r7, #0]
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	1ad3      	subs	r3, r2, r3
 800ef0c:	603b      	str	r3, [r7, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	699a      	ldr	r2, [r3, #24]
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	441a      	add	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	7d1b      	ldrb	r3, [r3, #20]
 800ef1e:	f003 0302 	and.w	r3, r3, #2
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00b      	beq.n	800ef3e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7fd fda0 	bl	800ca70 <create_chain>
 800ef30:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ef32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d108      	bne.n	800ef4a <f_lseek+0x2f4>
							ofs = 0; break;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	603b      	str	r3, [r7, #0]
 800ef3c:	e022      	b.n	800ef84 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fd fb9b 	bl	800c67e <get_fat>
 800ef48:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef50:	d104      	bne.n	800ef5c <f_lseek+0x306>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2201      	movs	r2, #1
 800ef56:	755a      	strb	r2, [r3, #21]
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e081      	b.n	800f060 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ef5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d904      	bls.n	800ef6c <f_lseek+0x316>
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	699b      	ldr	r3, [r3, #24]
 800ef66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d304      	bcc.n	800ef76 <f_lseek+0x320>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2202      	movs	r2, #2
 800ef70:	755a      	strb	r2, [r3, #21]
 800ef72:	2302      	movs	r3, #2
 800ef74:	e074      	b.n	800f060 <f_lseek+0x40a>
					fp->clust = clst;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef7a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ef7c:	683a      	ldr	r2, [r7, #0]
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d8c0      	bhi.n	800ef06 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	699a      	ldr	r2, [r3, #24]
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	441a      	add	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d012      	beq.n	800efc0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fd fb4e 	bl	800c640 <clust2sect>
 800efa4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800efa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d104      	bne.n	800efb6 <f_lseek+0x360>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2202      	movs	r2, #2
 800efb0:	755a      	strb	r2, [r3, #21]
 800efb2:	2302      	movs	r3, #2
 800efb4:	e054      	b.n	800f060 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	0a5b      	lsrs	r3, r3, #9
 800efba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efbc:	4413      	add	r3, r2
 800efbe:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	699a      	ldr	r2, [r3, #24]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d90a      	bls.n	800efe2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	699a      	ldr	r2, [r3, #24]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	7d1b      	ldrb	r3, [r3, #20]
 800efd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efdc:	b2da      	uxtb	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	699b      	ldr	r3, [r3, #24]
 800efe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efea:	2b00      	cmp	r3, #0
 800efec:	d036      	beq.n	800f05c <f_lseek+0x406>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6a1b      	ldr	r3, [r3, #32]
 800eff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d031      	beq.n	800f05c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	7d1b      	ldrb	r3, [r3, #20]
 800effc:	b25b      	sxtb	r3, r3
 800effe:	2b00      	cmp	r3, #0
 800f000:	da18      	bge.n	800f034 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	7858      	ldrb	r0, [r3, #1]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6a1a      	ldr	r2, [r3, #32]
 800f010:	2301      	movs	r3, #1
 800f012:	f7fc ff8b 	bl	800bf2c <disk_write>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d004      	beq.n	800f026 <f_lseek+0x3d0>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	755a      	strb	r2, [r3, #21]
 800f022:	2301      	movs	r3, #1
 800f024:	e01c      	b.n	800f060 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	7d1b      	ldrb	r3, [r3, #20]
 800f02a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f02e:	b2da      	uxtb	r2, r3
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	7858      	ldrb	r0, [r3, #1]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f03e:	2301      	movs	r3, #1
 800f040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f042:	f7fc ff53 	bl	800beec <disk_read>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d004      	beq.n	800f056 <f_lseek+0x400>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2201      	movs	r2, #1
 800f050:	755a      	strb	r2, [r3, #21]
 800f052:	2301      	movs	r3, #1
 800f054:	e004      	b.n	800f060 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f05a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f05c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f060:	4618      	mov	r0, r3
 800f062:	3740      	adds	r7, #64	; 0x40
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d101      	bne.n	800f07c <f_opendir+0x14>
 800f078:	2309      	movs	r3, #9
 800f07a:	e064      	b.n	800f146 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f080:	f107 010c 	add.w	r1, r7, #12
 800f084:	463b      	mov	r3, r7
 800f086:	2200      	movs	r2, #0
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fe ff71 	bl	800df70 <find_volume>
 800f08e:	4603      	mov	r3, r0
 800f090:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f092:	7dfb      	ldrb	r3, [r7, #23]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d14f      	bne.n	800f138 <f_opendir+0xd0>
		obj->fs = fs;
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f7fe fe58 	bl	800dd58 <follow_path>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f0ac:	7dfb      	ldrb	r3, [r7, #23]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d13d      	bne.n	800f12e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f0b8:	b25b      	sxtb	r3, r3
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	db12      	blt.n	800f0e4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	799b      	ldrb	r3, [r3, #6]
 800f0c2:	f003 0310 	and.w	r3, r3, #16
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00a      	beq.n	800f0e0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f0ca:	68fa      	ldr	r2, [r7, #12]
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6a1b      	ldr	r3, [r3, #32]
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	f7fd ff1f 	bl	800cf16 <ld_clust>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	609a      	str	r2, [r3, #8]
 800f0de:	e001      	b.n	800f0e4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f0e0:	2305      	movs	r3, #5
 800f0e2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f0e4:	7dfb      	ldrb	r3, [r7, #23]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d121      	bne.n	800f12e <f_opendir+0xc6>
				obj->id = fs->id;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	88da      	ldrh	r2, [r3, #6]
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f0f2:	2100      	movs	r1, #0
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7fd fd87 	bl	800cc08 <dir_sdi>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f0fe:	7dfb      	ldrb	r3, [r7, #23]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d114      	bne.n	800f12e <f_opendir+0xc6>
					if (obj->sclust) {
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d00d      	beq.n	800f128 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f10c:	2100      	movs	r1, #0
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f7fd f8c8 	bl	800c2a4 <inc_lock>
 800f114:	4602      	mov	r2, r0
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	691b      	ldr	r3, [r3, #16]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d105      	bne.n	800f12e <f_opendir+0xc6>
 800f122:	2312      	movs	r3, #18
 800f124:	75fb      	strb	r3, [r7, #23]
 800f126:	e002      	b.n	800f12e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	2200      	movs	r2, #0
 800f12c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f12e:	7dfb      	ldrb	r3, [r7, #23]
 800f130:	2b04      	cmp	r3, #4
 800f132:	d101      	bne.n	800f138 <f_opendir+0xd0>
 800f134:	2305      	movs	r3, #5
 800f136:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f138:	7dfb      	ldrb	r3, [r7, #23]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d002      	beq.n	800f144 <f_opendir+0xdc>
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	2200      	movs	r2, #0
 800f142:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f144:	7dfb      	ldrb	r3, [r7, #23]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3718      	adds	r7, #24
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f14e:	b580      	push	{r7, lr}
 800f150:	b084      	sub	sp, #16
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f107 0208 	add.w	r2, r7, #8
 800f15c:	4611      	mov	r1, r2
 800f15e:	4618      	mov	r0, r3
 800f160:	f7ff f958 	bl	800e414 <validate>
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f168:	7bfb      	ldrb	r3, [r7, #15]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d110      	bne.n	800f190 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d006      	beq.n	800f184 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	691b      	ldr	r3, [r3, #16]
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fd f920 	bl	800c3c0 <dec_lock>
 800f180:	4603      	mov	r3, r0
 800f182:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f184:	7bfb      	ldrb	r3, [r7, #15]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d102      	bne.n	800f190 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f190:	7bfb      	ldrb	r3, [r7, #15]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3710      	adds	r7, #16
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}

0800f19a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f19a:	b580      	push	{r7, lr}
 800f19c:	b084      	sub	sp, #16
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f107 0208 	add.w	r2, r7, #8
 800f1aa:	4611      	mov	r1, r2
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7ff f931 	bl	800e414 <validate>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f1b6:	7bfb      	ldrb	r3, [r7, #15]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d126      	bne.n	800f20a <f_readdir+0x70>
		if (!fno) {
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d106      	bne.n	800f1d0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f7fd fd1f 	bl	800cc08 <dir_sdi>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	73fb      	strb	r3, [r7, #15]
 800f1ce:	e01c      	b.n	800f20a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f1d0:	2100      	movs	r1, #0
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f7fe f8cb 	bl	800d36e <dir_read>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f1dc:	7bfb      	ldrb	r3, [r7, #15]
 800f1de:	2b04      	cmp	r3, #4
 800f1e0:	d101      	bne.n	800f1e6 <f_readdir+0x4c>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f1e6:	7bfb      	ldrb	r3, [r7, #15]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d10e      	bne.n	800f20a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f1ec:	6839      	ldr	r1, [r7, #0]
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f7fe fb1c 	bl	800d82c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7fd fd81 	bl	800ccfe <dir_next>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f200:	7bfb      	ldrb	r3, [r7, #15]
 800f202:	2b04      	cmp	r3, #4
 800f204:	d101      	bne.n	800f20a <f_readdir+0x70>
 800f206:	2300      	movs	r3, #0
 800f208:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3710      	adds	r7, #16
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f214:	b480      	push	{r7}
 800f216:	b087      	sub	sp, #28
 800f218:	af00      	add	r7, sp, #0
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	4613      	mov	r3, r2
 800f220:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f222:	2301      	movs	r3, #1
 800f224:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f226:	2300      	movs	r3, #0
 800f228:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f22a:	4b1f      	ldr	r3, [pc, #124]	; (800f2a8 <FATFS_LinkDriverEx+0x94>)
 800f22c:	7a5b      	ldrb	r3, [r3, #9]
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	2b00      	cmp	r3, #0
 800f232:	d131      	bne.n	800f298 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f234:	4b1c      	ldr	r3, [pc, #112]	; (800f2a8 <FATFS_LinkDriverEx+0x94>)
 800f236:	7a5b      	ldrb	r3, [r3, #9]
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	461a      	mov	r2, r3
 800f23c:	4b1a      	ldr	r3, [pc, #104]	; (800f2a8 <FATFS_LinkDriverEx+0x94>)
 800f23e:	2100      	movs	r1, #0
 800f240:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f242:	4b19      	ldr	r3, [pc, #100]	; (800f2a8 <FATFS_LinkDriverEx+0x94>)
 800f244:	7a5b      	ldrb	r3, [r3, #9]
 800f246:	b2db      	uxtb	r3, r3
 800f248:	4a17      	ldr	r2, [pc, #92]	; (800f2a8 <FATFS_LinkDriverEx+0x94>)
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	4413      	add	r3, r2
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f252:	4b15      	ldr	r3, [pc, #84]	; (800f2a8 <FATFS_LinkDriverEx+0x94>)
 800f254:	7a5b      	ldrb	r3, [r3, #9]
 800f256:	b2db      	uxtb	r3, r3
 800f258:	461a      	mov	r2, r3
 800f25a:	4b13      	ldr	r3, [pc, #76]	; (800f2a8 <FATFS_LinkDriverEx+0x94>)
 800f25c:	4413      	add	r3, r2
 800f25e:	79fa      	ldrb	r2, [r7, #7]
 800f260:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f262:	4b11      	ldr	r3, [pc, #68]	; (800f2a8 <FATFS_LinkDriverEx+0x94>)
 800f264:	7a5b      	ldrb	r3, [r3, #9]
 800f266:	b2db      	uxtb	r3, r3
 800f268:	1c5a      	adds	r2, r3, #1
 800f26a:	b2d1      	uxtb	r1, r2
 800f26c:	4a0e      	ldr	r2, [pc, #56]	; (800f2a8 <FATFS_LinkDriverEx+0x94>)
 800f26e:	7251      	strb	r1, [r2, #9]
 800f270:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f272:	7dbb      	ldrb	r3, [r7, #22]
 800f274:	3330      	adds	r3, #48	; 0x30
 800f276:	b2da      	uxtb	r2, r3
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	3301      	adds	r3, #1
 800f280:	223a      	movs	r2, #58	; 0x3a
 800f282:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	3302      	adds	r3, #2
 800f288:	222f      	movs	r2, #47	; 0x2f
 800f28a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	3303      	adds	r3, #3
 800f290:	2200      	movs	r2, #0
 800f292:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f294:	2300      	movs	r3, #0
 800f296:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f298:	7dfb      	ldrb	r3, [r7, #23]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	371c      	adds	r7, #28
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	200013e0 	.word	0x200013e0

0800f2ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	6839      	ldr	r1, [r7, #0]
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff ffaa 	bl	800f214 <FATFS_LinkDriverEx>
 800f2c0:	4603      	mov	r3, r0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
	...

0800f2cc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	6039      	str	r1, [r7, #0]
 800f2d6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f2d8:	88fb      	ldrh	r3, [r7, #6]
 800f2da:	2b7f      	cmp	r3, #127	; 0x7f
 800f2dc:	d802      	bhi.n	800f2e4 <ff_convert+0x18>
		c = chr;
 800f2de:	88fb      	ldrh	r3, [r7, #6]
 800f2e0:	81fb      	strh	r3, [r7, #14]
 800f2e2:	e025      	b.n	800f330 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d00b      	beq.n	800f302 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f2ea:	88fb      	ldrh	r3, [r7, #6]
 800f2ec:	2bff      	cmp	r3, #255	; 0xff
 800f2ee:	d805      	bhi.n	800f2fc <ff_convert+0x30>
 800f2f0:	88fb      	ldrh	r3, [r7, #6]
 800f2f2:	3b80      	subs	r3, #128	; 0x80
 800f2f4:	4a12      	ldr	r2, [pc, #72]	; (800f340 <ff_convert+0x74>)
 800f2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2fa:	e000      	b.n	800f2fe <ff_convert+0x32>
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	81fb      	strh	r3, [r7, #14]
 800f300:	e016      	b.n	800f330 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f302:	2300      	movs	r3, #0
 800f304:	81fb      	strh	r3, [r7, #14]
 800f306:	e009      	b.n	800f31c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f308:	89fb      	ldrh	r3, [r7, #14]
 800f30a:	4a0d      	ldr	r2, [pc, #52]	; (800f340 <ff_convert+0x74>)
 800f30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f310:	88fa      	ldrh	r2, [r7, #6]
 800f312:	429a      	cmp	r2, r3
 800f314:	d006      	beq.n	800f324 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f316:	89fb      	ldrh	r3, [r7, #14]
 800f318:	3301      	adds	r3, #1
 800f31a:	81fb      	strh	r3, [r7, #14]
 800f31c:	89fb      	ldrh	r3, [r7, #14]
 800f31e:	2b7f      	cmp	r3, #127	; 0x7f
 800f320:	d9f2      	bls.n	800f308 <ff_convert+0x3c>
 800f322:	e000      	b.n	800f326 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f324:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f326:	89fb      	ldrh	r3, [r7, #14]
 800f328:	3380      	adds	r3, #128	; 0x80
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f330:	89fb      	ldrh	r3, [r7, #14]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3714      	adds	r7, #20
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	0800fedc 	.word	0x0800fedc

0800f344 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f344:	b480      	push	{r7}
 800f346:	b087      	sub	sp, #28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	4603      	mov	r3, r0
 800f34c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f34e:	88fb      	ldrh	r3, [r7, #6]
 800f350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f354:	d201      	bcs.n	800f35a <ff_wtoupper+0x16>
 800f356:	4b3e      	ldr	r3, [pc, #248]	; (800f450 <ff_wtoupper+0x10c>)
 800f358:	e000      	b.n	800f35c <ff_wtoupper+0x18>
 800f35a:	4b3e      	ldr	r3, [pc, #248]	; (800f454 <ff_wtoupper+0x110>)
 800f35c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	1c9a      	adds	r2, r3, #2
 800f362:	617a      	str	r2, [r7, #20]
 800f364:	881b      	ldrh	r3, [r3, #0]
 800f366:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f368:	8a7b      	ldrh	r3, [r7, #18]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d068      	beq.n	800f440 <ff_wtoupper+0xfc>
 800f36e:	88fa      	ldrh	r2, [r7, #6]
 800f370:	8a7b      	ldrh	r3, [r7, #18]
 800f372:	429a      	cmp	r2, r3
 800f374:	d364      	bcc.n	800f440 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	1c9a      	adds	r2, r3, #2
 800f37a:	617a      	str	r2, [r7, #20]
 800f37c:	881b      	ldrh	r3, [r3, #0]
 800f37e:	823b      	strh	r3, [r7, #16]
 800f380:	8a3b      	ldrh	r3, [r7, #16]
 800f382:	0a1b      	lsrs	r3, r3, #8
 800f384:	81fb      	strh	r3, [r7, #14]
 800f386:	8a3b      	ldrh	r3, [r7, #16]
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f38c:	88fa      	ldrh	r2, [r7, #6]
 800f38e:	8a79      	ldrh	r1, [r7, #18]
 800f390:	8a3b      	ldrh	r3, [r7, #16]
 800f392:	440b      	add	r3, r1
 800f394:	429a      	cmp	r2, r3
 800f396:	da49      	bge.n	800f42c <ff_wtoupper+0xe8>
			switch (cmd) {
 800f398:	89fb      	ldrh	r3, [r7, #14]
 800f39a:	2b08      	cmp	r3, #8
 800f39c:	d84f      	bhi.n	800f43e <ff_wtoupper+0xfa>
 800f39e:	a201      	add	r2, pc, #4	; (adr r2, 800f3a4 <ff_wtoupper+0x60>)
 800f3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a4:	0800f3c9 	.word	0x0800f3c9
 800f3a8:	0800f3db 	.word	0x0800f3db
 800f3ac:	0800f3f1 	.word	0x0800f3f1
 800f3b0:	0800f3f9 	.word	0x0800f3f9
 800f3b4:	0800f401 	.word	0x0800f401
 800f3b8:	0800f409 	.word	0x0800f409
 800f3bc:	0800f411 	.word	0x0800f411
 800f3c0:	0800f419 	.word	0x0800f419
 800f3c4:	0800f421 	.word	0x0800f421
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f3c8:	88fa      	ldrh	r2, [r7, #6]
 800f3ca:	8a7b      	ldrh	r3, [r7, #18]
 800f3cc:	1ad3      	subs	r3, r2, r3
 800f3ce:	005b      	lsls	r3, r3, #1
 800f3d0:	697a      	ldr	r2, [r7, #20]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	881b      	ldrh	r3, [r3, #0]
 800f3d6:	80fb      	strh	r3, [r7, #6]
 800f3d8:	e027      	b.n	800f42a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f3da:	88fa      	ldrh	r2, [r7, #6]
 800f3dc:	8a7b      	ldrh	r3, [r7, #18]
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	f003 0301 	and.w	r3, r3, #1
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	88fa      	ldrh	r2, [r7, #6]
 800f3ea:	1ad3      	subs	r3, r2, r3
 800f3ec:	80fb      	strh	r3, [r7, #6]
 800f3ee:	e01c      	b.n	800f42a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f3f0:	88fb      	ldrh	r3, [r7, #6]
 800f3f2:	3b10      	subs	r3, #16
 800f3f4:	80fb      	strh	r3, [r7, #6]
 800f3f6:	e018      	b.n	800f42a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f3f8:	88fb      	ldrh	r3, [r7, #6]
 800f3fa:	3b20      	subs	r3, #32
 800f3fc:	80fb      	strh	r3, [r7, #6]
 800f3fe:	e014      	b.n	800f42a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f400:	88fb      	ldrh	r3, [r7, #6]
 800f402:	3b30      	subs	r3, #48	; 0x30
 800f404:	80fb      	strh	r3, [r7, #6]
 800f406:	e010      	b.n	800f42a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f408:	88fb      	ldrh	r3, [r7, #6]
 800f40a:	3b1a      	subs	r3, #26
 800f40c:	80fb      	strh	r3, [r7, #6]
 800f40e:	e00c      	b.n	800f42a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f410:	88fb      	ldrh	r3, [r7, #6]
 800f412:	3308      	adds	r3, #8
 800f414:	80fb      	strh	r3, [r7, #6]
 800f416:	e008      	b.n	800f42a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f418:	88fb      	ldrh	r3, [r7, #6]
 800f41a:	3b50      	subs	r3, #80	; 0x50
 800f41c:	80fb      	strh	r3, [r7, #6]
 800f41e:	e004      	b.n	800f42a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f420:	88fb      	ldrh	r3, [r7, #6]
 800f422:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f426:	80fb      	strh	r3, [r7, #6]
 800f428:	bf00      	nop
			}
			break;
 800f42a:	e008      	b.n	800f43e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f42c:	89fb      	ldrh	r3, [r7, #14]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d195      	bne.n	800f35e <ff_wtoupper+0x1a>
 800f432:	8a3b      	ldrh	r3, [r7, #16]
 800f434:	005b      	lsls	r3, r3, #1
 800f436:	697a      	ldr	r2, [r7, #20]
 800f438:	4413      	add	r3, r2
 800f43a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f43c:	e78f      	b.n	800f35e <ff_wtoupper+0x1a>
			break;
 800f43e:	bf00      	nop
	}

	return chr;
 800f440:	88fb      	ldrh	r3, [r7, #6]
}
 800f442:	4618      	mov	r0, r3
 800f444:	371c      	adds	r7, #28
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop
 800f450:	0800ffdc 	.word	0x0800ffdc
 800f454:	080101d0 	.word	0x080101d0

0800f458 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f45c:	2201      	movs	r2, #1
 800f45e:	490e      	ldr	r1, [pc, #56]	; (800f498 <MX_USB_HOST_Init+0x40>)
 800f460:	480e      	ldr	r0, [pc, #56]	; (800f49c <MX_USB_HOST_Init+0x44>)
 800f462:	f7fb f9ab 	bl	800a7bc <USBH_Init>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d001      	beq.n	800f470 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f46c:	f7f2 f9cc 	bl	8001808 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800f470:	490b      	ldr	r1, [pc, #44]	; (800f4a0 <MX_USB_HOST_Init+0x48>)
 800f472:	480a      	ldr	r0, [pc, #40]	; (800f49c <MX_USB_HOST_Init+0x44>)
 800f474:	f7fb fa30 	bl	800a8d8 <USBH_RegisterClass>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d001      	beq.n	800f482 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f47e:	f7f2 f9c3 	bl	8001808 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f482:	4806      	ldr	r0, [pc, #24]	; (800f49c <MX_USB_HOST_Init+0x44>)
 800f484:	f7fb fab4 	bl	800a9f0 <USBH_Start>
 800f488:	4603      	mov	r3, r0
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d001      	beq.n	800f492 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f48e:	f7f2 f9bb 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f492:	bf00      	nop
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	0800f4b9 	.word	0x0800f4b9
 800f49c:	2000252c 	.word	0x2000252c
 800f4a0:	20000048 	.word	0x20000048

0800f4a4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f4a8:	4802      	ldr	r0, [pc, #8]	; (800f4b4 <MX_USB_HOST_Process+0x10>)
 800f4aa:	f7fb fab1 	bl	800aa10 <USBH_Process>
}
 800f4ae:	bf00      	nop
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	2000252c 	.word	0x2000252c

0800f4b8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f4c4:	78fb      	ldrb	r3, [r7, #3]
 800f4c6:	3b01      	subs	r3, #1
 800f4c8:	2b04      	cmp	r3, #4
 800f4ca:	d819      	bhi.n	800f500 <USBH_UserProcess+0x48>
 800f4cc:	a201      	add	r2, pc, #4	; (adr r2, 800f4d4 <USBH_UserProcess+0x1c>)
 800f4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d2:	bf00      	nop
 800f4d4:	0800f501 	.word	0x0800f501
 800f4d8:	0800f4f1 	.word	0x0800f4f1
 800f4dc:	0800f501 	.word	0x0800f501
 800f4e0:	0800f4f9 	.word	0x0800f4f9
 800f4e4:	0800f4e9 	.word	0x0800f4e9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f4e8:	4b09      	ldr	r3, [pc, #36]	; (800f510 <USBH_UserProcess+0x58>)
 800f4ea:	2203      	movs	r2, #3
 800f4ec:	701a      	strb	r2, [r3, #0]
  break;
 800f4ee:	e008      	b.n	800f502 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f4f0:	4b07      	ldr	r3, [pc, #28]	; (800f510 <USBH_UserProcess+0x58>)
 800f4f2:	2202      	movs	r2, #2
 800f4f4:	701a      	strb	r2, [r3, #0]
  break;
 800f4f6:	e004      	b.n	800f502 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f4f8:	4b05      	ldr	r3, [pc, #20]	; (800f510 <USBH_UserProcess+0x58>)
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	701a      	strb	r2, [r3, #0]
  break;
 800f4fe:	e000      	b.n	800f502 <USBH_UserProcess+0x4a>

  default:
  break;
 800f500:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f502:	bf00      	nop
 800f504:	370c      	adds	r7, #12
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop
 800f510:	200013ec 	.word	0x200013ec

0800f514 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b08a      	sub	sp, #40	; 0x28
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f51c:	f107 0314 	add.w	r3, r7, #20
 800f520:	2200      	movs	r2, #0
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	605a      	str	r2, [r3, #4]
 800f526:	609a      	str	r2, [r3, #8]
 800f528:	60da      	str	r2, [r3, #12]
 800f52a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f534:	d147      	bne.n	800f5c6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f536:	2300      	movs	r3, #0
 800f538:	613b      	str	r3, [r7, #16]
 800f53a:	4b25      	ldr	r3, [pc, #148]	; (800f5d0 <HAL_HCD_MspInit+0xbc>)
 800f53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f53e:	4a24      	ldr	r2, [pc, #144]	; (800f5d0 <HAL_HCD_MspInit+0xbc>)
 800f540:	f043 0301 	orr.w	r3, r3, #1
 800f544:	6313      	str	r3, [r2, #48]	; 0x30
 800f546:	4b22      	ldr	r3, [pc, #136]	; (800f5d0 <HAL_HCD_MspInit+0xbc>)
 800f548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f54a:	f003 0301 	and.w	r3, r3, #1
 800f54e:	613b      	str	r3, [r7, #16]
 800f550:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f552:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f558:	2300      	movs	r3, #0
 800f55a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f55c:	2300      	movs	r3, #0
 800f55e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f560:	f107 0314 	add.w	r3, r7, #20
 800f564:	4619      	mov	r1, r3
 800f566:	481b      	ldr	r0, [pc, #108]	; (800f5d4 <HAL_HCD_MspInit+0xc0>)
 800f568:	f7f3 fb22 	bl	8002bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f56c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f572:	2302      	movs	r3, #2
 800f574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f576:	2300      	movs	r3, #0
 800f578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f57a:	2303      	movs	r3, #3
 800f57c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f57e:	230a      	movs	r3, #10
 800f580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f582:	f107 0314 	add.w	r3, r7, #20
 800f586:	4619      	mov	r1, r3
 800f588:	4812      	ldr	r0, [pc, #72]	; (800f5d4 <HAL_HCD_MspInit+0xc0>)
 800f58a:	f7f3 fb11 	bl	8002bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f58e:	4b10      	ldr	r3, [pc, #64]	; (800f5d0 <HAL_HCD_MspInit+0xbc>)
 800f590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f592:	4a0f      	ldr	r2, [pc, #60]	; (800f5d0 <HAL_HCD_MspInit+0xbc>)
 800f594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f598:	6353      	str	r3, [r2, #52]	; 0x34
 800f59a:	2300      	movs	r3, #0
 800f59c:	60fb      	str	r3, [r7, #12]
 800f59e:	4b0c      	ldr	r3, [pc, #48]	; (800f5d0 <HAL_HCD_MspInit+0xbc>)
 800f5a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5a2:	4a0b      	ldr	r2, [pc, #44]	; (800f5d0 <HAL_HCD_MspInit+0xbc>)
 800f5a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f5a8:	6453      	str	r3, [r2, #68]	; 0x44
 800f5aa:	4b09      	ldr	r3, [pc, #36]	; (800f5d0 <HAL_HCD_MspInit+0xbc>)
 800f5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f5b2:	60fb      	str	r3, [r7, #12]
 800f5b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	2043      	movs	r0, #67	; 0x43
 800f5bc:	f7f2 fe90 	bl	80022e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f5c0:	2043      	movs	r0, #67	; 0x43
 800f5c2:	f7f2 fea9 	bl	8002318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f5c6:	bf00      	nop
 800f5c8:	3728      	adds	r7, #40	; 0x28
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	40023800 	.word	0x40023800
 800f5d4:	40020000 	.word	0x40020000

0800f5d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fb fde5 	bl	800b1b6 <USBH_LL_IncTimer>
}
 800f5ec:	bf00      	nop
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f602:	4618      	mov	r0, r3
 800f604:	f7fb fe1d 	bl	800b242 <USBH_LL_Connect>
}
 800f608:	bf00      	nop
 800f60a:	3708      	adds	r7, #8
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fb fe26 	bl	800b270 <USBH_LL_Disconnect>
}
 800f624:	bf00      	nop
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	460b      	mov	r3, r1
 800f636:	70fb      	strb	r3, [r7, #3]
 800f638:	4613      	mov	r3, r2
 800f63a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f63c:	bf00      	nop
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f656:	4618      	mov	r0, r3
 800f658:	f7fb fdd7 	bl	800b20a <USBH_LL_PortEnabled>
}
 800f65c:	bf00      	nop
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f672:	4618      	mov	r0, r3
 800f674:	f7fb fdd7 	bl	800b226 <USBH_LL_PortDisabled>
}
 800f678:	bf00      	nop
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d12a      	bne.n	800f6e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f692:	4a18      	ldr	r2, [pc, #96]	; (800f6f4 <USBH_LL_Init+0x74>)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4a15      	ldr	r2, [pc, #84]	; (800f6f4 <USBH_LL_Init+0x74>)
 800f69e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f6a2:	4b14      	ldr	r3, [pc, #80]	; (800f6f4 <USBH_LL_Init+0x74>)
 800f6a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f6a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f6aa:	4b12      	ldr	r3, [pc, #72]	; (800f6f4 <USBH_LL_Init+0x74>)
 800f6ac:	2208      	movs	r2, #8
 800f6ae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f6b0:	4b10      	ldr	r3, [pc, #64]	; (800f6f4 <USBH_LL_Init+0x74>)
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f6b6:	4b0f      	ldr	r3, [pc, #60]	; (800f6f4 <USBH_LL_Init+0x74>)
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f6bc:	4b0d      	ldr	r3, [pc, #52]	; (800f6f4 <USBH_LL_Init+0x74>)
 800f6be:	2202      	movs	r2, #2
 800f6c0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f6c2:	4b0c      	ldr	r3, [pc, #48]	; (800f6f4 <USBH_LL_Init+0x74>)
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f6c8:	480a      	ldr	r0, [pc, #40]	; (800f6f4 <USBH_LL_Init+0x74>)
 800f6ca:	f7f3 fd3b 	bl	8003144 <HAL_HCD_Init>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f6d4:	f7f2 f898 	bl	8001808 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f6d8:	4806      	ldr	r0, [pc, #24]	; (800f6f4 <USBH_LL_Init+0x74>)
 800f6da:	f7f4 f91e 	bl	800391a <HAL_HCD_GetCurrentFrame>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f7fb fd58 	bl	800b198 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3708      	adds	r7, #8
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	20002904 	.word	0x20002904

0800f6f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f700:	2300      	movs	r3, #0
 800f702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f704:	2300      	movs	r3, #0
 800f706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f70e:	4618      	mov	r0, r3
 800f710:	f7f4 f88d 	bl	800382e <HAL_HCD_Start>
 800f714:	4603      	mov	r3, r0
 800f716:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f718:	7bfb      	ldrb	r3, [r7, #15]
 800f71a:	4618      	mov	r0, r3
 800f71c:	f000 f98c 	bl	800fa38 <USBH_Get_USB_Status>
 800f720:	4603      	mov	r3, r0
 800f722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f724:	7bbb      	ldrb	r3, [r7, #14]
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f72e:	b580      	push	{r7, lr}
 800f730:	b084      	sub	sp, #16
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f736:	2300      	movs	r3, #0
 800f738:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f73a:	2300      	movs	r3, #0
 800f73c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f744:	4618      	mov	r0, r3
 800f746:	f7f4 f895 	bl	8003874 <HAL_HCD_Stop>
 800f74a:	4603      	mov	r3, r0
 800f74c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
 800f750:	4618      	mov	r0, r3
 800f752:	f000 f971 	bl	800fa38 <USBH_Get_USB_Status>
 800f756:	4603      	mov	r3, r0
 800f758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f75a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3710      	adds	r7, #16
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f76c:	2301      	movs	r3, #1
 800f76e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f776:	4618      	mov	r0, r3
 800f778:	f7f4 f8dd 	bl	8003936 <HAL_HCD_GetCurrentSpeed>
 800f77c:	4603      	mov	r3, r0
 800f77e:	2b02      	cmp	r3, #2
 800f780:	d00c      	beq.n	800f79c <USBH_LL_GetSpeed+0x38>
 800f782:	2b02      	cmp	r3, #2
 800f784:	d80d      	bhi.n	800f7a2 <USBH_LL_GetSpeed+0x3e>
 800f786:	2b00      	cmp	r3, #0
 800f788:	d002      	beq.n	800f790 <USBH_LL_GetSpeed+0x2c>
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	d003      	beq.n	800f796 <USBH_LL_GetSpeed+0x32>
 800f78e:	e008      	b.n	800f7a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f790:	2300      	movs	r3, #0
 800f792:	73fb      	strb	r3, [r7, #15]
    break;
 800f794:	e008      	b.n	800f7a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f796:	2301      	movs	r3, #1
 800f798:	73fb      	strb	r3, [r7, #15]
    break;
 800f79a:	e005      	b.n	800f7a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f79c:	2302      	movs	r3, #2
 800f79e:	73fb      	strb	r3, [r7, #15]
    break;
 800f7a0:	e002      	b.n	800f7a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800f7a6:	bf00      	nop
  }
  return  speed;
 800f7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b084      	sub	sp, #16
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7f4 f870 	bl	80038ae <HAL_HCD_ResetPort>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f7d2:	7bfb      	ldrb	r3, [r7, #15]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f000 f92f 	bl	800fa38 <USBH_Get_USB_Status>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7de:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3710      	adds	r7, #16
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f7fa:	78fa      	ldrb	r2, [r7, #3]
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7f4 f877 	bl	80038f2 <HAL_HCD_HC_GetXferCount>
 800f804:	4603      	mov	r3, r0
}
 800f806:	4618      	mov	r0, r3
 800f808:	3708      	adds	r7, #8
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f80e:	b590      	push	{r4, r7, lr}
 800f810:	b089      	sub	sp, #36	; 0x24
 800f812:	af04      	add	r7, sp, #16
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	4608      	mov	r0, r1
 800f818:	4611      	mov	r1, r2
 800f81a:	461a      	mov	r2, r3
 800f81c:	4603      	mov	r3, r0
 800f81e:	70fb      	strb	r3, [r7, #3]
 800f820:	460b      	mov	r3, r1
 800f822:	70bb      	strb	r3, [r7, #2]
 800f824:	4613      	mov	r3, r2
 800f826:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f828:	2300      	movs	r3, #0
 800f82a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f82c:	2300      	movs	r3, #0
 800f82e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f836:	787c      	ldrb	r4, [r7, #1]
 800f838:	78ba      	ldrb	r2, [r7, #2]
 800f83a:	78f9      	ldrb	r1, [r7, #3]
 800f83c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f83e:	9302      	str	r3, [sp, #8]
 800f840:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f844:	9301      	str	r3, [sp, #4]
 800f846:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f84a:	9300      	str	r3, [sp, #0]
 800f84c:	4623      	mov	r3, r4
 800f84e:	f7f3 fcdb 	bl	8003208 <HAL_HCD_HC_Init>
 800f852:	4603      	mov	r3, r0
 800f854:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f856:	7bfb      	ldrb	r3, [r7, #15]
 800f858:	4618      	mov	r0, r3
 800f85a:	f000 f8ed 	bl	800fa38 <USBH_Get_USB_Status>
 800f85e:	4603      	mov	r3, r0
 800f860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f862:	7bbb      	ldrb	r3, [r7, #14]
}
 800f864:	4618      	mov	r0, r3
 800f866:	3714      	adds	r7, #20
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd90      	pop	{r4, r7, pc}

0800f86c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	460b      	mov	r3, r1
 800f876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f878:	2300      	movs	r3, #0
 800f87a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f87c:	2300      	movs	r3, #0
 800f87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f886:	78fa      	ldrb	r2, [r7, #3]
 800f888:	4611      	mov	r1, r2
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7f3 fd4b 	bl	8003326 <HAL_HCD_HC_Halt>
 800f890:	4603      	mov	r3, r0
 800f892:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f894:	7bfb      	ldrb	r3, [r7, #15]
 800f896:	4618      	mov	r0, r3
 800f898:	f000 f8ce 	bl	800fa38 <USBH_Get_USB_Status>
 800f89c:	4603      	mov	r3, r0
 800f89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f8aa:	b590      	push	{r4, r7, lr}
 800f8ac:	b089      	sub	sp, #36	; 0x24
 800f8ae:	af04      	add	r7, sp, #16
 800f8b0:	6078      	str	r0, [r7, #4]
 800f8b2:	4608      	mov	r0, r1
 800f8b4:	4611      	mov	r1, r2
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	70fb      	strb	r3, [r7, #3]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	70bb      	strb	r3, [r7, #2]
 800f8c0:	4613      	mov	r3, r2
 800f8c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f8d2:	787c      	ldrb	r4, [r7, #1]
 800f8d4:	78ba      	ldrb	r2, [r7, #2]
 800f8d6:	78f9      	ldrb	r1, [r7, #3]
 800f8d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f8dc:	9303      	str	r3, [sp, #12]
 800f8de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f8e0:	9302      	str	r3, [sp, #8]
 800f8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e4:	9301      	str	r3, [sp, #4]
 800f8e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f8ea:	9300      	str	r3, [sp, #0]
 800f8ec:	4623      	mov	r3, r4
 800f8ee:	f7f3 fd3d 	bl	800336c <HAL_HCD_HC_SubmitRequest>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f8f6:	7bfb      	ldrb	r3, [r7, #15]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f000 f89d 	bl	800fa38 <USBH_Get_USB_Status>
 800f8fe:	4603      	mov	r3, r0
 800f900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f902:	7bbb      	ldrb	r3, [r7, #14]
}
 800f904:	4618      	mov	r0, r3
 800f906:	3714      	adds	r7, #20
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd90      	pop	{r4, r7, pc}

0800f90c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	460b      	mov	r3, r1
 800f916:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f91e:	78fa      	ldrb	r2, [r7, #3]
 800f920:	4611      	mov	r1, r2
 800f922:	4618      	mov	r0, r3
 800f924:	f7f3 ffd1 	bl	80038ca <HAL_HCD_HC_GetURBState>
 800f928:	4603      	mov	r3, r0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3708      	adds	r7, #8
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b082      	sub	sp, #8
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
 800f93a:	460b      	mov	r3, r1
 800f93c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f944:	2b01      	cmp	r3, #1
 800f946:	d103      	bne.n	800f950 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f948:	78fb      	ldrb	r3, [r7, #3]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f000 f8a0 	bl	800fa90 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f950:	20c8      	movs	r0, #200	; 0xc8
 800f952:	f7f2 fbe9 	bl	8002128 <HAL_Delay>
  return USBH_OK;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	460b      	mov	r3, r1
 800f96a:	70fb      	strb	r3, [r7, #3]
 800f96c:	4613      	mov	r3, r2
 800f96e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f976:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f978:	78fb      	ldrb	r3, [r7, #3]
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	212c      	movs	r1, #44	; 0x2c
 800f97e:	fb01 f303 	mul.w	r3, r1, r3
 800f982:	4413      	add	r3, r2
 800f984:	333b      	adds	r3, #59	; 0x3b
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d009      	beq.n	800f9a0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f98c:	78fb      	ldrb	r3, [r7, #3]
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	212c      	movs	r1, #44	; 0x2c
 800f992:	fb01 f303 	mul.w	r3, r1, r3
 800f996:	4413      	add	r3, r2
 800f998:	3354      	adds	r3, #84	; 0x54
 800f99a:	78ba      	ldrb	r2, [r7, #2]
 800f99c:	701a      	strb	r2, [r3, #0]
 800f99e:	e008      	b.n	800f9b2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f9a0:	78fb      	ldrb	r3, [r7, #3]
 800f9a2:	68fa      	ldr	r2, [r7, #12]
 800f9a4:	212c      	movs	r1, #44	; 0x2c
 800f9a6:	fb01 f303 	mul.w	r3, r1, r3
 800f9aa:	4413      	add	r3, r2
 800f9ac:	3355      	adds	r3, #85	; 0x55
 800f9ae:	78ba      	ldrb	r2, [r7, #2]
 800f9b0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f9b2:	2300      	movs	r3, #0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3714      	adds	r7, #20
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr

0800f9c0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b085      	sub	sp, #20
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	460b      	mov	r3, r1
 800f9ca:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f9d6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f9d8:	78fb      	ldrb	r3, [r7, #3]
 800f9da:	68ba      	ldr	r2, [r7, #8]
 800f9dc:	212c      	movs	r1, #44	; 0x2c
 800f9de:	fb01 f303 	mul.w	r3, r1, r3
 800f9e2:	4413      	add	r3, r2
 800f9e4:	333b      	adds	r3, #59	; 0x3b
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d009      	beq.n	800fa00 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f9ec:	78fb      	ldrb	r3, [r7, #3]
 800f9ee:	68ba      	ldr	r2, [r7, #8]
 800f9f0:	212c      	movs	r1, #44	; 0x2c
 800f9f2:	fb01 f303 	mul.w	r3, r1, r3
 800f9f6:	4413      	add	r3, r2
 800f9f8:	3354      	adds	r3, #84	; 0x54
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	73fb      	strb	r3, [r7, #15]
 800f9fe:	e008      	b.n	800fa12 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800fa00:	78fb      	ldrb	r3, [r7, #3]
 800fa02:	68ba      	ldr	r2, [r7, #8]
 800fa04:	212c      	movs	r1, #44	; 0x2c
 800fa06:	fb01 f303 	mul.w	r3, r1, r3
 800fa0a:	4413      	add	r3, r2
 800fa0c:	3355      	adds	r3, #85	; 0x55
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800fa12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3714      	adds	r7, #20
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f7f2 fb7d 	bl	8002128 <HAL_Delay>
}
 800fa2e:	bf00      	nop
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
	...

0800fa38 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b085      	sub	sp, #20
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	4603      	mov	r3, r0
 800fa40:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa42:	2300      	movs	r3, #0
 800fa44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fa46:	79fb      	ldrb	r3, [r7, #7]
 800fa48:	2b03      	cmp	r3, #3
 800fa4a:	d817      	bhi.n	800fa7c <USBH_Get_USB_Status+0x44>
 800fa4c:	a201      	add	r2, pc, #4	; (adr r2, 800fa54 <USBH_Get_USB_Status+0x1c>)
 800fa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa52:	bf00      	nop
 800fa54:	0800fa65 	.word	0x0800fa65
 800fa58:	0800fa6b 	.word	0x0800fa6b
 800fa5c:	0800fa71 	.word	0x0800fa71
 800fa60:	0800fa77 	.word	0x0800fa77
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fa64:	2300      	movs	r3, #0
 800fa66:	73fb      	strb	r3, [r7, #15]
    break;
 800fa68:	e00b      	b.n	800fa82 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fa6a:	2302      	movs	r3, #2
 800fa6c:	73fb      	strb	r3, [r7, #15]
    break;
 800fa6e:	e008      	b.n	800fa82 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fa70:	2301      	movs	r3, #1
 800fa72:	73fb      	strb	r3, [r7, #15]
    break;
 800fa74:	e005      	b.n	800fa82 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fa76:	2302      	movs	r3, #2
 800fa78:	73fb      	strb	r3, [r7, #15]
    break;
 800fa7a:	e002      	b.n	800fa82 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fa7c:	2302      	movs	r3, #2
 800fa7e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa80:	bf00      	nop
  }
  return usb_status;
 800fa82:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3714      	adds	r7, #20
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b084      	sub	sp, #16
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	4603      	mov	r3, r0
 800fa98:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fa9a:	79fb      	ldrb	r3, [r7, #7]
 800fa9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fa9e:	79fb      	ldrb	r3, [r7, #7]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d102      	bne.n	800faaa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800faa4:	2301      	movs	r3, #1
 800faa6:	73fb      	strb	r3, [r7, #15]
 800faa8:	e001      	b.n	800faae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800faaa:	2300      	movs	r3, #0
 800faac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800faae:	7bfb      	ldrb	r3, [r7, #15]
 800fab0:	461a      	mov	r2, r3
 800fab2:	2101      	movs	r1, #1
 800fab4:	4803      	ldr	r0, [pc, #12]	; (800fac4 <MX_DriverVbusFS+0x34>)
 800fab6:	f7f3 fb13 	bl	80030e0 <HAL_GPIO_WritePin>
}
 800faba:	bf00      	nop
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	40020800 	.word	0x40020800

0800fac8 <__errno>:
 800fac8:	4b01      	ldr	r3, [pc, #4]	; (800fad0 <__errno+0x8>)
 800faca:	6818      	ldr	r0, [r3, #0]
 800facc:	4770      	bx	lr
 800face:	bf00      	nop
 800fad0:	20000068 	.word	0x20000068

0800fad4 <__libc_init_array>:
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	4d0d      	ldr	r5, [pc, #52]	; (800fb0c <__libc_init_array+0x38>)
 800fad8:	4c0d      	ldr	r4, [pc, #52]	; (800fb10 <__libc_init_array+0x3c>)
 800fada:	1b64      	subs	r4, r4, r5
 800fadc:	10a4      	asrs	r4, r4, #2
 800fade:	2600      	movs	r6, #0
 800fae0:	42a6      	cmp	r6, r4
 800fae2:	d109      	bne.n	800faf8 <__libc_init_array+0x24>
 800fae4:	4d0b      	ldr	r5, [pc, #44]	; (800fb14 <__libc_init_array+0x40>)
 800fae6:	4c0c      	ldr	r4, [pc, #48]	; (800fb18 <__libc_init_array+0x44>)
 800fae8:	f000 f930 	bl	800fd4c <_init>
 800faec:	1b64      	subs	r4, r4, r5
 800faee:	10a4      	asrs	r4, r4, #2
 800faf0:	2600      	movs	r6, #0
 800faf2:	42a6      	cmp	r6, r4
 800faf4:	d105      	bne.n	800fb02 <__libc_init_array+0x2e>
 800faf6:	bd70      	pop	{r4, r5, r6, pc}
 800faf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fafc:	4798      	blx	r3
 800fafe:	3601      	adds	r6, #1
 800fb00:	e7ee      	b.n	800fae0 <__libc_init_array+0xc>
 800fb02:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb06:	4798      	blx	r3
 800fb08:	3601      	adds	r6, #1
 800fb0a:	e7f2      	b.n	800faf2 <__libc_init_array+0x1e>
 800fb0c:	08010294 	.word	0x08010294
 800fb10:	08010294 	.word	0x08010294
 800fb14:	08010294 	.word	0x08010294
 800fb18:	08010298 	.word	0x08010298

0800fb1c <malloc>:
 800fb1c:	4b02      	ldr	r3, [pc, #8]	; (800fb28 <malloc+0xc>)
 800fb1e:	4601      	mov	r1, r0
 800fb20:	6818      	ldr	r0, [r3, #0]
 800fb22:	f000 b871 	b.w	800fc08 <_malloc_r>
 800fb26:	bf00      	nop
 800fb28:	20000068 	.word	0x20000068

0800fb2c <free>:
 800fb2c:	4b02      	ldr	r3, [pc, #8]	; (800fb38 <free+0xc>)
 800fb2e:	4601      	mov	r1, r0
 800fb30:	6818      	ldr	r0, [r3, #0]
 800fb32:	f000 b819 	b.w	800fb68 <_free_r>
 800fb36:	bf00      	nop
 800fb38:	20000068 	.word	0x20000068

0800fb3c <memcpy>:
 800fb3c:	440a      	add	r2, r1
 800fb3e:	4291      	cmp	r1, r2
 800fb40:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb44:	d100      	bne.n	800fb48 <memcpy+0xc>
 800fb46:	4770      	bx	lr
 800fb48:	b510      	push	{r4, lr}
 800fb4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb52:	4291      	cmp	r1, r2
 800fb54:	d1f9      	bne.n	800fb4a <memcpy+0xe>
 800fb56:	bd10      	pop	{r4, pc}

0800fb58 <memset>:
 800fb58:	4402      	add	r2, r0
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d100      	bne.n	800fb62 <memset+0xa>
 800fb60:	4770      	bx	lr
 800fb62:	f803 1b01 	strb.w	r1, [r3], #1
 800fb66:	e7f9      	b.n	800fb5c <memset+0x4>

0800fb68 <_free_r>:
 800fb68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb6a:	2900      	cmp	r1, #0
 800fb6c:	d048      	beq.n	800fc00 <_free_r+0x98>
 800fb6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb72:	9001      	str	r0, [sp, #4]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f1a1 0404 	sub.w	r4, r1, #4
 800fb7a:	bfb8      	it	lt
 800fb7c:	18e4      	addlt	r4, r4, r3
 800fb7e:	f000 f8d7 	bl	800fd30 <__malloc_lock>
 800fb82:	4a20      	ldr	r2, [pc, #128]	; (800fc04 <_free_r+0x9c>)
 800fb84:	9801      	ldr	r0, [sp, #4]
 800fb86:	6813      	ldr	r3, [r2, #0]
 800fb88:	4615      	mov	r5, r2
 800fb8a:	b933      	cbnz	r3, 800fb9a <_free_r+0x32>
 800fb8c:	6063      	str	r3, [r4, #4]
 800fb8e:	6014      	str	r4, [r2, #0]
 800fb90:	b003      	add	sp, #12
 800fb92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb96:	f000 b8d1 	b.w	800fd3c <__malloc_unlock>
 800fb9a:	42a3      	cmp	r3, r4
 800fb9c:	d90b      	bls.n	800fbb6 <_free_r+0x4e>
 800fb9e:	6821      	ldr	r1, [r4, #0]
 800fba0:	1862      	adds	r2, r4, r1
 800fba2:	4293      	cmp	r3, r2
 800fba4:	bf04      	itt	eq
 800fba6:	681a      	ldreq	r2, [r3, #0]
 800fba8:	685b      	ldreq	r3, [r3, #4]
 800fbaa:	6063      	str	r3, [r4, #4]
 800fbac:	bf04      	itt	eq
 800fbae:	1852      	addeq	r2, r2, r1
 800fbb0:	6022      	streq	r2, [r4, #0]
 800fbb2:	602c      	str	r4, [r5, #0]
 800fbb4:	e7ec      	b.n	800fb90 <_free_r+0x28>
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	b10b      	cbz	r3, 800fbc0 <_free_r+0x58>
 800fbbc:	42a3      	cmp	r3, r4
 800fbbe:	d9fa      	bls.n	800fbb6 <_free_r+0x4e>
 800fbc0:	6811      	ldr	r1, [r2, #0]
 800fbc2:	1855      	adds	r5, r2, r1
 800fbc4:	42a5      	cmp	r5, r4
 800fbc6:	d10b      	bne.n	800fbe0 <_free_r+0x78>
 800fbc8:	6824      	ldr	r4, [r4, #0]
 800fbca:	4421      	add	r1, r4
 800fbcc:	1854      	adds	r4, r2, r1
 800fbce:	42a3      	cmp	r3, r4
 800fbd0:	6011      	str	r1, [r2, #0]
 800fbd2:	d1dd      	bne.n	800fb90 <_free_r+0x28>
 800fbd4:	681c      	ldr	r4, [r3, #0]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	6053      	str	r3, [r2, #4]
 800fbda:	4421      	add	r1, r4
 800fbdc:	6011      	str	r1, [r2, #0]
 800fbde:	e7d7      	b.n	800fb90 <_free_r+0x28>
 800fbe0:	d902      	bls.n	800fbe8 <_free_r+0x80>
 800fbe2:	230c      	movs	r3, #12
 800fbe4:	6003      	str	r3, [r0, #0]
 800fbe6:	e7d3      	b.n	800fb90 <_free_r+0x28>
 800fbe8:	6825      	ldr	r5, [r4, #0]
 800fbea:	1961      	adds	r1, r4, r5
 800fbec:	428b      	cmp	r3, r1
 800fbee:	bf04      	itt	eq
 800fbf0:	6819      	ldreq	r1, [r3, #0]
 800fbf2:	685b      	ldreq	r3, [r3, #4]
 800fbf4:	6063      	str	r3, [r4, #4]
 800fbf6:	bf04      	itt	eq
 800fbf8:	1949      	addeq	r1, r1, r5
 800fbfa:	6021      	streq	r1, [r4, #0]
 800fbfc:	6054      	str	r4, [r2, #4]
 800fbfe:	e7c7      	b.n	800fb90 <_free_r+0x28>
 800fc00:	b003      	add	sp, #12
 800fc02:	bd30      	pop	{r4, r5, pc}
 800fc04:	200013f0 	.word	0x200013f0

0800fc08 <_malloc_r>:
 800fc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc0a:	1ccd      	adds	r5, r1, #3
 800fc0c:	f025 0503 	bic.w	r5, r5, #3
 800fc10:	3508      	adds	r5, #8
 800fc12:	2d0c      	cmp	r5, #12
 800fc14:	bf38      	it	cc
 800fc16:	250c      	movcc	r5, #12
 800fc18:	2d00      	cmp	r5, #0
 800fc1a:	4606      	mov	r6, r0
 800fc1c:	db01      	blt.n	800fc22 <_malloc_r+0x1a>
 800fc1e:	42a9      	cmp	r1, r5
 800fc20:	d903      	bls.n	800fc2a <_malloc_r+0x22>
 800fc22:	230c      	movs	r3, #12
 800fc24:	6033      	str	r3, [r6, #0]
 800fc26:	2000      	movs	r0, #0
 800fc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc2a:	f000 f881 	bl	800fd30 <__malloc_lock>
 800fc2e:	4921      	ldr	r1, [pc, #132]	; (800fcb4 <_malloc_r+0xac>)
 800fc30:	680a      	ldr	r2, [r1, #0]
 800fc32:	4614      	mov	r4, r2
 800fc34:	b99c      	cbnz	r4, 800fc5e <_malloc_r+0x56>
 800fc36:	4f20      	ldr	r7, [pc, #128]	; (800fcb8 <_malloc_r+0xb0>)
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	b923      	cbnz	r3, 800fc46 <_malloc_r+0x3e>
 800fc3c:	4621      	mov	r1, r4
 800fc3e:	4630      	mov	r0, r6
 800fc40:	f000 f83c 	bl	800fcbc <_sbrk_r>
 800fc44:	6038      	str	r0, [r7, #0]
 800fc46:	4629      	mov	r1, r5
 800fc48:	4630      	mov	r0, r6
 800fc4a:	f000 f837 	bl	800fcbc <_sbrk_r>
 800fc4e:	1c43      	adds	r3, r0, #1
 800fc50:	d123      	bne.n	800fc9a <_malloc_r+0x92>
 800fc52:	230c      	movs	r3, #12
 800fc54:	6033      	str	r3, [r6, #0]
 800fc56:	4630      	mov	r0, r6
 800fc58:	f000 f870 	bl	800fd3c <__malloc_unlock>
 800fc5c:	e7e3      	b.n	800fc26 <_malloc_r+0x1e>
 800fc5e:	6823      	ldr	r3, [r4, #0]
 800fc60:	1b5b      	subs	r3, r3, r5
 800fc62:	d417      	bmi.n	800fc94 <_malloc_r+0x8c>
 800fc64:	2b0b      	cmp	r3, #11
 800fc66:	d903      	bls.n	800fc70 <_malloc_r+0x68>
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	441c      	add	r4, r3
 800fc6c:	6025      	str	r5, [r4, #0]
 800fc6e:	e004      	b.n	800fc7a <_malloc_r+0x72>
 800fc70:	6863      	ldr	r3, [r4, #4]
 800fc72:	42a2      	cmp	r2, r4
 800fc74:	bf0c      	ite	eq
 800fc76:	600b      	streq	r3, [r1, #0]
 800fc78:	6053      	strne	r3, [r2, #4]
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	f000 f85e 	bl	800fd3c <__malloc_unlock>
 800fc80:	f104 000b 	add.w	r0, r4, #11
 800fc84:	1d23      	adds	r3, r4, #4
 800fc86:	f020 0007 	bic.w	r0, r0, #7
 800fc8a:	1ac2      	subs	r2, r0, r3
 800fc8c:	d0cc      	beq.n	800fc28 <_malloc_r+0x20>
 800fc8e:	1a1b      	subs	r3, r3, r0
 800fc90:	50a3      	str	r3, [r4, r2]
 800fc92:	e7c9      	b.n	800fc28 <_malloc_r+0x20>
 800fc94:	4622      	mov	r2, r4
 800fc96:	6864      	ldr	r4, [r4, #4]
 800fc98:	e7cc      	b.n	800fc34 <_malloc_r+0x2c>
 800fc9a:	1cc4      	adds	r4, r0, #3
 800fc9c:	f024 0403 	bic.w	r4, r4, #3
 800fca0:	42a0      	cmp	r0, r4
 800fca2:	d0e3      	beq.n	800fc6c <_malloc_r+0x64>
 800fca4:	1a21      	subs	r1, r4, r0
 800fca6:	4630      	mov	r0, r6
 800fca8:	f000 f808 	bl	800fcbc <_sbrk_r>
 800fcac:	3001      	adds	r0, #1
 800fcae:	d1dd      	bne.n	800fc6c <_malloc_r+0x64>
 800fcb0:	e7cf      	b.n	800fc52 <_malloc_r+0x4a>
 800fcb2:	bf00      	nop
 800fcb4:	200013f0 	.word	0x200013f0
 800fcb8:	200013f4 	.word	0x200013f4

0800fcbc <_sbrk_r>:
 800fcbc:	b538      	push	{r3, r4, r5, lr}
 800fcbe:	4d06      	ldr	r5, [pc, #24]	; (800fcd8 <_sbrk_r+0x1c>)
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	4608      	mov	r0, r1
 800fcc6:	602b      	str	r3, [r5, #0]
 800fcc8:	f7f1 ffbc 	bl	8001c44 <_sbrk>
 800fccc:	1c43      	adds	r3, r0, #1
 800fcce:	d102      	bne.n	800fcd6 <_sbrk_r+0x1a>
 800fcd0:	682b      	ldr	r3, [r5, #0]
 800fcd2:	b103      	cbz	r3, 800fcd6 <_sbrk_r+0x1a>
 800fcd4:	6023      	str	r3, [r4, #0]
 800fcd6:	bd38      	pop	{r3, r4, r5, pc}
 800fcd8:	20002c08 	.word	0x20002c08

0800fcdc <strncpy>:
 800fcdc:	b510      	push	{r4, lr}
 800fcde:	3901      	subs	r1, #1
 800fce0:	4603      	mov	r3, r0
 800fce2:	b132      	cbz	r2, 800fcf2 <strncpy+0x16>
 800fce4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fce8:	f803 4b01 	strb.w	r4, [r3], #1
 800fcec:	3a01      	subs	r2, #1
 800fcee:	2c00      	cmp	r4, #0
 800fcf0:	d1f7      	bne.n	800fce2 <strncpy+0x6>
 800fcf2:	441a      	add	r2, r3
 800fcf4:	2100      	movs	r1, #0
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d100      	bne.n	800fcfc <strncpy+0x20>
 800fcfa:	bd10      	pop	{r4, pc}
 800fcfc:	f803 1b01 	strb.w	r1, [r3], #1
 800fd00:	e7f9      	b.n	800fcf6 <strncpy+0x1a>

0800fd02 <strstr>:
 800fd02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd04:	780c      	ldrb	r4, [r1, #0]
 800fd06:	b164      	cbz	r4, 800fd22 <strstr+0x20>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	781a      	ldrb	r2, [r3, #0]
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	1c5e      	adds	r6, r3, #1
 800fd10:	b90a      	cbnz	r2, 800fd16 <strstr+0x14>
 800fd12:	4610      	mov	r0, r2
 800fd14:	e005      	b.n	800fd22 <strstr+0x20>
 800fd16:	4294      	cmp	r4, r2
 800fd18:	d108      	bne.n	800fd2c <strstr+0x2a>
 800fd1a:	460d      	mov	r5, r1
 800fd1c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800fd20:	b902      	cbnz	r2, 800fd24 <strstr+0x22>
 800fd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd24:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800fd28:	4297      	cmp	r7, r2
 800fd2a:	d0f7      	beq.n	800fd1c <strstr+0x1a>
 800fd2c:	4633      	mov	r3, r6
 800fd2e:	e7ec      	b.n	800fd0a <strstr+0x8>

0800fd30 <__malloc_lock>:
 800fd30:	4801      	ldr	r0, [pc, #4]	; (800fd38 <__malloc_lock+0x8>)
 800fd32:	f000 b809 	b.w	800fd48 <__retarget_lock_acquire_recursive>
 800fd36:	bf00      	nop
 800fd38:	20002c10 	.word	0x20002c10

0800fd3c <__malloc_unlock>:
 800fd3c:	4801      	ldr	r0, [pc, #4]	; (800fd44 <__malloc_unlock+0x8>)
 800fd3e:	f000 b804 	b.w	800fd4a <__retarget_lock_release_recursive>
 800fd42:	bf00      	nop
 800fd44:	20002c10 	.word	0x20002c10

0800fd48 <__retarget_lock_acquire_recursive>:
 800fd48:	4770      	bx	lr

0800fd4a <__retarget_lock_release_recursive>:
 800fd4a:	4770      	bx	lr

0800fd4c <_init>:
 800fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4e:	bf00      	nop
 800fd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd52:	bc08      	pop	{r3}
 800fd54:	469e      	mov	lr, r3
 800fd56:	4770      	bx	lr

0800fd58 <_fini>:
 800fd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5a:	bf00      	nop
 800fd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd5e:	bc08      	pop	{r3}
 800fd60:	469e      	mov	lr, r3
 800fd62:	4770      	bx	lr
